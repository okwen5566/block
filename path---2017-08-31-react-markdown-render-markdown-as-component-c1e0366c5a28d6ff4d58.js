webpackJsonp([0xbc37f83b9468],{1015:function(e,a){e.exports={data:{content:{content:'<h2 id=前言>前言</h2>\n<p>要寫出優雅的文檔是有難度的，尤其是需要格式規範的文章。而利用 Markdown，則可以專心寫作。Markdown 除了可以直接編譯為 HTML，還能編譯為 PowerPoint, Resume，還有 React 組件。無論是<a href="https://calpa.me/2017/06/01/create-markdown-powerpoint-in-5-mins/">利用 Markdown 製作 PowerPoint</a>，還是利用 Markdown 製作簡歷，都是非常方便的。如果你不是很熟悉 Markdown 語法的話，你可以在下文看 <a href="#Markdown-語法">Markdown 語法</a>。但是如果可以接受他人傳進來的 Markdown 文章，然後渲染他們的文章，那就會更加好。所以我就找了一下 React + Markdown 的組合，發現這個 React-markdown 工具下載的人數蠻多的。雖然那個項目還在開發階段，但是你可以在 <a href="http://rexxars.github.io/react-markdown">Live Demo</a> 測試一下渲染為 React 組件的效果。</p>\n<hr>\n<p><a data-fancybox="gallery" href="https://i.imgur.com/UFkBeEN.png"><img class="lozad d-block mx-auto" data-src=https://i.imgur.com/UFkBeEN.png title="Live Demo" /></a></p>\n<p><a data-fancybox="gallery" href="https://i.imgur.com/q2q2RJv.png"><img class="lozad d-block mx-auto" data-src=https://i.imgur.com/q2q2RJv.png title="直接渲染為 React 組件" /></a></p>\n<h2 id=react-markdown>react-markdown</h2>\n<p>Github: https://github.com/rexxars/react-markdown\nnpmjs: https://www.npmjs.com/package/react-markdown</p>\n<h3 id=安裝>安裝</h3>\n<pre><code><pre><code class="hljs javascript">npm install --save react-markdown\n</code></pre></code></pre>\n<h3 id=使用方法>使用方法</h3>\n<p>使用 ES6 Import <code>ReactMarkdown</code>，然后使用 &lt;ReactMarkdown /&gt;，並傳入 Markdown 到 source。</p>\n<pre><code class="language-js"><pre><code class="hljs js"><span class="hljs-keyword">import</span> ReactMarkdown <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-markdown\'</span>;\n\n<span class="hljs-keyword">const</span> input = <span class="hljs-string">\'# This is a header\\n\\nAnd this is a paragraph\'</span>;\n\n&lt;ReactMarkdown source={input} /&gt;\n</code></pre></code></pre>\n<p>然後你會看到這樣的：</p>\n<p><a data-fancybox="gallery" href="https://i.imgur.com/zR2Olai.png"><img class="lozad d-block mx-auto" data-src=https://i.imgur.com/zR2Olai.png title="React Markdown 例子" /></a></p>\n<p>官網上是這樣說的：</p>\n<pre><code class="language-js"><pre><code class="hljs js"><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'react\'</span>);\n<span class="hljs-keyword">var</span> ReactDOM = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'react-dom\'</span>);\n<span class="hljs-keyword">var</span> ReactMarkdown = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'react-markdown\'</span>);\n\n<span class="hljs-keyword">var</span> input = <span class="hljs-string">\'# This is a header\\n\\nAnd this is a paragraph\'</span>;\n\nReactDOM.render(\n    &lt;ReactMarkdown source={input} /&gt;,\n    document.getElementById(\'container\')\n);\n</code></pre></code></pre>\n<h3 id=Webpack1配置>Webpack 1 配置</h3>\n<p>如果你是用 Webpack 1 的話，你需要安裝 json-loader：</p>\n<pre><code><pre><code class="hljs javascript">npm install --save json-loader\n</code></pre></code></pre>\n<p>並在你的 webpack 設置裡面加上：</p>\n<pre><code class="language-js"><pre><code class="hljs js">{\n  <span class="hljs-attr">module</span>: {\n    <span class="hljs-attr">loaders</span>: [{\n      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\\.json$/</span>,\n      <span class="hljs-attr">loader</span>: <span class="hljs-string">\'json-loader\'</span>\n    }]\n  }\n}\n</code></pre></code></pre>\n<p>如果你設置 <code>escapeHtml</code> 或 <code>skipHtml</code> 為 <code>true</code>，該組件就不會使用<code>dangerouslySetInnerHTML</code>。</p>\n<h3 id=選項>選項</h3>\n<p>以下選項除了<code>source</code>之外都是可選的，其實這個工具已經配置成開箱即用，這裡就說幾個最底部的選項，更多的選項請去官網看。</p>\n<ul>\n<li><code>source</code> - 你的 Markdown 來源（必須）- string</li>\n<li><code>className</code> - 容器的 className - string</li>\n<li><code>containerTagName</code> - 容器的標籤名字 ，因為 Markdown 會有很多不同層次的 elements，容器需要把它們封裝。默認是<code>div</code> - string</li>\n</ul>\n<p>這個渲染器會渲染的組件有：</p>\n<ul>\n<li><code>HtmlInline</code> - 行內 HTML</li>\n<li><code>HtmlBlock</code> - HTML 塊</li>\n<li><code>Text</code> - 文字 (在段落裡面)</li>\n<li><code>Paragraph</code> - 段落 (<code>&lt;p&gt;</code>)</li>\n<li><code>Heading</code> - 標題 (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> etc)</li>\n<li><code>Softbreak</code> - 換行</li>\n<li><code>Hardbreak</code> - 斷行（強制換行） (<code>&lt;br&gt;</code>)</li>\n<li><code>Link</code> - 鏈接 (<code>&lt;a&gt;</code>)</li>\n<li><code>Image</code> - 圖像 (<code>&lt;img&gt;</code>)</li>\n<li><code>Emph</code> - 強調 (<code>&lt;em&gt;</code>)</li>\n<li><code>Code</code> - Inline code nodes (<code>&lt;code&gt;</code>)</li>\n<li><code>CodeBlock</code> - Blocks of code (<code>&lt;code&gt;</code>)</li>\n<li><code>BlockQuote</code> - 參照 (<code>&lt;blockquote&gt;</code>)</li>\n<li><code>List</code> - 列表 (<code>&lt;ol&gt;</code>, <code>&lt;ul&gt;</code>)</li>\n<li><code>Item</code> - 列表 (<code>&lt;li&gt;</code>)</li>\n<li><code>Strong</code> - Strong/bold nodes (<code>&lt;strong&gt;</code>)</li>\n<li><code>ThematicBreak</code> - 水平分割線 (<code>&lt;hr&gt;</code>)</li>\n</ul>\n<h2 id=Markdown語法>Markdown 語法</h2>\n<p>Markdown 的目標是易讀易寫，而它能夠幫助程序員專注開發，減少編寫文檔時候遇到的格式問題。Markdown 和 HTML 的寫法差不多，雖然 HTML 已經很容易寫，但是 Markdown 則是更加格式化，如果你直接閱讀 Markdown 文檔，你也可以想象到它渲染後的樣式。</p>\n<h3 id=標題>標題</h3>\n<pre><code><pre><code class="hljs javascript"># H1\n## H2\n### H3\n</code></pre></code></pre>\n<h3 id=清單>清單</h3>\n<p>無序清單使用<code>*</code>, <code>+</code> 或<code>-</code>，而我這是常用<code>-</code></p>\n<pre><code><pre><code class="hljs javascript">*   Red\n*   Green\n*   Blue\n\n+   Red\n+   Green\n+   Blue\n\n-   Red\n-   Green\n-   Blue\n</code></pre></code></pre>\n<p>有序清單則使用數字接著一個英文句點：</p>\n<pre><code><pre><code class="hljs javascript"><span class="hljs-number">1.</span>  Apple\n<span class="hljs-number">2.</span>  Banana\n<span class="hljs-number">3.</span>  Watermelon\n</code></pre></code></pre>\n<h2 id=後記>後記</h2>\n<p>順帶說一下，我的博客已經配置好 Service Worker，現在可以離線訪問網站。也就是下次訪問的時候，即使沒有 Wifi 或者連接到網絡，你也能夠瀏覽到文章內容。</p>\n<p>有機會的話，我會說說如何配置 Service Worker，以及當中的原理。</p>\n<p>我的簡歷也差不多重構一次了（逃。。。</p>\n',title:"React-markdown -- 實時渲染 Markdown 的 React 工具",createdDate:"2017-08-31T20:00+08:00",headerImgur:"IYhTVXU.png",id:"6lQXU5pobK8syIIO4owySA",toc:["前言","react-markdown","安裝","使用方法","Webpack1配置","選項","Markdown語法","標題","清單","後記"],tags:"React, Markdown, 工具"},latestPosts:{totalCount:60,edges:[{node:{title:"【網易考拉校招】部門總監面對面-直播答疑邀約（附網易內推碼B222E54）",url:"netease-kaola-live",createdDate:"2018-08-01T20:00+08:00"}},{node:{title:"Uncaught ReferenceError: regeneratorRuntime is not defined 解決方法",url:"regenerator-runtime-is-not-defined",createdDate:"2018-07-29T20:00+08:00"}},{node:{title:"關於作者",url:"about-calpa-liu",createdDate:"2018-05-01T20:00+08:00"}},{node:{title:"【方法】在直接複製貼上內容的時候，可能已經不知不覺注入了一段不可視的「空白」",url:"insert-zero-width-characters",createdDate:"2018-04-06T23:00+08:00"}},{node:{title:"知乎無限 live 數據流網站",url:"zhihu-unlimited-lives-website",createdDate:"2018-03-28T20:49+08:00"}},{node:{title:"Gatsbyjs async/await 更新報錯解決方法",url:"gatsybjs-async-await-upgrade-bug-solution",createdDate:"2018-03-21T20:00+08:00"}}]}},pathContext:{id:"6lQXU5pobK8syIIO4owySA"}}}});
//# sourceMappingURL=path---2017-08-31-react-markdown-render-markdown-as-component-c1e0366c5a28d6ff4d58.js.map