webpackJsonp([0xc61b59b78031],{1048:function(n,t){n.exports={data:{latestPosts:{totalCount:60,edges:[{node:{title:"【網易考拉校招】部門總監面對面-直播答疑邀約（附網易內推碼B222E54）",url:"netease-kaola-live",createdDate:"2018-08-01T20:00+08:00"}},{node:{title:"Uncaught ReferenceError: regeneratorRuntime is not defined 解決方法",url:"regenerator-runtime-is-not-defined",createdDate:"2018-07-29T20:00+08:00"}},{node:{title:"關於作者",url:"about-calpa-liu",createdDate:"2018-05-01T20:00+08:00"}},{node:{title:"【方法】在直接複製貼上內容的時候，可能已經不知不覺注入了一段不可視的「空白」",url:"insert-zero-width-characters",createdDate:"2018-04-06T23:00+08:00"}},{node:{title:"知乎無限 live 數據流網站",url:"zhihu-unlimited-lives-website",createdDate:"2018-03-28T20:49+08:00"}},{node:{title:"Gatsbyjs async/await 更新報錯解決方法",url:"gatsybjs-async-await-upgrade-bug-solution",createdDate:"2018-03-21T20:00+08:00"}}]},pagePosts:{edges:[{node:{title:"善用 Github Issue 的開源評論插件 -- Gitalk",createdDate:"2017-08-04T20:00+08:00",url:"utilize-github-issue-by-using-gitalk",headerImgur:"phH7Jc4.png",content:"## 前言\n\n以前，我的博客是用 Disqus 的評論插件，但是無論是載入速度，還是樣式上，都是有所缺乏的。我一直沒有安裝其他的評論插件，因為覺得搬家有點麻煩。但是當我試用一下之後，我就覺得這個插件安裝很方便，功能也很實用，尤其是可以寫 Markdown 評論，就讓我非常喜歡這個插件了。因此，我拜讀了一下 [Gitalk Github Repo](https://github.com/gitalk/gitalk) 的代碼。我會在這裡說一下我對這個插件的理解，並提交繁體中文 README.md 到官方倉庫上。如果你想試用的話，你可以到[官網](https://gitalk.github.io/)或[我的博客](#gitalk-container)留言。\n\n![Gitalk](https://i.imgur.com/DqyRXB9.jpg)\n\n\n\nGitalk 是一個基於 Github Issue 和 Preact 開發的評論插件。它支持多語言，包括英文，繁體中文和簡體中文，並[自動判斷用戶當前語言](https://github.com/gitalk/gitalk/blob/48de82ca24d4cb24a464f7cc9e72884a208b9d5c/src/gitalk.jsx#L55)：`navigator.language || navigator.userLanguage`。用戶只需要使用自己的個人或組織 Github 賬戶便可以登入系統。\n\n另外，它也有以下的功能：\n\n- 無干擾模式：`distractionFreeMode`\n- 快捷鍵提交評論 （cmd || ctrl + enter）\n\n\n## 安裝方法\n\n### 使用 cdn 引入\n![Imgur](https://i.imgur.com/6G11WN3.png)\n\n直至8月4日，我仍然沒有在 cdnjs 上面找到 Gitalk 的，只好去 cdnjs/cdnjs 上面提交了[新的 cdn 需求](https://github.com/cdnjs/cdnjs/issues/11668)。如果你也認為有需要用到 cdnjs 的話，你可以去那裡說一下。\n\n\n### 利用 npm 安裝\n\n```sh\nnpm i --save gitalk\ncnpm i --save gitalk\n```\n\n```js\nimport 'gitalk/dist/gitalk.css'\nimport Gitalk from 'gitalk'\n```\n\n### 去 Github 上面 clone Gitalk\n```sh\ngit clone git@github.com:gitalk/gitalk.git\ncd gitalk/dist/\n```\n\n然後把壓縮過的`gitalk.min.js` 放進你的項目。\n\n## 使用方法\n\n![Register a new OAuth Application](https://i.imgur.com/C6HEsRv.png)\n\nGitalk 需要 **Github Application**，如果沒有請點擊 [Register a new OAuth application](https://github.com/settings/applications/new) 申請，`Authorization callback URL` 填寫當前使用插件頁面的域名，例如我的博客就是填寫 https://calpa.me\n\n### 代碼範例\n\n```js\nvar gitalk = new Gitalk({\n  clientID: 'Github Application Client ID',\n  clientSecret: 'Github Application Client Secret',\n  repo: 'Github repo',\n  owner: 'Github repo owner',\n  admin: ['Github repo collaborators'],\n})\n\ngitalk.render('gitalk-container')\n```\n\n\n## Gitalk 選項\n\n- **clientID** `String`\n\n  **必須**. Github Application Client ID.\n\n- **clientSecret** `String`\n\n  **必須**. Github Application Client Secret.\n\n- **repo** `String`\n\n  **必須**. Github repository.\n\n- **owner** `String`\n\n  **必須**. Github repository 所有者，可以是個人或者組織。\n\n- **admin** `Array`\n\n  **必須**. Github repository 合作者 (確保對這個 repository 是有寫的權限)。\n\n- **id** `String`\n\n  Default: `location.href`.\n\n  頁面的唯一標識。\n\n- **labels** `Array`\n\n  Default: `['Gitalk']`.\n\n  Github issue 的標簽。\n\n- **title** `String`\n\n  Default: `document.title`.\n\n  Github issue 的標題。\n\n- **body** `String`\n\n  Default: `location.href + header.meta[description]`.\n\n  Github issue 的內容。\n\n- **language** `String`\n\n  Default: `navigator.language || navigator.userLanguage`.\n\n  設置語言，支持 [en, zh-CN, zh-TW]。\n\n- **perPage** `Number`\n\n  Default: `10`.\n\n  每次加載的數據大小，最多 100。\n\n- **distractionFreeMode** `Boolean`\n\n  Default: false。\n\n  類似Facebook評論框的全屏遮罩效果.\n\n- **pagerDirection** `String`\n\n  Default: 'last'\n\n  評論排序方式， `last`為按評論創建時間倒敘，`first`為按創建時間正序。\n\n- **createIssueManually** `Boolean`\n\n  Default: `false`.\n\n  如果當前頁面沒有相應的 isssue 且登錄的用戶屬於 admin，則會自動創建 issue。如果設置為 `true`，則顯示一個初始化頁面，創建 issue 需要點擊 `init` 按鈕。\n\n- **proxy** `String`\n\n  Default: [https://cors-anywhere/herokuapp.com](https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token)\n\n   [Github oauth 請求到反向代理，為了支持 CORS。 ](https://github.com/isaacs/github/issues/330)\n\n- **flipMoveOptions** `Object`\n\n  Default:\n  ```js\n    {\n      staggerDelayBy: 150,\n      appearAnimation: 'accordionVertical',\n      enterAnimation: 'accordionVertical',\n      leaveAnimation: 'accordionVertical',\n    }\n  ```\n\n  評論列表的動畫。 [參考](https://github.com/joshwcomeau/react-flip-move/blob/master/documentation/enter_leave_animations.md)\n\n- **enableHotKey** `Boolean`\n\n  Default: `true`.\n\n  啟用快捷鍵(cmd|ctrl + enter) 提交評論.\n\n\n## 方法\n\n- `render(String/HTMLElement)`\n\n  初始化渲染並掛載插件，[需要提供 HTMLElement 的 id ](https://github.com/gitalk/gitalk/blob/48de82ca24d4cb24a464f7cc9e72884a208b9d5c/src/index.js#L17)。\n\n- `setPerPage(page: number)`\n\n  // TODO: 我想在構建gitalk之後，可以再次手動設置屬性 perPage 屬性，再次自行定義每個頁面的評論載入量。\n\n## 後記\n這個 [Gitalk](https://github.com/gitalk/gitalk) 也是蠻好用的，它界面簡潔清新，沒有廣告，還支持 Markdown 格式。而且感覺更加適合 Markdown 程序員使用。。。\n",tags:"Github, Blog"}},{node:{title:"項目代碼調試：提問前要做的六個步驟",createdDate:"2017-07-24T21:00+08:00",url:"six-steps-to-debug-before-directly-ask-question",headerImgur:"6oFt2zp.jpg",content:"## 前言\n\n上天對於每個地球人都是公平的，每個人都一天只有 24 小時。為什麼有的人會停留不前，有的人卻會不斷有所成長？其中一個原因是當遇到問題時，他們解決問題的方法是非常不同的。同樣是遇到問題，與其伸手，等其他程序員幫助去解決問題，倒不如自己先嘗試各種方法，然後才問人家。。。我會在這篇文章簡單說一下在你提問之前，你可以做的六個步驟。\n\n## 步驟\n\n### 1. 檢查，試驗本地環境\n\n  如果你是和其他人一齊開發項目的話，可能你會遇到 packages 安裝報錯的問題，這個時候，你應該試試安裝packages，例如`npm install`，把現有項目的 packages 更新一下，可能現有的 packages 已經不是最新的，或者有所缺乏。\n\n  另外，你也可以看一下你自己的 npm 和 node 版本，是否因為版本號太低，而導致無法安裝某些 packages。如果是的話，請先確定是否需要用那麼新的 package 版本，然後再更新 node 版本。\n\n### 2. Google / Bing 一下\n\n  ![Google 一下][1]\n\n  問題就是答案，其實你直接在搜尋引擎搜尋，就會找到這些問題的解決方法。如果你問我一些技術的問題，我很可能會直接叫你 Google，因為有時候第一個搜尋結果就是你的答案。如果你已經找過，但是找不到的話，很大機會是你的搜尋字不對，你可以加一下你的項目的 package，比如說 把 react, bootstrap 等字眼加在搜尋裡面。\n\n### 3. 閱讀官方資料\n\n  ![Calpa's Blog Github Repo][2]\n\n  先閱讀 Github上面的 README.md，然後閱讀官網上對於該項目的簡介，使用方法，再看 API。你可以再看一次 Github Repo 的說明，看看有沒有自己沒注意到的地方。你也可以直接進入官網，然後看它對於各個方法，變量的說明。如果你看不到你想要的方法，你可以返回第二步，Google 一下。\n\n### 4. 查看 Issue\n\n  如果你還是搜不到的話，看看人家有沒有遇到類似的問題，並從中獲取靈感。\n\n### 5. 閱讀源代碼\n\n  有時候，開源項目的作者寫得比較匆忙，急著都沒有寫好文檔，以及測試代碼。這個時候，你直接看上面的代碼吧。。。\n\n  如果是部署在 Github 上面的話，可以使用在線代碼搜尋插件，比如說 [Insight.io for Github][3]。如果你已經把它 clone 下來的話，可以使用流行的編輯器進行全局搜尋，例如 Atom，Sublime。\n\n  ![Insight.io][4]\n\n  另外，你也可以使用 [lambda-view][5]，閱讀 JavaScript 源代碼時，這個很好用的。\n  ![lambda-view][6]\n\n### 6. 出去走走，喝點水\n\n  ![喝點水，休息一下][7]\n\n  如果你看了網上的解決方法，但覺得無從入手的話，出去走一走，喝一口水，讓大腦休息一下。有時候，我上午想不到的問題，吃個午餐，然後下午就想到解決方法了。\n\n## 禮貌地提出問題\n\n  如果你做了以上的步驟，還是沒有辦法解決問題的話，你可以去 Repo 的 Issue 上面說一下，先不要直接說我找到一個 bug。。。\n\n## 後記\n\n感覺很長時間沒有寫博客了，文筆開始生疏。這一篇文章寫的時間比以前長，可能我要努力一點才行。。。\n\n\n[1]: https://i.imgur.com/1Djy0Gj.png\n[2]: https://i.imgur.com/kmFRumd.png\n[3]: https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh\n[4]: https://i.imgur.com/OWuA4xP.png\n[5]: https://github.com/Jianru-Lin/lambda-view\n[6]: https://i.imgur.com/kmuI2NX.png\n[7]: https://i.imgur.com/oXlUIRt.gif",tags:"思考"}},{node:{title:"簡單易用的開源 JavaScript 動畫圖標庫 -- Titanic",createdDate:"2017-07-06T11:00+08:00",url:"titanic-a-set-of-animated-icons",headerImgur:"bLmxAZ3.gif",content:'如果你用過 Font Awesome 等圖標，你可能會覺得它們很好看，用起來很很方便。但是，在用戶點擊這些圖標的時候，它們是不會有反應的。如果有這些圖標會動的話，那就更加好。Titanic 提供一系列的動畫圖標，以及以 JavaScript 的調用圖標動畫的方法。\n\n如果你想要看 Hello, World 的版本的話，你可以到我的 [Codepen](https://codepen.io/calpa/pen/xrzPxx) 裡面，測試一下。\n\n![Preview](https://i.imgur.com/bLmxAZ3.gif)\n\n## 安裝方法\n\n你可以使用 CDN 或者 npm 來安裝 Titanic。\n\n### CDN\n\n直接在 HTML head 裡面加進下面的字符。\n```html\n<script src="https://cdn.rawgit.com/icons8/titanic/master/dist/js/titanic.min.js"></script>\n<script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/4.5.9/bodymovin.min.js"></script>\n```\n\n然後在 body 的部分初始化 Titanic。\n\n```html\n<script>\n    var titanic = new Titanic();\n</script>\n```\n\n你可以透過這種標籤來加上 Titanic 圖標。\n\n```html\n<div class=\'titanic titanic_chat\'></div>\n```\n\n![All icons](https://i.imgur.com/aiG4BYo.png)\n\n你可以透過[這裡](https://rawgit.com/icons8/titanic/master/demo/index.html)查找 Titanic 所支持的圖標，把 chat 換成以下的字詞：\n* caps\n* chat\n* checkbox\n* expand\n* cheap\n* expensive\n* idea\n* mailbox\n* mic\n* no-mic\n* online\n* pause\n* power\n* shopping\n* smile\n* stop\n* unlock\n* zoom\n\n### npm\n\n```\nnpm install titanic-icons --save\n```\n\n鏈接：[titanic-icons - npmjs](https://www.npmjs.com/package/titanic-icons)\n\n### 使用你自己的備份\n\n如果你喜歡在自己的伺服器，而不是 rawgit 去使用 Titanic 的話，你只需要把 base URL 傳進 init() 裡面。\n\n```javascript\ntitanic.begin(\'/my/base/directory/\');\n```\n然後，當你有一個div，id="chat" 的時候，Titanic 會自動檢測所有在 /my/base/directory/chat.json 裡面的圖標。\n\n## API\n\n* `titanic.isInitialized()` -- 返回 true / false\n* `titanic.items` -- 返回包含所有 titanic 圖標的一個 Array\n* `titanic.items[index].on(), titanic.items[index].off(), titanic.items[index].play()` -- 調整動畫 by index\n* `titanic.on(token), titanic.off(token), titanic.play(token)` -- 調整動畫 by token (name)\n\n## 例子\n\n```html\n<head>\n    <!--Inserting the scripts once for the whole page-->\n    <script src="https://cdn.rawgit.com/icons8/titanic/master/dist/js/titanic.min.js"></script>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/4.5.9/bodymovin.min.js"></script>\n</head>\n<body>\n    <!--Inserting an icon-->\n    <div class=\'titanic titanic-checkbox\'></div>\n\n    <!--Initializing-->\n    <script>\n        var titanic = new Titanic({\n          hover: true, // auto animated on hover (default true)\n          click: true  // auto animated on click/tap (default false)\n        });\n    </script>\n\n    <!--Clicking turns this icon on-->\n    <button onclick="titanic.on(getElementById(\'checkbox\').value)">On</button>\n</body>\n```\n\n## 原作者的話\n> JavaScript is basically [bodymovin](https://github.com/bodymovin/bodymovin) plus few lines of my code. It\'s a solid library with an awesome name. Thank you, guys.\n\n> Icons are created by [Margarita Ivanchikova](https://dribbble.com/imargarita) from [Icons8](https://icons8.com/). She has many more awesome animations in her portfolio.\n\n> The code rewritten by [Denis Alexanov](https://github.com/dhilt), my teacher and guru. Thank you!\n\n> Project is produced by Icons8, author of the famous icon library, [IconPharm](https://iconpharm.com), and [Sleek Logos](https://sleeklogos.design).\n\n> The code is created by Icons8\n\n![Magritte](https://i.imgur.com/p8Xoj9l.gif)\n\nGithub Repo: [icons 8 / titanic](https://github.com/icons8/titanic)\n\n## 感想\n\n我覺得這個很炫酷，我應該可以用在現有的前端開發項目，比如說博客，還有在做的一個在線學習編程平台上。如果你希望看到我如何應用 Titanic 的話，你可以打個星，關注一下我的博客。\n',tags:"JavaScript, Library"}},{node:{title:"神兵利器 -- HHKB Pro 2 開箱文",createdDate:"2017-07-02T20:16+08:00",url:"introduction-to-hhkb-pro-2",headerImgur:"AbKpx2P.jpg",content:"![盒子][1]\n\n我一開始拿到 Happy Hacking KeyBoard Pro 2時，我就問為什麼鍵盤可以完全沒有字的，那叫我如何輸入。。。雖然我可以盲打（不看鍵盤直接輸入），但也許我未必可以有能力使用這樣的鍵盤。但寫了一天代碼之後，我才發現，原來這一切都是自己的猜疑而已。這個鍵盤打起來就是一個字，爽。\n\n![HHKB Pro 2][2]\nHHKB Pro 2 盒子\n\n## HHKB\n\n在我取得這個 HHKB Pro 2 之前，我是一直在用 Cooler Master 的紅軸機械鍵盤，這個打起來也是很爽的。\n\nHHKB 的按鍵數量相對少，只提供必需的那些按鍵，它取消了數字鍵，功能鍵，以及方向鍵。但是對於 Emacs 用戶（我）來說，這些都不是問題，因為很多時候都是按 Ctrl + P/N/B/F 來達到上下左右的效果。\n\n雖則如此，我利用 Karabiner 做了四點配置：\n\n1. 當 MacBook 鏈接 HHKB 的時候，電腦自帶的鍵盤不會再有輸出。\n1. 右邊 Command 按鍵變為右邊 Option\n1. 右邊 Option 按鍵變為右按 Mouse\n1. Option 加 IKJL 等於 上下左右\n\n![Karabiner 配置][3]\n\n## Emacs\n\n> Emacs = Escape Meta Alt Ctrl Super\n\n作為一個 Emacs 重度（中毒）用戶，對 Ctrl 鍵的需求是很大的。尤其是我把 Ctrl 和 Caps Lock 的位置交換之後，左手無名指就經常發力。\n\n不知不覺之間，我就已經學會了盲打的技巧。現在打代碼就像玩遊戲一樣，我幾乎都不用看鍵盤，直接想到那個字，那句命令，直接打出來。如果你不用看鍵盤，而是直接輸入的話，每分鐘打字速度會提高很多的。。。\n\n最後，祝大家都能有自己的神兵利器，享受 Happy Hacking 的旅途。\n\n\n[1]: https://i.imgur.com/AVN6eaJ.jpg\n[2]: https://i.imgur.com/AbKpx2P.jpg\n[3]: https://i.imgur.com/aDZMqim.png",tags:"Keyboard"}},{node:{title:"【翻譯】前端性能優化必備工具清單",createdDate:"2017-06-19T20:00+08:00",url:"front-end-performance-check-list",headerImgur:"Vb56RuU.jpg",content:'## 前言\n\n在網頁開發的世界裡，尤其是前端開發，我們會用很多時間尋找最好的設計，以及最好的內容。雖然這是沒有錯的，但是，我們會忘記去優化我們的網頁。。。這會讓用戶需要很久的時間，比如說，瀏覽器需要六秒到十秒以上才能完成整個渲染過程。。。\n\n在這篇文章，我會分享優化網頁的檢查清單。如果你覺得我有錯漏的地方，請在下面留言。這張清單會包含一些優化搜尋引擎排名 (SEO) 的技巧，以及減少網頁加載時間的最佳實踐。\n\n> 編者按：很多都是我聽過或從來沒有用過的工具，我還是要學習一個。。。\n\n馬上開始！\n\n## 那些我們忘記的基本功\n\n### Favicon\n\n  請不要忘記為你的網站加上它，它就好像是你的網站的 ID。無論你有沒有 favicon.ico ，用戶的瀏覽器依然會請求它。如果你忘記加上這個檔案，你的網站就會返回 404 Not Found，這會讓瀏覽器面紅。。。所以你要小心一點，避免給予用戶負面的第一印象。要解決這個問題，你可以透過 [Favicon Generator][1] 生成 favicon 和 manifest 檔案。\n\n### Open Graph\n\n  加上社交媒體的 meta 標籤，用戶更好地分享你的文章，同時 Google Ranking 也會提高，你可以使用 [Meta Tags][2] 產生 Social meta tags。\n\n> 譯者按：產生 Open Graph Meta Tags，我的博客也加上了 Open Graph。\n\n## 圖片優化\n\n### 壓縮圖像\n  載入圖片會大幅地延長網頁的加載時間，甚至達到整體網頁載入時間的七成。如果可以的話，請使用 SVG，以及壓縮你的那些精緻圖像。你可以使用 [Compress PNG][3] 來幫忙壓縮圖像。\n\n\n## CSS 優化\n\n### **Autoprefixer**\n\n  解決跨瀏覽器上的 CSS 問題。我們都會在自己喜歡的瀏覽器下寫 CSS 的規矩，而我則是使用 Chrome。雖然如此，你依然需要為這些規矩加上 prefix 來支持所有類型的瀏覽器。 Autoprefixer 會使用現在瀏覽器熱度，對各種屬性支持度的資料，來提供你所需要的 prefix。你可以透過命令行來運用它。\n\n```bash\nnpm install -g postcss-cli autoprefixer\npostcss *.css use autoprefixer -d build\n```\n\n你也可以使用 Webpack 設置，或者使用 [Autoprefixer CSS online][4] 。\n\n### **Purifycss**\n\n  刪除項目內沒有用到的 CSS 規矩。它會讀取內容 (HTML/JS/PHP) 和 CSS，然後返回必須的 CSS。它是一個非常有用的工具，如果你是在用 CSS 框架比如說 Bootstrap，這個能夠減少很多的 CSS 文檔大小。\n\n安裝方法：\n```\nnpm install -g purify-css\n```\n\n使用方法：\n```\npurifycss src/css/main.css src/css/bootstrap.css src/js/main.js — min — info — out src/dist/index.css\n```\n\n你可以在 purify-css 的 [Github Page][5] 中獲得更多資訊。\n\n### minify CSS\n  你可以使用 purify-css 或使用網上的[CSS Compressor][6]。\n\n## 減少載入時間\n### [PageSpeed Insights][7]\n\n  PageSpeed Insights 可以用來檢查載入網頁速度，它會分別在手提電話和電腦運行測試。它會使用手提電話的 user-agent，以及 Desktop 的 user-agent。PageSpeed 會檢查網頁時候已經應用網頁的最佳實踐，並提供一個 0﹣100 的分數，同時提供如何提高分數的意見。\n\n### GZIP\n  開啟 GZIP 壓縮，是其中一個減少網頁載入速度的最快改善方法。Just Do IT，設置 GZIP，並讓你的用戶享受飛一般的感受，下圖是節省流量的效果圖。\n\n![PICSrush GZIP 測試圖][8]\n\n你可以在[Check GZIP compression][9] 網站中測試你的網站是否已經開啟 GZIP 壓縮功能。\n\n另外，你也可以在[GZIP COMPRESSION CHECKER](https://www.websiteplanet.com/zh-hans/webtools/gzip-compression/) 這個工具測試你的網站。（謝謝讀者 Karen 提供）\n\n### CDN\n  根據[維基百科][10]，內容傳遞網路（CDN）是指一種透過互聯網互相連接的電腦網絡系統，利用最靠近使用者的伺服器，更快地傳送檔案。簡單來說，CDN 就是一種網絡上的緩存系統。你可以使用免費的 [CloudFlare][11] 來達到這個效果。\n\n> 編者按：你可以用 cdnjs 或其他 cdn。\n\n## 優化平台\n\n### [Sentry][12]\n\n  對於前端工程師來說，它是一個非常正的工具。Sentry 檢查在瀏覽器環境下，是否存在任何 uncaught JavaScript exceptions，主動追蹤發生的錯誤，並提供報告。它提供豐富的 API，使得你可以自定義如何在其他地方顯示這些數據。\n\n  它會透過 Email, SMS 或 Slack 通知你，當前端環境發生錯誤時，它亦會提供用戶回應。\n\n### [Google Tag Manager][13]\n\n  Google Tag Manager 可以一站式管理你所有會傳送到第三方，例如 Facebook 和 Twitter 的 JavaScript 代碼。透過使用它，你減少網頁的載入時間，以及更加方便地在同一個地方管理 JavaScript 代碼。\n\n<iframe width="100%" height="300" src="https://www.youtube.com/embed/KRvbFpeZ11Y" frameborder="0" allowfullscreen></iframe>\n\n> Thanks for reading! feel free to leave a comment if you think I miss something.\n\n> If you think other people should read this, press the 💚 button, tweet and share the post. Remember to follow me on Medium so you can get notified about my future posts.\n\n## 譯者的話\n\n這次翻譯英文文章，真的是很有趣呢，不過要寫起來感覺沒有自己從零開始寫一篇那麼流暢。\n\n一開始我是去問問人家，可不可以翻譯一下他們的文章？結果就取得同意了。\n\n這次翻譯這一篇文章，讓我了解到很多對我來講是新的工具，比如說 Sentry 以及Google Tag Manager。我還是一個萌新，感覺前端的路還有很長要走啊。。。\n\n![Calpa\'s Blog GZIP 測試圖][14]\n\n---\n\n原文鏈接： [Frontend Performance Check-list For Production - Medium][15]\n\n原作者：[Youssouf El Azizi][16] <small>(Founder http://picsrush.com , React js developer)</small>\n\n\n[1]: http://realfavicongenerator.net/\n[2]: https://megatags.co/\n[3]: http://compresspng.com/\n[4]: https://autoprefixer.github.io/\n[5]: https://github.com/purifycss/purifycss\n[6]: http://csscompressor.com/\n[7]: https://developers.google.com/speed/pagespeed/insights/\n[8]: https://i.imgur.com/k7FRiSi.png\n[9]: https://checkgzipcompression.com/\n[10]: https://zh.wikipedia.org/zh-hk/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF\n[11]: https://www.cloudflare.com/\n[12]: https://sentry.io/welcome/\n[13]: https://developers.google.com/tag-manager/\n[14]: https://i.imgur.com/SJma5Pv.png\n[15]: https://hackernoon.com/front-end-performance-check-list-for-production-4e930cb63e8a\n[16]: https://medium.com/@yjose',tags:"Front End, Performance, Production, Check-list"}},{node:{title:"2017 年香港開源年會後記",createdDate:"2017-06-14T09:28+08:00",url:"hong-kong-open-sources-conference-remarks",headerImgur:"ZBautza.jpg",content:'大約兩個星期之前，我在 Facebook 上看到 2017 年的香港開源年會的消息。我想，我是不是可以透過這個機會，認識一下不同領域的程序員呢。於是，我在 EventBrite 上面買了學生票。但最終我拿到 VIP 票了，感覺有點激動。我把這一次的會議做了幾點筆記，也許，每一個人都應該參加最少一次如此有規模的大會。我會在這裡說說我參與這次會議所發生的一些事。\n\n在這一次大會之前，我參加了 Hong Kong Open Source Meeting #2，當時我是說[《5分鐘製作 Markdown PowerPoint》][1]。\n\n那天晚上，我才知道原來那一次演講的話，就會有一張免費 VIP 票，包含入場的資格，衣服及外套。我還拿到一些免費的票，轉送給其他認識的人了。\n\n![VIP 門票][2]\n\n![大會送的衣服][3]\n\n我之前幫忙舉辦 Hang Seng Bank AI Hackathon，在說大數據的時候提到了這個黑客松，並放出了團體合照。。。\n\n![Hang Seng Hackathon][4]\n\n## 大數據\n\n一些中國的互聯網公司對數據十分看重，並認為這些數據都是可以製造財富的資產。比如說滴滴打車收集了很多打車的交易數據，並善用這些數據優化分配司機和乘客的算法。又比如說阿里巴巴對大數據很重視，它的[天池大數據眾智平台][5]會提供各種各樣的大數據，並舉辦比賽招聘人才。\n\n在這一次大會中，我了解到原來台灣在開放數據這一方面做得不錯。根據[Global Open Data Index][6] 的開放數據顯示，台灣是排名第一的，而香港則是排行 23。就讓我們看一下香港政府是如何開放數據的。\n\n### 香港的開放數據\n香港政府[資料一線通][7]平台，以多種檔案格式提供多個政府部門類別，機構的一些查詢資料，比如說天氣預報，中學教育統計資料。值得注意的是，這些檔案並不是 ODF，而是 xls, xml, csv, json, gif, txt, tif。。。\n\n而且連 Hello World 都不能跑，這叫我如何是好。。。\n\n我把嘗試這個平台的過程寫成[《香港開放數據平台 - 從入門到放棄》][8]。\n\n## 自動化構建\n![Reproducible Builds][9]\n\nDebian 的 Leader Chirs Lamb 也來了這一次的大會，他分享了 Reproducible builds 這一個主題。\n\n### 不可重現的原因\n\n![Reason of non-reproducibility][10]\n\n1. Timestramps\n1. 時區\n  比如說，你在美國和香港時區使用  `new Date()`  方法得出的結果是不同的。\n1. Non-deterministic file ordering\n1. 字典 / hash key 的次序不同\n1. 用戶，群組，系統變量不同\n1. 組建的路徑不同 (eg. /home/lamby vs /home/calpa)\n\n---\n### Technical Advantages\n![Technical Advantages][11]\n1. 檢測構造環境程序所導致的意外。\n1. 更加容易地測試更新的代碼。\n  我們可以自動構建測試所需要的生產環境，定義所需要的數據。透過這個方法，我們可以自動測試時候更新後的代碼會不會引入更多的 Bug。。。\n\n---\n## 最佳實踐\n\n### Builds\n\n![Best Practices of Builds][12]\n\n1. 把它當成是藍圖一樣\n1. 避免需要登入去構建或調試\n  這個可以利用Makefile, Gulp, Grunt 等一些自動化構建工具幫忙自動構建程序\n1. 善用版本控制工具去構建檔案\n  比如說用 Git...\n1. Explicit is better than implicit\n  其實這一個思想以前也\n1. 每一次跑的時候都創造一個新的 layer\n\n---\n### Container Host Security\n\n![Best Practices of Container Host Security][13]\n1. 不要用 root 身份去跑\n1. 要限制 SSH Access\n1. 用 namespaces\n1. 定義資源限額\n1. 開啟記錄\n\n## 認識其他程序員\n\n![台北摩茲工寮][14]\n這次我認識了台北摩茲工寮的其中一個摩茲人，了解到原來他們會每個禮拜在台北會有聚會。\n\n也許，我們也可以參加他們的開源項目，作出自己小小的貢獻。\n\n如果以後過去台北的話，我也可以過去拜會一下他們。\n\n## 食物\n\n![免費星巴克咖啡][15]\n\n這次有星巴克的免費食物，比如說菠菜卷，冷麵，沙拉。味道不錯 XD\n\n![北角雞蛋仔][16]\n\n最後我離開數碼港，去北角嘗試北角雞蛋仔，其實味道也是不錯的。但是如果要說到最好吃的雞蛋仔的話，那還是九龍灣流動小販賣的炭燒雞蛋仔味道最好。\n\n最後，感謝所有幫忙舉辦香港開源年會的人，讓我這樣的人也可以有一個渠道認識這個世界。\n\n\n[1]: https://calpa.me/2017/06/01/create-markdown-powerpoint-in-5-mins/\n[2]: https://i.imgur.com/ZBautza.jpg\n[3]: https://i.imgur.com/4q7YR0J.png\n[4]: https://i.imgur.com/aSRoBdc.jpg\n[5]: https://tianchi.aliyun.com/\n[6]: https://index.okfn.org/place/\n[7]: https://data.gov.hk/tc/\n[8]: https://calpa.me/2017/06/12/hong-kong-open-data-from-zero-to-giveup/\n[9]: https://i.imgur.com/q8g0CgG.jpg "500 Reproducible builds"\n[10]: https://i.imgur.com/NTUpphj.jpg\n[11]: https://i.imgur.com/5WY6bHC.jpg\n[12]: https://i.imgur.com/p6pTo4O.jpg\n[13]: https://i.imgur.com/DZ1CSib.jpg\n[14]: https://i.imgur.com/NXToUgx.png\n[15]: https://i.imgur.com/MaMW0xE.jpg\n[16]: https://i.imgur.com/ouO6EVo.jpg',tags:"後記, Conference, Open Source"}}]}},pathContext:{limit:6,skip:18}}}});
//# sourceMappingURL=path---page-3-396b1401a47ca443f41f.js.map