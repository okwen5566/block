webpackJsonp([0xb09722f8f217],{1054:function(n,e){n.exports={data:{latestPosts:{totalCount:60,edges:[{node:{title:"【網易考拉校招】部門總監面對面-直播答疑邀約（附網易內推碼B222E54）",url:"netease-kaola-live",createdDate:"2018-08-01T20:00+08:00"}},{node:{title:"Uncaught ReferenceError: regeneratorRuntime is not defined 解決方法",url:"regenerator-runtime-is-not-defined",createdDate:"2018-07-29T20:00+08:00"}},{node:{title:"關於作者",url:"about-calpa-liu",createdDate:"2018-05-01T20:00+08:00"}},{node:{title:"【方法】在直接複製貼上內容的時候，可能已經不知不覺注入了一段不可視的「空白」",url:"insert-zero-width-characters",createdDate:"2018-04-06T23:00+08:00"}},{node:{title:"知乎無限 live 數據流網站",url:"zhihu-unlimited-lives-website",createdDate:"2018-03-28T20:49+08:00"}},{node:{title:"Gatsbyjs async/await 更新報錯解決方法",url:"gatsybjs-async-await-upgrade-bug-solution",createdDate:"2018-03-21T20:00+08:00"}}]},pagePosts:{edges:[{node:{title:"初探 JavaScript 的 Closure",createdDate:"2017-02-19T15:12+08:00",url:"javascript-closure",headerImgur:"KMksHxZ.png",content:'## 為什麼會有這篇文章\n\n打好基本功是很重要的。。。\n\n## 最簡單的閉包\n1. 先定義一個Function A\n2. 在A的裡面定義一個Function B\n3. 在A中返回B\n4. 執行A(), 將A()的返回值賦予給b\n5. 執行b()\n\n```[js]\nfunction A() {\n  function B() {\n    console.log("Hello, world!");\n  }\n  return B;\n}\nvar b = A();\nb(); // Hello World\n```\n\n## 加法 - ES6\n1. 先定義adder()\n2. 定義匿名函數\n3. 返回x + y\n4. 定義變量 add5\n5. 執行 add5()\n\n```[js]\nlet adder = (x) => (y) => x + y\n\nlet add5 = adder(5);\nlet add10 = adder(10);\n\nconsole.log(add5(7)); // 12\nconsole.log(add10(7)); // 17\n```',tags:"JavaScript"}},{node:{title:"JavaScript 中的 True 與 False",createdDate:"2017-02-02T23:19+08:00",url:"javascript-true-and-false",headerImgur:null,content:"這幾天用[Enki](https://www.enki.com/)來學習JavaScript，感覺不錯，**You can't handle the truth!** 有一些特別True/False例子。這裡簡單記錄一下。\n\n最簡單的測試方法：\n```[js]\nfunction test(something){\n  if (something) {\n    console.log(something + ' is true.');\n  } else {\n    console.log(something + ' is false.');\n  }\n}\n```\n# 例子\n## Truthy\n```[js]\ntrue <- true當然是true...\n[1][0]\nnew Date()\nnew Number(0)\nObject\nInfinity\n[]\n```\n以下都是[object Object]:\n```\n{a: false}\n{}\n```\n\n## Falsy\n```[js]\nfalse <- false當然是false...\nundefined\n''\n\"\"\n[1][1] <- undefined\nNaN\nnull\n{}.someKey\n0\n[].length <- 這個是0，所以出false\n```\n\n值得注意的是[]，它本身會是`true`，但如果用`[] == true`的話會輸出`false`，\n而`[] == false`的話會輸出`true`。",tags:"JavaScript"}},{node:{title:"localStorage vs sessionStorage",createdDate:"2017-01-20T19:37+08:00",url:"localstorage-vs-sessionstorage",headerImgur:null,content:'# Storage\n* HTML5 的 **Web Storage** 包括了兩種儲存方式：**localStorage**及**sessionStorage**。\n* 儲存在Storage中的資料，以key-value pair的形式保存。\n* Cookie的佔用空間非常小，大小限制于4KB左右，常見的用途是保存賬號登錄信息與登錄狀態。\n* 使用Storage物件時，可以寫`localStorage`代替`window.localStorage`。\n\n## localStorage\n即使用戶關閉瀏覽器，頁面數據依然存在。下一次用戶打開該頁面，便能夠使用該資料。舉個例子，當localStorage擁有userdata，瀏覽器可以獲取用戶資料，瀏覽器會導航用戶到登入後的畫面。\n\n```[js]\nif (localStorage.getItem(\'userdata\')) {\n  login();\n} else {\n  register();\n}\n```\n\n## sessionStorage\nsessionStorage與localStorage相似，但如果用戶關閉當前頁面，sessionStorage中的數據就會被清空。\n\n```[js]\nwindow.sessionStorage.setItem("username", "calpa");\nwindow.sessionStorage.getItem("username"); // calpa\n```\n\n# 方法\n## 儲存\n儲存資料的時候，可以利用Storage物件內的`setItem()`方法。\n```[js]\nlocalStorage.setItem(3, 3);\nsessionStorage.setItem("username", "calpa");\n```\n\n## 獲取\n獲取資料的時候，則會用到`getItem()`方法。\n```[js]\nlet username = localStorage.getItem("username");\n```\n\n如果key不是string的話，獲取資料時會出現問題。\n```[js]\nlocalStorage.3 = 3; // Uncaught SyntaxError: Unexpected number\n```\n\n## 清除\n清除某個資料，可以用`removeItem()`\n```[js]\nwindow.localStorage.removeItem("username");\n```\n\n清除所有資料，可以用`clear()`\n```[js]\nwindow.localStorage.clear();\nwindow.sessionStorage.clear();\n```\n\n# 參考資料\n1. [Using the Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API)\n',tags:"Web, JavaScript"}},{node:{title:"淺談 JavaScript 變量提升",createdDate:"2017-01-14T20:09+08:00",url:"javascript-variable-hoisting",headerImgur:null,content:"在 JavaScript 中，variable hoisting 是一個容易犯錯的地方。\n在一段 scope 裡面，沒有定義變量就使用變量的話會彈出 Reference Error。\n```[js]\n // ReferenceError: poi is not defined\nconsole.log(poi);\n```\n---\n```[js]\nvar name;\nconsole.log(name); // undefined\nname = 'calpa'\nconsole.log(name); // calpa\n```\n由於JavaScript的解釋器會提前把所有變量函數定義，所以上面這一段代碼會變成這一段：\n```[js]\nconsole.log(name); // undefined\nvar name = 'calpa';\nconsole.log(name); // calpa\n```\n另外，JavaScript也會出現這樣的問題。。。\n```[js]\nvar name = 'calpa';\n(function () {\n    // My name is undefined\n    console.log(\"My name is \" + name);\n    var name = 'poi';\n    // My name is poi\n    console.log(\"My name is \" + name); // poi\n})();\n```\n\n### 解決方法\n簡單來說，我們在寫 JavaScript 時，應該提前在檔案開始位置定義變量。\n\n---\n參考資料：\n1. [Variable and Function Hoisting in JavaScript](http://adripofJavaScript.com/blog/drips/variable-and-function-hoisting)\n1. [JavaScript 中的变量和函数提升](http://jinlong.github.io/2013/09/11/var-and-fun-hoisting/)\n",tags:"JavaScript"}},{node:{title:"Hexo 時代之建立 404 Page",createdDate:"2017-01-08T11:02+08:00",url:"hexo-404-page",headerImgur:null,content:"# 建立方法\n1. 在Terminal輸入 `hexo new page 404`\n2. 然後打開儲存404檔案的位置，比如說：`/source/404/index.md`\n3. 在這個檔案最頂部寫下`permalink: /404.html`就可以了。\n\n## 參考資料\n1. [Creating a custom 404 page for your GitHub Pages site](https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/)",tags:"Hexo"}},{node:{title:"Hello, World!",createdDate:"2017-01-08T10:00+08:00",url:"hello-world",headerImgur:null,content:"# Hello World\n\n這是一個用hexo建構的blog，使用Hexo的主題[Anisina](https://github.com/Haojen/hexo-theme-Anisina)\n\n我修改了`_config.yml`裡面的`post-default-img` 以及 `post-default-img-mobile`。",tags:"Hexo"}}]}},pathContext:{limit:6,skip:54}}}});
//# sourceMappingURL=path---page-9-ff264a956c979cb4e40c.js.map