webpackJsonp([0xf93c955f2f71],{1046:function(n,e){n.exports={data:{latestPosts:{totalCount:60,edges:[{node:{title:"【網易考拉校招】部門總監面對面-直播答疑邀約（附網易內推碼B222E54）",url:"netease-kaola-live",createdDate:"2018-08-01T20:00+08:00"}},{node:{title:"Uncaught ReferenceError: regeneratorRuntime is not defined 解決方法",url:"regenerator-runtime-is-not-defined",createdDate:"2018-07-29T20:00+08:00"}},{node:{title:"關於作者",url:"about-calpa-liu",createdDate:"2018-05-01T20:00+08:00"}},{node:{title:"【方法】在直接複製貼上內容的時候，可能已經不知不覺注入了一段不可視的「空白」",url:"insert-zero-width-characters",createdDate:"2018-04-06T23:00+08:00"}},{node:{title:"知乎無限 live 數據流網站",url:"zhihu-unlimited-lives-website",createdDate:"2018-03-28T20:49+08:00"}},{node:{title:"Gatsbyjs async/await 更新報錯解決方法",url:"gatsybjs-async-await-upgrade-bug-solution",createdDate:"2018-03-21T20:00+08:00"}}]},pagePosts:{edges:[{node:{title:"Gitalk Error: Validation Failed. 442 報錯解決方法",createdDate:"2018-03-10T21:00+08:00",url:"gitalk-error-validation-failed-442-solution",headerImgur:null,content:"## 前言\n\n最近忙著大學的事情，少了時間寫博客文章。可是沒想到在過去那一篇文章發佈之後，就遇到 Gitalk 評論區出現 `Error: Validation Failed.` 這樣的問題，在 Github 上面和網友討論之後，想出了一個解決方法，希望可以拋磚引玉。\n\n## 問題\n\n![](https://i.imgur.com/G3fhUVV.jpg)\n\nGithub 更新了關於 Issue 字數的限制，利用 location.pathname 的話創建 Issue 的 Tag 的話，很容易超過 50 字。\n\n## 方法\n這是原本的配置，也是 Github Repo 上面的入門方法。\n```\nconst gitalk = new Gitalk({\n  clientID: 'Github Application Client ID',\n  clientSecret: 'Github Application Client Secret',\n  repo: 'Github repo',\n  owner: 'Github repo owner',\n  admin: ['Github repo owner and collaborators, only these guys can initialize github issues'],\n  id: location.pathname,      // Ensure uniqueness and length less than 50\n  distractionFreeMode: false  // Facebook-like distraction free mode\n});\n```\n\n### 解決思路\n如果直接修改 id 的賦值的話，那麼當 Gitalk 尋找以前的標籤的時候，便會出現找不到 Issue，自動創建一個新討論區的問題。。。\n\n這很明顯不是我們需要的設計，我們是想要繼續運用那一個 Issue。\n\n於是我便想了一下最近的 Issue 和以前的 Issue 的區別，其中一個就是時間的分別。\n\n因為我遇到這個問題是 2018年 3月，所以用這個時間分開 id 的賦值就好了，比如把標題 (title) 設置成 id：\n```\nconst issueDate = '2018-03-01';\n\nif (moment(createdDate).isAfter(issueDate)) {\n  id = title;\n}\n```\n\n這樣的話，其實就可以了。但如果文章的標題很長的話，那又會超出 50字的限制。。。那麼用 md5 把字數縮短一下就好了。它既帶有唯一的特性，也可以限制字數。\n\n首先安裝 md5 工具: `npm install md5`\n然後在你寫入 Gitalk 評論區的地方寫入以下代碼：\n\n```\nimport md5 from 'md5';\n\nid = md5(title);\n```\n\n如果你是使用 React 或者想要觀看代碼更改的話，那麼你可以查看我的 Commit Log： https://github.com/calpa/blog/commit/88c83f66b070655e645581783097f019e6539c0e#diff-b334c7299860c69226f3d8a8f4a36c1f\n\n如果你覺得實用的話，不妨 Star 一下以獲得之後的最新更新。\n\n## 相關鏈接\n1. [md5](https://www.npmjs.com/package/md5)\n2. [gitalk/gitalk](https://github.com/gitalk/gitalk)",tags:"Github, Gitalk, JavaScript"}},{node:{title:"美化 console.log 輸出",createdDate:"2018-03-04T20:00+08:00",url:"console-log-colorful-output",headerImgur:null,content:"## 前言\nconsole.log() 這一個方法可以說是前端工程師最常用的調試方法之一。當我在研究音樂播放器 Aplayer 源碼的時候，發現其中有一行有趣的代碼，可以在 console 裏面輸出自帶顏色的圖案，故在此記錄一下。\n\n## 方法\n簡單來說就是插入 `%c` 這一個替換符，之後的句子便會加上相對應的樣式。\n\n```javascript\nconsole.log(`${'\\n'} %c CALPA %c https://calpa.me ${'\\n'}${'\\n'}`, 'color: #6cf; background: #030307; padding:5px 0;', 'background: #6cf; padding:5px 0;');\n```\n然後你打開 console 便會看到這個結果：\n![Colorful Logger](https://i.imgur.com/VoxnwAJ.jpg)\n\n另外一個例子：\n\n```javascript\nconsole.log(\"This is %cMy stylish message\", \"color: yellow; font-style: italic; background-color: blue;padding: 2px\");\n```\n\n![Imgur](https://i.imgur.com/cAOYrrn.jpg)\n\n## 備註\n以上代碼已注入到博客系統中，有興趣查閱代碼的同學可以查看[源碼部分](https://github.com/calpa/blog/blob/master/gatsby-browser.js)。\n\n## 參考資料\n1. [Console - MDN](https://developer.mozilla.org/en-US/docs/Web/API/console)\n2. [MoePlayer / APlayer](https://github.com/MoePlayer/APlayer/blob/master/src/js/index.js)",tags:"console, google chrome, JavaScript"}},{node:{title:"博客域名續期",createdDate:"2018-02-13T20:00+08:00",url:"using-namecheap-renew-domain-name-2018",headerImgur:"https://i.imgur.com/hq8zQDS.png",content:"## 前言\n在域名過期之前的大約一個月，Namecheap 這一家域名公司就已經提醒我要續期了。現在我的域名是使用 Namecheap 這一家公司，無論是收費還是服務，都是不錯的。如無意外的話，我應該會繼續用這一家公司，避免搬運域名的麻煩工序。\n\n## 步驟\n域名續期其實蠻簡單的：進入電子郵件裡面的鏈接，點擊 Renew 的按鈕，輸入信用卡的資料就可以了。\n\n![Imgur](https://i.imgur.com/tOcrvye.png)\n\n![Imgur](https://i.imgur.com/5mrCraQ.png)\n\n## 查詢域名資料\n\n如果你用 Domain Name Lookup 服務的話，例如[CQ Counter](http://cqcounter.com/whois/?query=calpa.me) 提供的免費 Whois查詢，就可以知道那個域名的資料。\n\n這裡簡單說一下：\nCreation Date: 2017-02-22T14:53:23Z\nRegistry Expiry Date: 2019-02-22T14:53:23Z\n\nCreation Date 是域名創建日期，這裡是說本博客在 2017年2月22日的時候正式有了自己的域名。\n\nRegistry Expiry Date 是域名過期日期，這裡是說本博客將於 2019年2月22日過期，也就是說已經 +1 year了。\n\n## 備註\n\n最近有點熬夜，身體不太舒服。。。看來還是要養成早睡早起的習慣才行 TAT\n",tags:"Domain"}},{node:{title:"又到了年度總結的季節 ﹣ 我的 2017 前端開發回顧",createdDate:"2017-12-31T20:00+08:00",url:"personal-review-2017",headerImgur:"https://i.imgur.com/zl3qb7T.jpg",content:"## 前言\n\n從最初的失望與後悔，到最後的興奮與感動，2017年可以算是充滿挑戰與機遇的一年。雖然我依然是一個非科班學生，但是這沒有阻止我轉行成為前端工程師，反而成為向前邁進的動力之一。如果沒有這些經歷，我也不會發現自己對於編程的那份熱愛。。。在此，就讓我回顧一下這一年在自學編程轉行的經歷吧。在開始這篇文章之前，我先戴上頭盔，以防意外。\n\n## 學習 JavaScript\n\nJavaScript 可以說是前端工程師必須學習的語言之一。\n\n一開始的時候，我是跟著知乎上面的一些學習方法，並整理為 [打好 JavaScript 基礎的6個步驟](/2017/05/21/learn-javascript-in-six-steps/)。我抱著好奇心的心態在 Facebook 的台灣前端社區裡面發文，沒想到的是，這篇文章吸引了很多讀者，讓我堅定了自己學習的路線。\n\n## 我的博客\n![Imgur](https://i.imgur.com/cmJLkkV.png)\n\n這個博客是 2017年 1月 時創建的。當時是 Hexo + Github Pages 的靜態構建博客系統來完成，它的概念是很不錯的，把網站的主題和文章分開，要修改主題的時候就直接修改源代碼就行，不會影響到文章。但是還是有一個問題，就是文章需要放置在當前目錄裡面，也就是說沒有做到異地修改文章的功能。\n\n![最初的樣子](https://i.imgur.com/AKVHvQy.png)\n\n網上有一些配置，比如說 Hexo-Admin，我也是有修改一番，但是改著改著，越來越多功能想要添加。\n\n因此我就開始查找其他的解決方法，最初我是沒有用 GatsbyJS 的，因為它使用的 GraphQL 蠻難去學習的。。。\n\n過了一陣子，[React 官網](Reactjs.org) 使用 GatsbyJS，讓我也很好奇到底為什麼會使用它。\n\n博客初版\n\n![Imgur](https://i.imgur.com/gGLl6P4.png)\n\n相關文章：\n\n1. [為什麼要寫技術博客？](https://calpa.me/2017/05/30/why-i-write-blog-post/)\n1. [【圖多】《遠征成功﹣﹣一個香港人北上杭州豬場的前端面試之路》](/2017/09/30/hang-zhou-interview-summary/)\n1. [2017 年香港開源年會後記](/2017/06/14/hong-kong-open-sources-conference-remarks/)\n\n## 前端框架\n\n不管黑貓白貓，能抓到老鼠的就是好貓。這裡就先簡單說說我對他們的感覺吧。\n\n一開始學習前端開發的時候，我是利用 Angular 去開發小型項目的。在那個戰火紛飛的時代（雖然現在也是），Angular 給我一種大教堂的感覺，可以在裡面找到我所需要的東西，不需要自己去配置那麼多。可能是當時對於 node.js 和 npm 不太了解，所以經常會遇到各種`package 找不到的問題`。\n\n在利用 React 開發網站的時候，感覺 React 很簡單，純潔，給我一種菜市場的感覺。我可以根據需求，去市場自己挑貨。如果看過那些工具上的源代碼，都不喜歡的話，自己寫一個也是可以的。當我在挑貨的時候，便會需要考慮到各方面的因素，比如說是否繼續有人維護，Github 上面的 Stars 數目，npm 每個月下載量等等。\n\n暑假的時候，我到了深圳實習，寫 Vue.js。它確實一個不錯的框架，對於初學者也是非常的友善。\n\n在使用過這些框架之後，我覺得其實框架只是一個輔助的工具，好好地寫代碼才是重點。對於那些選擇困難癥的患者，更加是應該碼上起行。\n\n### 前端工具\n\n在開發網站的過程中，也是對於一些前端的常見工具有了一點的了解。比如說 Webpack, Babel, ESLint。這些也算是標配吧。\n\n相關文章：\n\n- [前端性能優化必備工具清單](https://calpa.me/2017/06/19/front-end-performance-check-list/)\n\n### UI\n\n一開始的話，我是用 Bootstrap 3 來構建一個很普通的網站。詳見 HackJam，當時是直接寫進去 HTML的。也沒有用什麼框架幫忙。\n\n![HackJam 2016](https://i.imgur.com/38Lsoxs.png)\n\n現在開發的時候，如果可以配置 SCSS 預處理器，我會盡量以 SCSS 代替純 CSS 來寫樣式，因為它可以簡單處理 CSS 比重問題，以及提高代碼複用性。\n\n## 黑客松\n\n我曾經參加八次黑客松，並在微軟舉辦的 ImagineHack 中取得第二名，最受歡迎獎，並在 TechCrunch 2017 黑客松深圳站取得第三名。\n\n作為一個科大學生，參加科大舉辦的比賽也是很正常的吧，賽後寫了 [HackUST 2017 回顧](/2017/04/23/hackUST-2017-hackathon-summary/)。\n\nImagineHack 比賽時，我是沒有期待自己會獲勝的，畢竟自己初出茅廬，而且那個時候掌握的技能非常有限。這次比賽讓我發現原來參加黑客松是那麼的有趣。\n\n而 TechCrunch 黑客松，則是讓我開啟了前往中國之路。也是之後我到深圳南山工作的伏筆吧。\n\n相關文章：\n[參加八次黑客馬拉松的個人體會與總結](/2017/11/06/hackathon-summary/)\n\n### 印象最深刻的事\n1. 兼容不同的瀏覽器，例如 IE。\n\n一些非常好用的屬性是不能用的，因為舊版本的 IE 沒有支持這些屬性。\n\n[box-shadow](https://caniuse.com/#search=box-shadow): IE 9\n\n[flex](https://caniuse.com/#search=flex): IE 10, 11 (Partially Supported)\n\n更多的兼容性要求可以在 [Can I use ? 網站](https://caniuse.com/) 裡面查詢。\n\n2. 為什麼 Caps Lock 和 Control 互換了？\n\n![Imgur](https://i.imgur.com/9lIiA7A.png)\n\n### 學習時遇到的趣事\n\nThe Nature of Code 教如何利用 p5.js 模擬一些大自然的生命變化。這個時候，我發現原來用 Mac 寫代碼是可以那麼有趣的。\n\n互聯網上有非常多的教學，免費教人學習編程。例如 MIT, Harvard，它們將課程的影片, 素材以及功課上傳，並且可以互相交流。\n\n## 展望 2018年\n\n1. 用心把 SICP 看完，做完。\n1. 繼續學習 (CI/CD)\n1. Node.js\n1. 做一個全棧的項目\n1. 研究研究白色相簿2\n\n## 延伸文章 (2018年)\n\n- 前端框架\n- 前端工具\n- 在線學習課堂\n- [White Album Font Generator](https://codepen.io/calpa/pen/WdjgzM)\n\n## 參考資料\n- [StatCounter Global Stats](http://gs.statcounter.com/)",tags:"前端, 回顧, 2017"}},{node:{title:"Node-prune﹣﹣專門移除 node_modules 不必要檔案的輕量工具",createdDate:"2017-11-26T18:00+08:00",url:"node-prune-remove-unnecessary-files-from-node-modules",headerImgur:"Cpqs4sf.jpg",content:'## 前言\n\n如果你有試過打包整個 Node 項目到服務器上，那麼你發現自己的項目體積比較大，其中一個原因是 `node_modules` 文件夾包含很多不必要的檔案。在使用 npm 安裝不同插件時，往往會包含很多不必要的文件夾，例如`example`, `doc`。要麼我們就是手動刪除它們，要麼我們就是自己寫一個自動腳本。而開發 Koa、Co、Express 的 TJ 大神則提供了一個簡單輕巧的工具。我們可以學習一下他的思路，以及使用這個工具。\n\n## 簡述\n\nnode-prune 移除所有 `node_modules` 內的不必要的檔案，例如 markdown, typescript 源碼。具體的移除內容可以看下方的[移除檔案分析][1]。\n\nGithub: [tj/node-prune](https://github.com/tj/node-prune)\n\n![node_modules][2]\n\n安裝方法：\n```shell\n$ go get github.com/tj/node-prune/cmd/node-prune\n```\n\n## 使用方法\n你可以直接在項目的文件夾裡使用：\n```\n$ node-prune\n\nfiles total 27,330\nfiles removed 3,990\nsize removed 13 MB\n   duration 200ms\n```\n\n或者你可以在其他文件夾裡面用，例如 `node_modules`\n```\n$ node-prune path/to/node_modules\n\nfiles total 27,330\nfiles removed 3,990\nsize removed 13 MB\n   duration 200ms\n```\n\n## 移除檔案分析\n\n### 移除的檔案\n#### 自動化\n這些文件你都會只用一次，無需一同打包上生產環境。\n```\n"Makefile"\n"Gulpfile.js" // Gulp 任務自動管理工具文件\n"Gruntfile.js" // Grunt 任務自動管理工具文件\n```\n\n#### 與寫代碼時相關的\n無論你寫代碼所需要的檔案，還是那些編輯器自動產生的檔案，都不是必須的。\n```\n".DS_Store" // Mac OS X 下的隱藏文件，用於儲存目錄的自定義屬性\n".tern-project" // Tern server 所需文件\n".gitattributes" // Git 屬性文件\n".editorconfig" // 統一代碼格式的文件\n".eslintrc" // 用於統一 Eslint 代碼風格 (JSON)\n".eslintrc.js" // 用於統一 Eslint 代碼風格 (JavaScript)\n".eslintignore" // 告訴 Eslint 忽略特定文件和目錄\n".npmignore" // 告訴 NPM 忽略特定文件和目錄\n".jshintrc" // 用於配置 JSHint\n".flowconfig" // 用於配置 Facebook 出品的 Flow-typed\n".documentup.json"\n".yarn-metadata.json"\n```\n#### 自動化構建\n```\n".travis.yml" // 用於配置 Travis 自動化測試，部署\n"appveyor.yml" // 用於配置 AppVeyor 自動化測試，部署\n"circle.yml" // 用於配置 Circle 自動化測試，部署\n".coveralls.yml" // Coverall\n```\n\n#### 給人類看的\n這是最小化項目的其中一個步驟，畢竟你上傳的東西和項目開發的文件夾是不同的。\n```\n"CHANGES" // 用於記錄項目改動\n"LICENSE.txt" // 開源協議\n"LICENSE" // 同上\n"AUTHORS" // 作者\n"CONTRIBUTORS" // 貢獻者\n```\n\n#### Yarn 相關\n```\n".yarn-integrity" // Yarn 文件\n".yarnclean", // Yarn 文件\n```\n### 移除的檔案（副檔名）\n如果檔案有以下副檔名的話，也會一同刪除。\n\n```\n".md", // Markdown 檔案\n".ts", // TypeScript 源碼\n".jst", // Javascript Templates (JST)\n".coffee", // CoffeeScript\n".tgz", // tgz 壓縮檔案\n".swp", // vi 產生檔案\n```\n\n### 移除的目錄\n\n測試用："\\__tests\\__","test","tests","powered-test"\n\n文件類："docs","doc"\n\n隱藏文件夾：".idea",".vscode"\n\nDemo 類："website","images","assets","example","examples"\n\n自動化工具類："coverage",".nyc_output",".circleci"\n\nGithub用： ".github"\n\n## 感想\n\n我們可以按照這個思路，自己寫一個基於 Node.js 的腳本。另外，在 Github 上面，有人寫了一個等同 Node-prune 的 Shell 腳本。\n\n```\n#!/usr/bin/env bash\nfind node_modules \\( -name \'__tests__\' -o \\\n-name \'test\' -o \\\n-name \'tests\' -o \\\n-name \'powered-test\' -o \\\n-name \'docs\' -o \\\n-name \'doc\' -o \\\n-name \'.idea\' -o \\\n-name \'.vscode\' -o \\\n-name \'website\' -o \\\n-name \'images\' -o \\\n-name \'assets\' -o \\\n-name \'example\' -o \\\n-name \'examples\' -o \\\n-name \'coverage\'-o \\\n-name \'.nyc_output\' -o \\\n-name "*.md" -o \\\n-name "*.ts" -o \\\n-name "*.jst" -o \\\n-name "*.coffee" -o \\\n-name "*.tgz" \\) -exec rm -rf {} \\;\n```\n\n\n[1]: #移除檔案分析\n[2]: https://i.imgur.com/rpR4yVl.jpg',tags:"Node_modules, Serverless"}},{node:{title:"你可能不知道的 JavaScript 代碼規範",createdDate:"2017-11-08T20:00+08:00",url:"you-dont-know-javascript-eslint-config",headerImgur:"KMksHxZ.png",content:'## 前言\n\n良好的代碼規範，能夠提高代碼的可閱性，使得項目維護更友好。除了自己設定一個規範外，我們也可以借鑒一下現在流行的代碼規範，讓我們成長之後，再去看細節。\n\n![Code Quality: Good Code vs Bad Code](https://i.imgur.com/DPltr6s.png)\n\n## Airbnb\nAirbnb 是其中一個最流行的 JavaScript 代碼規範，它差不多包含所有 JavaScript 的角度。它也是我的個人項目所使用的代碼規範。如果你的項目是基於 React 的，那麼你可以選擇安裝 [eslint-config-airbnb][1]，或者你可以選擇最基本的 [eslint-config-airbnb-base][2]。\n\n[eslint-config-airbnb][1] 包含 ECMAScript 6 + 以及 React 的 ESLint 代碼規範。在安裝 `eslint-config-airbnb` 的時候，它會一同安裝 `eslint`, `eslint-plugin-import`, `eslint-plugin-react`, and `eslint-plugin-jsx-a11y`。如果你的項目不是 React 的話，那麼你可以選擇`eslint-config-airbnb-base`。\n\n```\nnpm install eslint-config-airbnb\n```\n\n[eslint-config-airbnb-base][2] 包含ECMAScript 6 + 的 ESLint 代碼規範。安裝它的時候，它會需要 `eslint` 和 `eslint-plugin-import`。\n\n```\nnpm install eslint-config-airbnb-base\n```\n\n然後在你的 `.eslintrc` 加入 `"extends": "airbnb-base"` 就可以了。\n\nAirbnb 的完整代碼規範可以在 [airbnb/javascript][3] 上閱讀。\n\n## Standard\n除了 Airbnb 的代碼規範之外，有很多高科技公司在用 Standard 的代碼規範，包括但不限於 NPM, Github, mongoDB, ZenDesk。\n\n![Companies that use Standard][4]\n\n這裡是官網提到的一些 Standard 規範：\n\n- 兩個空白 － 當作縮排\n- 字串用單引號 － 除非要避免跳脫字元\n- 沒有不必要的變數\n- 不要加分號\n- 絕對不要用 ( 、 [ 當開頭\n- 這是不用分號 唯一 可能遇到的問題 － 那就自動幫你檢查吧！\n- 關鍵字後加空白 if (condition) { ... }\n- 函數名稱後加空白 function name (arg) { ... }\n- 統一用 === 取代 == － 但是 obj == null 可以用來檢查 null || undefined。\n- 一定要例外處理 node.js 中的 err 參數\n- 一定要對瀏覽器中的全域變數加上 window 前綴 － 除了 document 和 navigator 可以不用\n- 避免使用那些命名得很爛的全域變數，像是 open 、 length 、 event 和 name。\n\n你可以透過 `eslint-config-standard` 來自動校對，改善你的代碼。\n\n``` shell\nnpm install eslint-config-standard\n```\n\n[Standard 繁體中文文檔][5]\n[Standard 簡體中文文檔][6]\n## Idiomatic\n\n它的思想是無論誰改進項目的代碼，都應該像只有一個人寫代碼。\n\n你可以透過 eslint-config-idiomatic 來自動校對，改善你的代碼。\n\n```\nnpm install eslint-config-idiomatic\n```\n\n[Idiomatic - Github][7]\n\n\n備註：\n\nuse version ^3.0.0 for ESLint version ^3.x.x.\nuse version ^2.0.0 for ESLint version ^2.x.x.\nuse version ^1.0.0 for ESLint version ^1.x.x.\n\n在你的 .eslintrc 內輸入：\n```\n{\n  "extends": "idiomatic"\n}\n```\n\n\n## Google\n你都可以像 Google 工程師一樣編寫同樣風格的代碼。\n\n你可以透過 eslint-config-google 來自動校對，改善你的代碼。\n\n```\nnpm install eslint eslint-config-google\n```\n\n我們可以在 [Google - GitHub Pages][8] 上閱讀它的代碼規範。\n\n## jQuery\n如果你想要幫助 jQuery 改善它的代碼的話，你可以在 [jQuery 的官網][9] 上閱讀它的代碼規範。\n\n## 總結\n\n自從看了《Clean Code》一書之後，我感覺寫代碼不只是一種手藝，還是藝術。可能你看過去感覺都是 JavaScript，但是讀著讀著一些開源項目，就會感受到代碼可以有多麼優雅，同時可以有多麼不雅。。。為了減少他人說 WTF 的機會，我們還是研究一下如何把自己的代碼變得更加優雅吧。\n\n如果你是第一次使用 JavaScript 代碼規範的話，那麼你可以選擇 Airbnb 作為你的代碼規範。Airbnb 的文檔可閱性是不錯的，而且把現有項目加上 eslint 也不是什麼難事。\n\n如果要仔細地說代碼規範的好處，重要性的話，我們可以在下一篇文章討論。\n\n## 參考資料\n1. [Clean Code 電子書](http://www.cbs.dtu.dk/courses/27610/clean_code_index.html)\n1. [5 JavaScript Style Guides — Including AirBnB, GitHub, & Google](https://codeburst.io/5-javascript-style-guides-including-airbnb-github-google-88cbc6b2b7aa)\n\n\n[1]: https://www.npmjs.com/package/eslint-config-airbnb\n[2]: https://www.npmjs.com/package/eslint-config-airbnb-base\n[3]: https://github.com/airbnb/javascript\n[4]: https://i.imgur.com/fw8cwny.jpg\n[5]: https://github.com/standard/standard/blob/master/docs/README-zhtw.md\n[6]: https://github.com/standard/standard/blob/master/docs/README-zhcn.md\n[7]: https://github.com/rwaldron/idiomatic.js/\n[8]: https://google.github.io/styleguide/jsguide.html\n[9]: https://contribute.jquery.org/style-guide/js/',tags:"JavaScript, eslint"}}]}},pathContext:{limit:6,skip:6}}}});
//# sourceMappingURL=path---page-1-5414137bf2b31a7779fb.js.map