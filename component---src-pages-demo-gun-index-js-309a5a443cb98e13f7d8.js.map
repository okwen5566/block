{"version":3,"sources":["webpack:///component---src-pages-demo-gun-index-js-309a5a443cb98e13f7d8.js","webpack:///./~/gun/gun.js","webpack:///./~/immutable/dist/immutable.js","webpack:///./src/components/Analytics/Clap/index.js","webpack:///./src/components/Analytics/index.js","webpack:///./src/components/NameForm/index.js","webpack:///./src/pages/demo/gun/index.js"],"names":["webpackJsonp","960","module","exports","__webpack_require__","global","require","arg","resolve","path","split","slice","toString","replace","mod","root","window","console","log","common","Type","fns","fn","is","bi","b","Boolean","num","n","list_is","parseFloat","Infinity","text","t","ify","JSON","stringify","random","l","c","s","charAt","Math","floor","length","match","o","fuzzy","f","i","indexOf","r","=","obj","has","toLowerCase","list","map","m","Array","slit","prototype","sort","k","A","B","_","obj_map","index","Object","constructor","call","put","v","hasOwnProperty","del","as","u","obj_is","parse","e","obj_has","this","to","from","copy","empty","arguments","push","keys","x","ll","lle","fn_is","ii","time","Date","getTime","onto","tag","next","Function","be","off","the","last","back","on","HAM","machineState","incomingState","currentState","incomingValue","currentValue","defer","historical","converge","incoming","Lexical","state","current","err","Error","Val","text_is","bi_is","num_is","rel","id","rel_","obj_put","Node","soul","soul_","text_random","cb","tmp","node","obj_del","State","perf","start","now","N","drift","D","performance","timing","navigationStart","N_","obj_as","val","obj_copy","opt","Graph","nf","g","obj_empty","env","at","seen","graph","valid","concat","prev","invalid","join","arr","clearTimeout","setTimeout","lack","Dup","dup","max","age","check","track","time_is","Gun","gun","create","version","chain","toJSON","ask","field","value","msg","ev","text_rand","obj_to","get","once","verify","key","ctx","vertex","was","known","machine","diff","merge","cat","ack","each","@","_soul","_field","peers","url","uuid","debug","apply","w","yes","output",".","input","coat","change","echo","not","relate","node_","event","reverb","data","via","proxy","#","cache","use","out","$","stun","batch","noop","res","no","ref","iife","any","ok","wait","eas","act","subs","bind","async","n_","fields","MAPOF","set","item","store","localStorage","setItem","removeItem","getItem","file","prefix","acks","count","disk","flush","lex","how","websocket","WebSocket","webkitWebSocket","mozWebSocket","send","peer","wire","open","readyState","OPEN","queue","receive","ws","who","onclose","reconnect","onerror","error","code","onopen","onmessage","drain","970","factory","createClass","ctor","superClass","Iterable","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","SetRef","OwnerID","arrCopy","offset","len","newArr","ensureSize","iter","undefined","size","__iterate","returnTrue","wrapIndex","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","iteratorValue","type","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","object","_object","_keys","IterableSeq","_iterable","IteratorSeq","iterator","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","isArray","TypeError","maybeIndexedSeqFromValue","seqIterate","reverse","useKeys","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","parentJSON","isPlainObj","toList","toMap","valueA","valueB","valueOf","equals","deepEqual","a","__hash","notAssociative","entries","every","flipped","cacheResult","allEqual","bSize","NOT_SET","Repeat","times","_value","EMPTY_REPEAT","invariant","condition","Range","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","isExtensible","defineProperty","enumerable","configurable","writable","nodeType","uniqueID","documentElement","assertNotInfinite","Map","emptyMap","isMap","withMutations","forEach","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","__prev","makeMap","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","emptyList","isList","makeList","VNode","toArray","setSize","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","left","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","neg","quoteString","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","Symbol","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","searchValue","lastIndexOf","other","possibleIndex","offsetValue","d","WeakMap","keyValues","updateIn","deleteIn","updatedValue","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","returnValue","find","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","found","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","contains","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith","Immutable","613","_interopRequireDefault","__esModule","default","_react","_react2","Clap","_ref","title","countTotal","createElement","className","1205","614","_Clap","_Clap2","Analytics","clap","624","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","NameForm","_Component","props","_this","handleChange","setState","target","handleSubmit","preventDefault","render","_this2","onSubmit","onChange","Component","640","_extends2","_extends3","_immutable","_api","_Analytics","_Analytics2","_NameForm","_NameForm2","isBrowser","getData","GunPage","componentDidMount","post","prevState","_state"],"mappings":"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","file":"component---src-pages-demo-gun-index-js-309a5a443cb98e13f7d8.js","sourcesContent":["webpackJsonp([77883786134883],{\n\n/***/ 960:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, module) {;(function(){\r\n\t\r\n\t\t/* UNBUILD */\r\n\t\tvar root;\r\n\t\tif(typeof window !== \"undefined\"){ root = window }\r\n\t\tif(typeof global !== \"undefined\"){ root = global }\r\n\t\troot = root || {};\r\n\t\tvar console = root.console || {log: function(){}};\r\n\t\tfunction require(arg){\r\n\t\t\treturn arg.slice? require[resolve(arg)] : function(mod, path){\r\n\t\t\t\targ(mod = {exports: {}});\r\n\t\t\t\trequire[resolve(path)] = mod.exports;\r\n\t\t\t}\r\n\t\t\tfunction resolve(path){\r\n\t\t\t\treturn path.split('/').slice(-1).toString().replace('.js','');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(true){ var common = module }\r\n\t\t/* UNBUILD */\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\t// Generic javascript utilities.\r\n\t\t\tvar Type = {};\r\n\t\t\t//Type.fns = Type.fn = {is: function(fn){ return (!!fn && fn instanceof Function) }}\r\n\t\t\tType.fns = Type.fn = {is: function(fn){ return (!!fn && 'function' == typeof fn) }}\r\n\t\t\tType.bi = {is: function(b){ return (b instanceof Boolean || typeof b == 'boolean') }}\r\n\t\t\tType.num = {is: function(n){ return !list_is(n) && ((n - parseFloat(n) + 1) >= 0 || Infinity === n || -Infinity === n) }}\r\n\t\t\tType.text = {is: function(t){ return (typeof t == 'string') }}\r\n\t\t\tType.text.ify = function(t){\r\n\t\t\t\tif(Type.text.is(t)){ return t }\r\n\t\t\t\tif(typeof JSON !== \"undefined\"){ return JSON.stringify(t) }\r\n\t\t\t\treturn (t && t.toString)? t.toString() : t;\r\n\t\t\t}\r\n\t\t\tType.text.random = function(l, c){\r\n\t\t\t\tvar s = '';\r\n\t\t\t\tl = l || 24; // you are not going to make a 0 length random number, so no need to check type\r\n\t\t\t\tc = c || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXZabcdefghijklmnopqrstuvwxyz';\r\n\t\t\t\twhile(l > 0){ s += c.charAt(Math.floor(Math.random() * c.length)); l-- }\r\n\t\t\t\treturn s;\r\n\t\t\t}\r\n\t\t\tType.text.match = function(t, o){ var r = false;\r\n\t\t\t\tt = t || '';\r\n\t\t\t\to = Type.text.is(o)? {'=': o} : o || {}; // {'~', '=', '*', '<', '>', '+', '-', '?', '!'} // ignore case, exactly equal, anything after, lexically larger, lexically lesser, added in, subtacted from, questionable fuzzy match, and ends with.\r\n\t\t\t\tif(Type.obj.has(o,'~')){ t = t.toLowerCase(); o['='] = (o['='] || o['~']).toLowerCase() }\r\n\t\t\t\tif(Type.obj.has(o,'=')){ return t === o['='] }\r\n\t\t\t\tif(Type.obj.has(o,'*')){ if(t.slice(0, o['*'].length) === o['*']){ r = true; t = t.slice(o['*'].length) } else { return false }}\r\n\t\t\t\tif(Type.obj.has(o,'!')){ if(t.slice(-o['!'].length) === o['!']){ r = true } else { return false }}\r\n\t\t\t\tif(Type.obj.has(o,'+')){\r\n\t\t\t\t\tif(Type.list.map(Type.list.is(o['+'])? o['+'] : [o['+']], function(m){\r\n\t\t\t\t\t\tif(t.indexOf(m) >= 0){ r = true } else { return true }\r\n\t\t\t\t\t})){ return false }\r\n\t\t\t\t}\r\n\t\t\t\tif(Type.obj.has(o,'-')){\r\n\t\t\t\t\tif(Type.list.map(Type.list.is(o['-'])? o['-'] : [o['-']], function(m){\r\n\t\t\t\t\t\tif(t.indexOf(m) < 0){ r = true } else { return true }\r\n\t\t\t\t\t})){ return false }\r\n\t\t\t\t}\r\n\t\t\t\tif(Type.obj.has(o,'>')){ if(t > o['>']){ r = true } else { return false }}\r\n\t\t\t\tif(Type.obj.has(o,'<')){ if(t < o['<']){ r = true } else { return false }}\r\n\t\t\t\tfunction fuzzy(t,f){ var n = -1, i = 0, c; for(;c = f[i++];){ if(!~(n = t.indexOf(c, n+1))){ return false }} return true } // via http://stackoverflow.com/questions/9206013/javascript-fuzzy-search\r\n\t\t\t\tif(Type.obj.has(o,'?')){ if(fuzzy(t, o['?'])){ r = true } else { return false }} // change name!\r\n\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t\tType.list = {is: function(l){ return (l instanceof Array) }}\r\n\t\t\tType.list.slit = Array.prototype.slice;\r\n\t\t\tType.list.sort = function(k){ // creates a new sort function based off some field\r\n\t\t\t\treturn function(A,B){\r\n\t\t\t\t\tif(!A || !B){ return 0 } A = A[k]; B = B[k];\r\n\t\t\t\t\tif(A < B){ return -1 }else if(A > B){ return 1 }\r\n\t\t\t\t\telse { return 0 }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tType.list.map = function(l, c, _){ return obj_map(l, c, _) }\r\n\t\t\tType.list.index = 1; // change this to 0 if you want non-logical, non-mathematical, non-matrix, non-convenient array notation\r\n\t\t\tType.obj = {is: function(o){ return o? (o instanceof Object && o.constructor === Object) || Object.prototype.toString.call(o).match(/^\\[object (\\w+)\\]$/)[1] === 'Object' : false }}\r\n\t\t\tType.obj.put = function(o, f, v){ return (o||{})[f] = v, o }\r\n\t\t\tType.obj.has = function(o, f){ return o && Object.prototype.hasOwnProperty.call(o, f) }\r\n\t\t\tType.obj.del = function(o, k){\r\n\t\t\t\tif(!o){ return }\r\n\t\t\t\to[k] = null;\r\n\t\t\t\tdelete o[k];\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t\tType.obj.as = function(o, f, v, u){ return o[f] = o[f] || (u === v? {} : v) }\r\n\t\t\tType.obj.ify = function(o){\r\n\t\t\t\tif(obj_is(o)){ return o }\r\n\t\t\t\ttry{o = JSON.parse(o);\r\n\t\t\t\t}catch(e){o={}};\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t\t;(function(){ var u;\r\n\t\t\t\tfunction map(v,f){\r\n\t\t\t\t\tif(obj_has(this,f) && u !== this[f]){ return }\r\n\t\t\t\t\tthis[f] = v;\r\n\t\t\t\t}\r\n\t\t\t\tType.obj.to = function(from, to){\r\n\t\t\t\t\tto = to || {};\r\n\t\t\t\t\tobj_map(from, map, to);\r\n\t\t\t\t\treturn to;\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tType.obj.copy = function(o){ // because http://web.archive.org/web/20140328224025/http://jsperf.com/cloning-an-object/2\r\n\t\t\t\treturn !o? o : JSON.parse(JSON.stringify(o)); // is shockingly faster than anything else, and our data has to be a subset of JSON anyways!\r\n\t\t\t}\r\n\t\t\t;(function(){\r\n\t\t\t\tfunction empty(v,i){ var n = this.n;\r\n\t\t\t\t\tif(n && (i === n || (obj_is(n) && obj_has(n, i)))){ return }\r\n\t\t\t\t\tif(i){ return true }\r\n\t\t\t\t}\r\n\t\t\t\tType.obj.empty = function(o, n){\r\n\t\t\t\t\tif(!o){ return true }\r\n\t\t\t\t\treturn obj_map(o,empty,{n:n})? false : true;\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\t;(function(){\r\n\t\t\t\tfunction t(k,v){\r\n\t\t\t\t\tif(2 === arguments.length){\r\n\t\t\t\t\t\tt.r = t.r || {};\r\n\t\t\t\t\t\tt.r[k] = v;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} t.r = t.r || [];\r\n\t\t\t\t\tt.r.push(k);\r\n\t\t\t\t};\r\n\t\t\t\tvar keys = Object.keys;\r\n\t\t\t\tType.obj.map = function(l, c, _){\r\n\t\t\t\t\tvar u, i = 0, x, r, ll, lle, f = fn_is(c);\r\n\t\t\t\t\tt.r = null;\r\n\t\t\t\t\tif(keys && obj_is(l)){\r\n\t\t\t\t\t\tll = keys(l); lle = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(list_is(l) || ll){\r\n\t\t\t\t\t\tx = (ll || l).length;\r\n\t\t\t\t\t\tfor(;i < x; i++){\r\n\t\t\t\t\t\t\tvar ii = (i + Type.list.index);\r\n\t\t\t\t\t\t\tif(f){\r\n\t\t\t\t\t\t\t\tr = lle? c.call(_ || this, l[ll[i]], ll[i], t) : c.call(_ || this, l[i], ii, t);\r\n\t\t\t\t\t\t\t\tif(r !== u){ return r }\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t//if(Type.test.is(c,l[i])){ return ii } // should implement deep equality testing!\r\n\t\t\t\t\t\t\t\tif(c === l[lle? ll[i] : i]){ return ll? ll[i] : ii } // use this for now\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor(i in l){\r\n\t\t\t\t\t\t\tif(f){\r\n\t\t\t\t\t\t\t\tif(obj_has(l,i)){\r\n\t\t\t\t\t\t\t\t\tr = _? c.call(_, l[i], i, t) : c(l[i], i, t);\r\n\t\t\t\t\t\t\t\t\tif(r !== u){ return r }\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t//if(a.test.is(c,l[i])){ return i } // should implement deep equality testing!\r\n\t\t\t\t\t\t\t\tif(c === l[i]){ return i } // use this for now\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn f? t.r : Type.list.index? 0 : -1;\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tType.time = {};\r\n\t\t\tType.time.is = function(t){ return t? t instanceof Date : (+new Date().getTime()) }\r\n\t\r\n\t\t\tvar fn_is = Type.fn.is;\r\n\t\t\tvar list_is = Type.list.is;\r\n\t\t\tvar obj = Type.obj, obj_is = obj.is, obj_has = obj.has, obj_map = obj.map;\r\n\t\t\tmodule.exports = Type;\r\n\t\t})(require, './type');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\t// On event emitter generic javascript utility.\r\n\t\t\tmodule.exports = function onto(tag, arg, as){\r\n\t\t\t\tif(!tag){ return {to: onto} }\r\n\t\t\t\tvar tag = (this.tag || (this.tag = {}))[tag] ||\r\n\t\t\t\t(this.tag[tag] = {tag: tag, to: onto._ = {\r\n\t\t\t\t\tnext: function(){}\r\n\t\t\t\t}});\r\n\t\t\t\tif(arg instanceof Function){\r\n\t\t\t\t\tvar be = {\r\n\t\t\t\t\t\toff: onto.off || \r\n\t\t\t\t\t\t(onto.off = function(){\r\n\t\t\t\t\t\t\tif(this.next === onto._.next){ return !0 }\r\n\t\t\t\t\t\t\tif(this === this.the.last){\r\n\t\t\t\t\t\t\t\tthis.the.last = this.back;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.to.back = this.back;\r\n\t\t\t\t\t\t\tthis.next = onto._.next;\r\n\t\t\t\t\t\t\tthis.back.to = this.to;\r\n\t\t\t\t\t\t\tif(this.the.last === this.the){\r\n\t\t\t\t\t\t\t\tdelete this.on.tag[this.the.tag];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tto: onto._,\r\n\t\t\t\t\t\tnext: arg,\r\n\t\t\t\t\t\tthe: tag,\r\n\t\t\t\t\t\ton: this,\r\n\t\t\t\t\t\tas: as,\r\n\t\t\t\t\t};\r\n\t\t\t\t\t(be.back = tag.last || tag).to = be;\r\n\t\t\t\t\treturn tag.last = be;\r\n\t\t\t\t}\r\n\t\t\t\t(tag = tag.to).next(arg);\r\n\t\t\t\treturn tag;\r\n\t\t\t};\r\n\t\t})(require, './onto');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\t/* Based on the Hypothetical Amnesia Machine thought experiment */\r\n\t\t\tfunction HAM(machineState, incomingState, currentState, incomingValue, currentValue){\r\n\t\t\t\tif(machineState < incomingState){\r\n\t\t\t\t\treturn {defer: true}; // the incoming value is outside the boundary of the machine's state, it must be reprocessed in another state.\r\n\t\t\t\t}\r\n\t\t\t\tif(incomingState < currentState){\r\n\t\t\t\t\treturn {historical: true}; // the incoming value is within the boundary of the machine's state, but not within the range.\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\tif(currentState < incomingState){\r\n\t\t\t\t\treturn {converge: true, incoming: true}; // the incoming value is within both the boundary and the range of the machine's state.\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\tif(incomingState === currentState){\r\n\t\t\t\t\tincomingValue = Lexical(incomingValue) || \"\";\r\n\t\t\t\t\tcurrentValue = Lexical(currentValue) || \"\";\r\n\t\t\t\t\tif(incomingValue === currentValue){ // Note: while these are practically the same, the deltas could be technically different\r\n\t\t\t\t\t\treturn {state: true};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tThe following is a naive implementation, but will always work.\r\n\t\t\t\t\t\tNever change it unless you have specific needs that absolutely require it.\r\n\t\t\t\t\t\tIf changed, your data will diverge unless you guarantee every peer's algorithm has also been changed to be the same.\r\n\t\t\t\t\t\tAs a result, it is highly discouraged to modify despite the fact that it is naive,\r\n\t\t\t\t\t\tbecause convergence (data integrity) is generally more important.\r\n\t\t\t\t\t\tAny difference in this algorithm must be given a new and different name.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif(incomingValue < currentValue){ // Lexical only works on simple value types!\r\n\t\t\t\t\t\treturn {converge: true, current: true};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(currentValue < incomingValue){ // Lexical only works on simple value types!\r\n\t\t\t\t\t\treturn {converge: true, incoming: true};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn {err: \"Invalid CRDT Data: \"+ incomingValue +\" to \"+ currentValue +\" at \"+ incomingState +\" to \"+ currentState +\"!\"};\r\n\t\t\t}\r\n\t\t\tif(typeof JSON === 'undefined'){\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t'JSON is not included in this browser. Please load it first: ' +\r\n\t\t\t\t\t'ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tvar Lexical = JSON.stringify, undefined;\r\n\t\t\tmodule.exports = HAM;\r\n\t\t})(require, './HAM');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Type = require('./type');\r\n\t\t\tvar Val = {};\r\n\t\t\tVal.is = function(v){ // Valid values are a subset of JSON: null, binary, number (!Infinity), text, or a soul relation. Arrays need special algorithms to handle concurrency, so they are not supported directly. Use an extension that supports them if needed but research their problems first.\r\n\t\t\t\tif(v === u){ return false }\r\n\t\t\t\tif(v === null){ return true } // \"deletes\", nulling out fields.\r\n\t\t\t\tif(v === Infinity){ return false } // we want this to be, but JSON does not support it, sad face.\r\n\t\t\t\tif(text_is(v) // by \"text\" we mean strings.\r\n\t\t\t\t|| bi_is(v) // by \"binary\" we mean boolean.\r\n\t\t\t\t|| num_is(v)){ // by \"number\" we mean integers or decimals. \r\n\t\t\t\t\treturn true; // simple values are valid.\r\n\t\t\t\t}\r\n\t\t\t\treturn Val.rel.is(v) || false; // is the value a soul relation? Then it is valid and return it. If not, everything else remaining is an invalid data type. Custom extensions can be built on top of these primitives to support other types.\r\n\t\t\t}\r\n\t\t\tVal.rel = {_: '#'};\r\n\t\t\t;(function(){\r\n\t\t\t\tVal.rel.is = function(v){ // this defines whether an object is a soul relation or not, they look like this: {'#': 'UUID'}\r\n\t\t\t\t\tif(v && v[rel_] && !v._ && obj_is(v)){ // must be an object.\r\n\t\t\t\t\t\tvar o = {};\r\n\t\t\t\t\t\tobj_map(v, map, o);\r\n\t\t\t\t\t\tif(o.id){ // a valid id was found.\r\n\t\t\t\t\t\t\treturn o.id; // yay! Return it.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false; // the value was not a valid soul relation.\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(s, f){ var o = this; // map over the object...\r\n\t\t\t\t\tif(o.id){ return o.id = false } // if ID is already defined AND we're still looping through the object, it is considered invalid.\r\n\t\t\t\t\tif(f == rel_ && text_is(s)){ // the field should be '#' and have a text value.\r\n\t\t\t\t\t\to.id = s; // we found the soul!\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn o.id = false; // if there exists anything else on the object that isn't the soul, then it is considered invalid.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tVal.rel.ify = function(t){ return obj_put({}, rel_, t) } // convert a soul into a relation and return it.\r\n\t\t\tvar rel_ = Val.rel._, u;\r\n\t\t\tvar bi_is = Type.bi.is;\r\n\t\t\tvar num_is = Type.num.is;\r\n\t\t\tvar text_is = Type.text.is;\r\n\t\t\tvar obj = Type.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;\r\n\t\t\tmodule.exports = Val;\r\n\t\t})(require, './val');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Type = require('./type');\r\n\t\t\tvar Val = require('./val');\r\n\t\t\tvar Node = {_: '_'};\r\n\t\t\tNode.soul = function(n, o){ return (n && n._ && n._[o || soul_]) } // convenience function to check to see if there is a soul on a node and return it.\r\n\t\t\tNode.soul.ify = function(n, o){ // put a soul on an object.\r\n\t\t\t\to = (typeof o === 'string')? {soul: o} : o || {};\r\n\t\t\t\tn = n || {}; // make sure it exists.\r\n\t\t\t\tn._ = n._ || {}; // make sure meta exists.\r\n\t\t\t\tn._[soul_] = o.soul || n._[soul_] || text_random(); // put the soul on it.\r\n\t\t\t\treturn n;\r\n\t\t\t}\r\n\t\t\tNode.soul._ = Val.rel._;\r\n\t\t\t;(function(){\r\n\t\t\t\tNode.is = function(n, cb, as){ var s; // checks to see if an object is a valid node.\r\n\t\t\t\t\tif(!obj_is(n)){ return false } // must be an object.\r\n\t\t\t\t\tif(s = Node.soul(n)){ // must have a soul on it.\r\n\t\t\t\t\t\treturn !obj_map(n, map, {as:as,cb:cb,s:s,n:n});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false; // nope! This was not a valid node.\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(v, f){ // we invert this because the way we check for this is via a negation.\r\n\t\t\t\t\tif(f === Node._){ return } // skip over the metadata.\r\n\t\t\t\t\tif(!Val.is(v)){ return true } // it is true that this is an invalid node.\r\n\t\t\t\t\tif(this.cb){ this.cb.call(this.as, v, f, this.n, this.s) } // optionally callback each field/value.\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\t;(function(){\r\n\t\t\t\tNode.ify = function(obj, o, as){ // returns a node from a shallow object.\r\n\t\t\t\t\tif(!o){ o = {} }\r\n\t\t\t\t\telse if(typeof o === 'string'){ o = {soul: o} }\r\n\t\t\t\t\telse if(o instanceof Function){ o = {map: o} }\r\n\t\t\t\t\tif(o.map){ o.node = o.map.call(as, obj, u, o.node || {}) }\r\n\t\t\t\t\tif(o.node = Node.soul.ify(o.node || {}, o)){\r\n\t\t\t\t\t\tobj_map(obj, map, {o:o,as:as});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn o.node; // This will only be a valid node if the object wasn't already deep!\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(v, f){ var o = this.o, tmp, u; // iterate over each field/value.\r\n\t\t\t\t\tif(o.map){\r\n\t\t\t\t\t\ttmp = o.map.call(this.as, v, ''+f, o.node);\r\n\t\t\t\t\t\tif(u === tmp){\r\n\t\t\t\t\t\t\tobj_del(o.node, f);\r\n\t\t\t\t\t\t} else\r\n\t\t\t\t\t\tif(o.node){ o.node[f] = tmp }\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(Val.is(v)){\r\n\t\t\t\t\t\to.node[f] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tvar obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_map = obj.map;\r\n\t\t\tvar text = Type.text, text_random = text.random;\r\n\t\t\tvar soul_ = Node.soul._;\r\n\t\t\tvar u;\r\n\t\t\tmodule.exports = Node;\r\n\t\t})(require, './node');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Type = require('./type');\r\n\t\t\tvar Node = require('./node');\r\n\t\t\tfunction State(){\r\n\t\t\t\tvar t;\r\n\t\t\t\tif(perf){\r\n\t\t\t\t\tt = start + perf.now();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tt = time();\r\n\t\t\t\t}\r\n\t\t\t\tif(last < t){\r\n\t\t\t\t\treturn N = 0, last = t + State.drift;\r\n\t\t\t\t}\r\n\t\t\t\treturn last = t + ((N += 1) / D) + State.drift;\r\n\t\t\t}\r\n\t\t\tvar time = Type.time.is, last = -Infinity, N = 0, D = 1000; // WARNING! In the future, on machines that are D times faster than 2016AD machines, you will want to increase D by another several orders of magnitude so the processing speed never out paces the decimal resolution (increasing an integer effects the state accuracy).\r\n\t\t\tvar perf = (typeof performance !== 'undefined')? (performance.timing && performance) : false, start = (perf && perf.timing && perf.timing.navigationStart) || (perf = false);\r\n\t\t\tState._ = '>';\r\n\t\t\tState.drift = 0;\r\n\t\t\tState.is = function(n, f, o){ // convenience function to get the state on a field on a node and return it.\r\n\t\t\t\tvar tmp = (f && n && n[N_] && n[N_][State._]) || o;\r\n\t\t\t\tif(!tmp){ return }\r\n\t\t\t\treturn num_is(tmp = tmp[f])? tmp : -Infinity;\r\n\t\t\t}\r\n\t\t\tState.ify = function(n, f, s, v, soul){ // put a field's state on a node.\r\n\t\t\t\tif(!n || !n[N_]){ // reject if it is not node-like.\r\n\t\t\t\t\tif(!soul){ // unless they passed a soul\r\n\t\t\t\t\t\treturn; \r\n\t\t\t\t\t}\r\n\t\t\t\t\tn = Node.soul.ify(n, soul); // then make it so!\r\n\t\t\t\t} \r\n\t\t\t\tvar tmp = obj_as(n[N_], State._); // grab the states data.\r\n\t\t\t\tif(u !== f && f !== N_){\r\n\t\t\t\t\tif(num_is(s)){\r\n\t\t\t\t\t\ttmp[f] = s; // add the valid state.\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(u !== v){ // Note: Not its job to check for valid values!\r\n\t\t\t\t\t\tn[f] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn n;\r\n\t\t\t}\r\n\t\t\tState.to = function(from, f, to){\r\n\t\t\t\tvar val = from[f];\r\n\t\t\t\tif(obj_is(val)){\r\n\t\t\t\t\tval = obj_copy(val);\r\n\t\t\t\t}\r\n\t\t\t\treturn State.ify(to, f, State.is(from, f), val, Node.soul(from));\r\n\t\t\t}\r\n\t\t\t;(function(){\r\n\t\t\t\tState.map = function(cb, s, as){ var u; // for use with Node.ify\r\n\t\t\t\t\tvar o = obj_is(o = cb || s)? o : null;\r\n\t\t\t\t\tcb = fn_is(cb = cb || s)? cb : null;\r\n\t\t\t\t\tif(o && !cb){\r\n\t\t\t\t\t\ts = num_is(s)? s : State();\r\n\t\t\t\t\t\to[N_] = o[N_] || {};\r\n\t\t\t\t\t\tobj_map(o, map, {o:o,s:s});\r\n\t\t\t\t\t\treturn o;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tas = as || obj_is(s)? s : u;\r\n\t\t\t\t\ts = num_is(s)? s : State();\r\n\t\t\t\t\treturn function(v, f, o, opt){\r\n\t\t\t\t\t\tif(!cb){\r\n\t\t\t\t\t\t\tmap.call({o: o, s: s}, v,f);\r\n\t\t\t\t\t\t\treturn v;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcb.call(as || this || {}, v, f, o, opt);\r\n\t\t\t\t\t\tif(obj_has(o,f) && u === o[f]){ return }\r\n\t\t\t\t\t\tmap.call({o: o, s: s}, v,f);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(v,f){\r\n\t\t\t\t\tif(N_ === f){ return }\r\n\t\t\t\t\tState.ify(this.o, f, this.s) ;\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tvar obj = Type.obj, obj_as = obj.as, obj_has = obj.has, obj_is = obj.is, obj_map = obj.map, obj_copy = obj.copy;\r\n\t\t\tvar num = Type.num, num_is = num.is;\r\n\t\t\tvar fn = Type.fn, fn_is = fn.is;\r\n\t\t\tvar N_ = Node._, u;\r\n\t\t\tmodule.exports = State;\r\n\t\t})(require, './state');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Type = require('./type');\r\n\t\t\tvar Val = require('./val');\r\n\t\t\tvar Node = require('./node');\r\n\t\t\tvar Graph = {};\r\n\t\t\t;(function(){\r\n\t\t\t\tGraph.is = function(g, cb, fn, as){ // checks to see if an object is a valid graph.\r\n\t\t\t\t\tif(!g || !obj_is(g) || obj_empty(g)){ return false } // must be an object.\r\n\t\t\t\t\treturn !obj_map(g, map, {cb:cb,fn:fn,as:as}); // makes sure it wasn't an empty object.\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(n, s){ // we invert this because the way'? we check for this is via a negation.\r\n\t\t\t\t\tif(!n || s !== Node.soul(n) || !Node.is(n, this.fn, this.as)){ return true } // it is true that this is an invalid graph.\r\n\t\t\t\t\tif(!this.cb){ return }\r\n\t\t\t\t\tnf.n = n; nf.as = this.as; // sequential race conditions aren't races.\r\n\t\t\t\t\tthis.cb.call(nf.as, n, s, nf);\r\n\t\t\t\t}\r\n\t\t\t\tfunction nf(fn){ // optional callback for each node.\r\n\t\t\t\t\tif(fn){ Node.is(nf.n, fn, nf.as) } // where we then have an optional callback for each field/value.\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\t;(function(){\r\n\t\t\t\tGraph.ify = function(obj, env, as){\r\n\t\t\t\t\tvar at = {path: [], obj: obj};\r\n\t\t\t\t\tif(!env){\r\n\t\t\t\t\t\tenv = {};\r\n\t\t\t\t\t} else\r\n\t\t\t\t\tif(typeof env === 'string'){\r\n\t\t\t\t\t\tenv = {soul: env};\r\n\t\t\t\t\t} else\r\n\t\t\t\t\tif(env instanceof Function){\r\n\t\t\t\t\t\tenv.map = env;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(env.soul){\r\n\t\t\t\t\t\tat.rel = Val.rel.ify(env.soul);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenv.graph = env.graph || {};\r\n\t\t\t\t\tenv.seen = env.seen || [];\r\n\t\t\t\t\tenv.as = env.as || as;\r\n\t\t\t\t\tnode(env, at);\r\n\t\t\t\t\tenv.root = at.node;\r\n\t\t\t\t\treturn env.graph;\r\n\t\t\t\t}\r\n\t\t\t\tfunction node(env, at){ var tmp;\r\n\t\t\t\t\tif(tmp = seen(env, at)){ return tmp }\r\n\t\t\t\t\tat.env = env;\r\n\t\t\t\t\tat.soul = soul;\r\n\t\t\t\t\tif(Node.ify(at.obj, map, at)){\r\n\t\t\t\t\t\t//at.rel = at.rel || Val.rel.ify(Node.soul(at.node));\r\n\t\t\t\t\t\tenv.graph[Val.rel.is(at.rel)] = at.node;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn at;\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(v,f,n){\r\n\t\t\t\t\tvar at = this, env = at.env, is, tmp;\r\n\t\t\t\t\tif(Node._ === f && obj_has(v,Val.rel._)){\r\n\t\t\t\t\t\treturn n._; // TODO: Bug?\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!(is = valid(v,f,n, at,env))){ return }\r\n\t\t\t\t\tif(!f){\r\n\t\t\t\t\t\tat.node = at.node || n || {};\r\n\t\t\t\t\t\tif(obj_has(v, Node._)){\r\n\t\t\t\t\t\t\tat.node._ = obj_copy(v._);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tat.node = Node.soul.ify(at.node, Val.rel.is(at.rel));\r\n\t\t\t\t\t\tat.rel = at.rel || Val.rel.ify(Node.soul(at.node));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp = env.map){\r\n\t\t\t\t\t\ttmp.call(env.as || {}, v,f,n, at);\r\n\t\t\t\t\t\tif(obj_has(n,f)){\r\n\t\t\t\t\t\t\tv = n[f];\r\n\t\t\t\t\t\t\tif(u === v){\r\n\t\t\t\t\t\t\t\tobj_del(n, f);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!(is = valid(v,f,n, at,env))){ return }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!f){ return at.node }\r\n\t\t\t\t\tif(true === is){\r\n\t\t\t\t\t\treturn v;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp = node(env, {obj: v, path: at.path.concat(f)});\r\n\t\t\t\t\tif(!tmp.node){ return }\r\n\t\t\t\t\treturn tmp.rel; //{'#': Node.soul(tmp.node)};\r\n\t\t\t\t}\r\n\t\t\t\tfunction soul(id){ var at = this;\r\n\t\t\t\t\tvar prev = Val.rel.is(at.rel), graph = at.env.graph;\r\n\t\t\t\t\tat.rel = at.rel || Val.rel.ify(id);\r\n\t\t\t\t\tat.rel[Val.rel._] = id;\r\n\t\t\t\t\tif(at.node && at.node[Node._]){\r\n\t\t\t\t\t\tat.node[Node._][Val.rel._] = id;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(obj_has(graph, prev)){\r\n\t\t\t\t\t\tgraph[id] = graph[prev];\r\n\t\t\t\t\t\tobj_del(graph, prev);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction valid(v,f,n, at,env){ var tmp;\r\n\t\t\t\t\tif(Val.is(v)){ return true }\r\n\t\t\t\t\tif(obj_is(v)){ return 1 }\r\n\t\t\t\t\tif(tmp = env.invalid){\r\n\t\t\t\t\t\tv = tmp.call(env.as || {}, v,f,n);\r\n\t\t\t\t\t\treturn valid(v,f,n, at,env);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenv.err = \"Invalid value at '\" + at.path.concat(f).join('.') + \"'!\";\r\n\t\t\t\t}\r\n\t\t\t\tfunction seen(env, at){\r\n\t\t\t\t\tvar arr = env.seen, i = arr.length, has;\r\n\t\t\t\t\twhile(i--){ has = arr[i];\r\n\t\t\t\t\t\tif(at.obj === has.obj){ return has }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tarr.push(at);\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tGraph.node = function(node){\r\n\t\t\t\tvar soul = Node.soul(node);\r\n\t\t\t\tif(!soul){ return }\r\n\t\t\t\treturn obj_put({}, soul, node);\r\n\t\t\t}\r\n\t\t\t;(function(){\r\n\t\t\t\tGraph.to = function(graph, root, opt){\r\n\t\t\t\t\tif(!graph){ return }\r\n\t\t\t\t\tvar obj = {};\r\n\t\t\t\t\topt = opt || {seen: {}};\r\n\t\t\t\t\tobj_map(graph[root], map, {obj:obj, graph: graph, opt: opt});\r\n\t\t\t\t\treturn obj;\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(v,f){ var tmp, obj;\r\n\t\t\t\t\tif(Node._ === f){\r\n\t\t\t\t\t\tif(obj_empty(v, Val.rel._)){\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.obj[f] = obj_copy(v);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!(tmp = Val.rel.is(v))){\r\n\t\t\t\t\t\tthis.obj[f] = v;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(obj = this.opt.seen[tmp]){\r\n\t\t\t\t\t\tthis.obj[f] = obj;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.obj[f] = this.opt.seen[tmp] = Graph.to(this.graph, tmp, this.opt);\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\t\tvar fn_is = Type.fn.is;\r\n\t\t\tvar obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_has = obj.has, obj_empty = obj.empty, obj_put = obj.put, obj_map = obj.map, obj_copy = obj.copy;\r\n\t\t\tvar u;\r\n\t\t\tmodule.exports = Graph;\r\n\t\t})(require, './graph');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\t// request / response module, for asking and acking messages.\r\n\t\t\trequire('./onto'); // depends upon onto!\r\n\t\t\tmodule.exports = function ask(cb, as){\r\n\t\t\t\tif(!this.on){ return }\r\n\t\t\t\tif(!(cb instanceof Function)){\r\n\t\t\t\t\tif(!cb || !as){ return }\r\n\t\t\t\t\tvar id = cb['#'] || cb, tmp = (this.tag||empty)[id];\r\n\t\t\t\t\tif(!tmp){ return }\r\n\t\t\t\t\ttmp = this.on(id, as);\r\n\t\t\t\t\tclearTimeout(tmp.err);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tvar id = (as && as['#']) || Math.random().toString(36).slice(2);\r\n\t\t\t\tif(!cb){ return id }\r\n\t\t\t\tvar to = this.on(id, cb, as);\r\n\t\t\t\tto.err = to.err || setTimeout(function(){\r\n\t\t\t\t\tto.next({err: \"Error: No ACK received yet.\"});\r\n\t\t\t\t\tto.off();\r\n\t\t\t\t}, (this.opt||{}).lack || 9000);\r\n\t\t\t\treturn id;\r\n\t\t\t}\r\n\t\t})(require, './ask');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Type = require('./type');\r\n\t\t\tfunction Dup(opt){\r\n\t\t\t\tvar dup = {s:{}};\r\n\t\t\t\topt = opt || {max: 1000, age: 1000 * 9};//1000 * 60 * 2};\r\n\t\t\t\tdup.check = function(id){\r\n\t\t\t\t\treturn dup.s[id]? dup.track(id) : false;\r\n\t\t\t\t}\r\n\t\t\t\tdup.track = function(id){\r\n\t\t\t\t\tdup.s[id] = time_is();\r\n\t\t\t\t\tif(!dup.to){\r\n\t\t\t\t\t\tdup.to = setTimeout(function(){\r\n\t\t\t\t\t\t\tType.obj.map(dup.s, function(time, id){\r\n\t\t\t\t\t\t\t\tif(opt.age > (time_is() - time)){ return }\r\n\t\t\t\t\t\t\t\tType.obj.del(dup.s, id);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tdup.to = null;\r\n\t\t\t\t\t\t}, opt.age);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn id;\r\n\t\t\t\t}\r\n\t\t\t\treturn dup;\r\n\t\t\t}\r\n\t\t\tvar time_is = Type.time.is;\r\n\t\t\tmodule.exports = Dup;\r\n\t\t})(require, './dup');\r\n\t\r\n\t\t;require(function(module){\r\n\t\r\n\t\t\tfunction Gun(o){\r\n\t\t\t\tif(o instanceof Gun){ return (this._ = {gun: this}).gun }\r\n\t\t\t\tif(!(this instanceof Gun)){ return new Gun(o) }\r\n\t\t\t\treturn Gun.create(this._ = {gun: this, opt: o});\r\n\t\t\t}\r\n\t\r\n\t\t\tGun.is = function(gun){ return (gun instanceof Gun) }\r\n\t\r\n\t\t\tGun.version = 0.9;\r\n\t\r\n\t\t\tGun.chain = Gun.prototype;\r\n\t\t\tGun.chain.toJSON = function(){};\r\n\t\r\n\t\t\tvar Type = require('./type');\r\n\t\t\tType.obj.to(Type, Gun);\r\n\t\t\tGun.HAM = require('./HAM');\r\n\t\t\tGun.val = require('./val');\r\n\t\t\tGun.node = require('./node');\r\n\t\t\tGun.state = require('./state');\r\n\t\t\tGun.graph = require('./graph');\r\n\t\t\tGun.on = require('./onto');\r\n\t\t\tGun.ask = require('./ask');\r\n\t\t\tGun.dup = require('./dup');\r\n\t\r\n\t\t\tGun._ = { // some reserved key words, these are not the only ones.\r\n\t\t\t\tnode: Gun.node._ // all metadata of a node is stored in the meta property on the node.\r\n\t\t\t\t,soul: Gun.val.rel._ // a soul is a UUID of a node but it always points to the \"latest\" data known.\r\n\t\t\t\t,state: Gun.state._ // other than the soul, we store HAM metadata.\r\n\t\t\t\t,field: '.' // a field is a property on a node which points to a value.\r\n\t\t\t\t,value: '=' // the primitive value.\r\n\t\t\t}\r\n\t\r\n\t\t\t;(function(){\r\n\t\t\t\tGun.create = function(at){\r\n\t\t\t\t\tat.root = at.root || at.gun;\r\n\t\t\t\t\tat.graph = at.graph || {};\r\n\t\t\t\t\tat.on = at.on || Gun.on;\r\n\t\t\t\t\tat.ask = at.ask || Gun.ask;\r\n\t\t\t\t\tat.dup = at.dup || Gun.dup();\r\n\t\t\t\t\tvar gun = at.gun.opt(at.opt);\r\n\t\t\t\t\tif(!at.once){\r\n\t\t\t\t\t\tat.on('in', root, at);\r\n\t\t\t\t\t\tat.on('out', root, at);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat.once = 1;\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tfunction root(msg){\r\n\t\t\t\t\t//console.log(\"add to.next(at)\"); // TODO: BUG!!!\r\n\t\t\t\t\tvar ev = this, at = ev.as, gun = at.gun, tmp;\r\n\t\t\t\t\t//if(!msg.gun){ msg.gun = at.gun }\r\n\t\t\t\t\tif(!(tmp = msg['#'])){ tmp = msg['#'] = text_rand(9) }\r\n\t\t\t\t\tif(at.dup.check(tmp)){ return }\r\n\t\t\t\t\tat.dup.track(tmp);\r\n\t\t\t\t\tmsg = obj_to(msg);//, {gun: at.gun});\r\n\t\t\t\t\tif(!at.ask(msg['@'], msg)){\r\n\t\t\t\t\t\tif(msg.get){\r\n\t\t\t\t\t\t\tGun.on.get(msg, gun);\r\n\t\t\t\t\t\t\t//at.on('get', get(msg));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(msg.put){\r\n\t\t\t\t\t\t\tGun.on.put(msg, gun);\r\n\t\t\t\t\t\t\t//at.on('put', put(msg));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat.on('out', msg);\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\r\n\t\t\t;(function(){\r\n\t\t\t\tGun.on.put = function(msg, gun){\r\n\t\t\t\t\tvar at = gun._, ctx = {gun: gun, graph: at.graph, put: {}, map: {}, machine: Gun.state(), ack: msg['@']};\r\n\t\t\t\t\tif(!Gun.graph.is(msg.put, null, verify, ctx)){ ctx.err = \"Error: Invalid graph!\" }\r\n\t\t\t\t\tif(ctx.err){ return at.on('in', {'@': msg['#'], err: Gun.log(ctx.err) }) }\r\n\t\t\t\t\tobj_map(ctx.put, merge, ctx);\r\n\t\t\t\t\tobj_map(ctx.map, map, ctx);\r\n\t\t\t\t\tif(u !== ctx.defer){\r\n\t\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\t\tGun.on.put(msg, gun);\r\n\t\t\t\t\t\t}, ctx.defer - at.machine);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!ctx.diff){ return }\r\n\t\t\t\t\tat.on('put', obj_to(msg, {put: ctx.diff}));\r\n\t\t\t\t};\r\n\t\t\t\tfunction verify(val, key, node, soul){ var ctx = this;\r\n\t\t\t\t\tvar state = Gun.state.is(node, key), tmp;\r\n\t\t\t\t\tif(!state){ return ctx.err = \"Error: No state on '\"+key+\"' in node '\"+soul+\"'!\" }\r\n\t\t\t\t\tvar vertex = ctx.graph[soul] || empty, was = Gun.state.is(vertex, key, true), known = vertex[key];\r\n\t\t\t\t\tvar HAM = Gun.HAM(ctx.machine, state, was, val, known);\r\n\t\t\t\t\tif(!HAM.incoming){\r\n\t\t\t\t\t\tif(HAM.defer){ // pick the lowest\r\n\t\t\t\t\t\t\tctx.defer = (state < (ctx.defer || Infinity))? state : ctx.defer;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctx.put[soul] = Gun.state.to(node, key, ctx.put[soul]);\r\n\t\t\t\t\t(ctx.diff || (ctx.diff = {}))[soul] = Gun.state.to(node, key, ctx.diff[soul]);\r\n\t\t\t\t}\r\n\t\t\t\tfunction merge(node, soul){\r\n\t\t\t\t\tvar cat = this.gun._, at = (cat.next || empty)[soul];\r\n\t\t\t\t\tif(!at){ return }\r\n\t\t\t\t\tvar msg = this.map[soul] = {\r\n\t\t\t\t\t\tput: this.node = node,\r\n\t\t\t\t\t\tget: this.soul = soul,\r\n\t\t\t\t\t\tgun: this.at = at\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif(this.ack){ msg['@'] = this.ack }\r\n\t\t\t\t\tobj_map(node, each, this);\r\n\t\t\t\t}\r\n\t\t\t\tfunction each(val, key){\r\n\t\t\t\t\tvar graph = this.graph, soul = this.soul, at = (this.at._), tmp;\r\n\t\t\t\t\tgraph[soul] = Gun.state.to(this.node, key, graph[soul]);\r\n\t\t\t\t\tat.put = Gun.state.to(this.node, key, at.put);\r\n\t\t\t\t}\r\n\t\t\t\tfunction map(msg, soul){ var tmp;\r\n\t\t\t\t\tif(!msg.gun){ return }\r\n\t\t\t\t\tif((tmp = this.gun._).tag.node){\r\n\t\t\t\t\t\treturn tmp.on('node', function(msg){ this.off();\r\n\t\t\t\t\t\t\t(msg.gun._).on('in', msg);\r\n\t\t\t\t\t\t}).on.on('node', msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t(msg.gun._).on('in', msg);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tGun.on.get = function(msg, gun){\r\n\t\t\t\t\tvar root = gun._, soul = msg.get[_soul], node = root.graph[soul], field = msg.get[_field], tmp;\r\n\t\t\t\t\tvar next = root.next || (root.next = {}), at = ((next[soul] || empty)._);\r\n\t\t\t\t\tif(!node || !at){ return root.on('get', msg) }\r\n\t\t\t\t\tif(field){\r\n\t\t\t\t\t\tif(!obj_has(node, field)){ return root.on('get', msg) }\r\n\t\t\t\t\t\tnode = Gun.state.to(node, field);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode = Gun.obj.copy(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnode = Gun.graph.node(node);\r\n\t\t\t\t\t//tmp = at.ack;\r\n\t\t\t\t\troot.on('in', {\r\n\t\t\t\t\t\t'@': msg['#'],\r\n\t\t\t\t\t\t//how: 'mem',\r\n\t\t\t\t\t\tput: node,\r\n\t\t\t\t\t\tgun: gun\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//if(0 < tmp){\r\n\t\t\t\t\t//\treturn;\r\n\t\t\t\t\t//}\r\n\t\t\t\t\troot.on('get', msg);\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\r\n\t\t\t;(function(){\r\n\t\t\t\tGun.chain.opt = function(opt){\r\n\t\t\t\t\topt = opt || {};\r\n\t\t\t\t\tvar gun = this, at = gun._, tmp = opt.peers || opt;\r\n\t\t\t\t\tif(!obj_is(opt)){ opt = {} }\r\n\t\t\t\t\tif(!obj_is(at.opt)){ at.opt = opt }\r\n\t\t\t\t\tif(text_is(tmp)){ tmp = [tmp] }\r\n\t\t\t\t\tif(list_is(tmp)){\r\n\t\t\t\t\t\ttmp = obj_map(tmp, function(url, i, map){\r\n\t\t\t\t\t\t\tmap(url, {url: url});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(!obj_is(at.opt.peers)){ at.opt.peers = {}}\r\n\t\t\t\t\t\tat.opt.peers = obj_to(tmp, at.opt.peers);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat.opt.uuid = at.opt.uuid || function(){ \r\n\t\t\t\t\t\treturn state().toString(36).replace('.','') + text_rand(12);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat.opt.peers = at.opt.peers || {};\r\n\t\t\t\t\tobj_to(opt, at.opt); // copies options on to `at.opt` only if not already taken.\r\n\t\t\t\t\tGun.on('opt', at);\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t}());\r\n\t\r\n\t\t\tvar list_is = Gun.list.is;\r\n\t\t\tvar text = Gun.text, text_is = text.is, text_rand = text.random;\r\n\t\t\tvar obj = Gun.obj, obj_is = obj.is, obj_has = obj.has, obj_to = obj.to, obj_map = obj.map, obj_copy = obj.copy;\r\n\t\t\tvar state = Gun.state, _soul = Gun._.soul, _field = Gun._.field, node_ = Gun._.node, rel_is = Gun.val.rel.is;\r\n\t\t\tvar empty = {}, u;\r\n\t\r\n\t\t\tconsole.debug = function(i, s){ return (console.debug.i && i === console.debug.i && console.debug.i++) && (console.log.apply(console, arguments) || s) };\r\n\t\r\n\t\t\tGun.log = function(){ return (!Gun.log.off && console.log.apply(console, arguments)), [].slice.call(arguments).join(' ') }\r\n\t\t\tGun.log.once = function(w,s,o){ return (o = Gun.log.once)[w] = o[w] || 0, o[w]++ || Gun.log(s) }\r\n\t\r\n\t\t\t;\"Please do not remove these messages unless you are paying for a monthly sponsorship, thanks!\";\r\n\t\t\tGun.log.once(\"welcome\", \"Hello wonderful person! :) Thanks for using GUN, feel free to ask for help on https://gitter.im/amark/gun and ask StackOverflow questions tagged with 'gun'!\");\r\n\t\t\t;\"Please do not remove these messages unless you are paying for a monthly sponsorship, thanks!\";\r\n\t\t\t\r\n\t\t\tif(typeof window !== \"undefined\"){ window.Gun = Gun }\r\n\t\t\tif(typeof common !== \"undefined\"){ common.exports = Gun }\r\n\t\t\tmodule.exports = Gun;\r\n\t\t})(require, './root');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./root');\r\n\t\t\tGun.chain.back = function(n, opt){ var tmp;\r\n\t\t\t\tn = n || 1;\r\n\t\t\t\tif(-1 === n || Infinity === n){\r\n\t\t\t\t\treturn this._.root;\r\n\t\t\t\t} else\r\n\t\t\t\tif(1 === n){\r\n\t\t\t\t\treturn this._.back || this;\r\n\t\t\t\t}\r\n\t\t\t\tvar gun = this, at = gun._;\r\n\t\t\t\tif(typeof n === 'string'){\r\n\t\t\t\t\tn = n.split('.');\r\n\t\t\t\t}\r\n\t\t\t\tif(n instanceof Array){\r\n\t\t\t\t\tvar i = 0, l = n.length, tmp = at;\r\n\t\t\t\t\tfor(i; i < l; i++){\r\n\t\t\t\t\t\ttmp = (tmp||empty)[n[i]];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(u !== tmp){\r\n\t\t\t\t\t\treturn opt? gun : tmp;\r\n\t\t\t\t\t} else\r\n\t\t\t\t\tif((tmp = at.back)){\r\n\t\t\t\t\t\treturn tmp.back(n, opt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(n instanceof Function){\r\n\t\t\t\t\tvar yes, tmp = {back: gun};\r\n\t\t\t\t\twhile((tmp = tmp.back)\r\n\t\t\t\t\t&& (tmp = tmp._)\r\n\t\t\t\t\t&& !(yes = n(tmp, opt))){}\r\n\t\t\t\t\treturn yes;\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tvar empty = {}, u;\r\n\t\t})(require, './back');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\t// WARNING: GUN is very simple, but the JavaScript chaining API around GUN\r\n\t\t\t// is complicated and was extremely hard to build. If you port GUN to another\r\n\t\t\t// language, consider implementing an easier API to build.\r\n\t\t\tvar Gun = require('./root');\r\n\t\t\tGun.chain.chain = function(){\r\n\t\t\t\tvar at = this._, chain = new this.constructor(this), cat = chain._, root;\r\n\t\t\t\tcat.root = root = at.root;\r\n\t\t\t\tcat.id = ++root._.once;\r\n\t\t\t\tcat.back = this;\r\n\t\t\t\tcat.on = Gun.on;\r\n\t\t\t\tcat.on('in', input, cat); // For 'in' if I add my own listeners to each then I MUST do it before in gets called. If I listen globally for all incoming data instead though, regardless of individual listeners, I can transform the data there and then as well.\r\n\t\t\t\tcat.on('out', output, cat); // However for output, there isn't really the global option. I must listen by adding my own listener individually BEFORE this one is ever called.\r\n\t\t\t\treturn chain;\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction output(msg){\r\n\t\t\t\tvar put, get, at = this.as, back = at.back._, root = at.root._;\r\n\t\t\t\tif(!msg.gun){ msg.gun = at.gun }\r\n\t\t\t\tthis.to.next(msg);\r\n\t\t\t\tif(get = msg.get){\r\n\t\t\t\t\t/*if(u !== at.put){\r\n\t\t\t\t\t\tat.on('in', at);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\tif(get['#'] || at.soul){\r\n\t\t\t\t\t\tget['#'] = get['#'] || at.soul;\r\n\t\t\t\t\t\tmsg['#'] || (msg['#'] = root.opt.uuid());\r\n\t\t\t\t\t\tback = (root.gun.get(get['#'])._);\r\n\t\t\t\t\t\tif(!(get = get['.'])){\r\n\t\t\t\t\t\t\tif(obj_has(back, 'put')){\r\n\t\t\t\t\t\t\t//if(u !== back.put){\r\n\t\t\t\t\t\t\t\tback.on('in', back);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(back.ack){\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tmsg.gun = back.gun;\r\n\t\t\t\t\t\t\tback.ack = -1;\r\n\t\t\t\t\t\t} else\r\n\t\t\t\t\t\tif(obj_has(back.put, get)){\r\n\t\t\t\t\t\t\tback.on('in', {\r\n\t\t\t\t\t\t\t\tgun: back.gun,\r\n\t\t\t\t\t\t\t\tput: Gun.state.to(back.put, get),\r\n\t\t\t\t\t\t\t\tget: back.get\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\troot.ask(ack, msg);\r\n\t\t\t\t\t\treturn root.on('in', msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(root.now){\r\n\t\t\t\t\t\troot.now[at.id] = root.now[at.id] || true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(get['.']){\r\n\t\t\t\t\t\tif(at.get){\r\n\t\t\t\t\t\t\tmsg = {get: {'.': at.get}, gun: at.gun};\r\n\t\t\t\t\t\t\t(back.ask || (back.ask = {}))[at.get] = msg.gun; // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t\t\t\t\treturn back.on('out', msg);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmsg = {get: {}, gun: at.gun};\r\n\t\t\t\t\t\treturn back.on('out', msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat.ack = at.ack || -1;\r\n\t\t\t\t\tif(at.get){\r\n\t\t\t\t\t\tmsg.gun = at.gun;\r\n\t\t\t\t\t\tget['.'] = at.get;\r\n\t\t\t\t\t\t(back.ask || (back.ask = {}))[at.get] = msg.gun; // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t\t\t\treturn back.on('out', msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn back.on('out', msg);\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction input(at){\r\n\t\t\t\tat = at._ || at;\r\n\t\t\t\tvar ev = this, cat = this.as, gun = at.gun, coat = gun._, change = at.put, back = cat.back._ || empty, rel, tmp;\r\n\t\t\t\tif(cat.get && at.get !== cat.get){\r\n\t\t\t\t\tat = obj_to(at, {get: cat.get});\r\n\t\t\t\t}\r\n\t\t\t\tif(cat.field && coat !== cat){\r\n\t\t\t\t\tat = obj_to(at, {gun: cat.gun});\r\n\t\t\t\t\tif(coat.ack){\r\n\t\t\t\t\t\tcat.ack = coat.ack;\r\n\t\t\t\t\t\t//cat.ack = cat.ack || coat.ack;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(u === change){\r\n\t\t\t\t\tev.to.next(at);\r\n\t\t\t\t\tif(cat.soul){ return }\r\n\t\t\t\t\techo(cat, at, ev);\r\n\t\t\t\t\tif(cat.field){\r\n\t\t\t\t\t\tnot(cat, at);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tobj_del(coat.echo, cat.id);\r\n\t\t\t\t\tobj_del(cat.map, coat.id);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(cat.soul){\r\n\t\t\t\t\t//if(cat.root._.now){ at = obj_to(at, {put: change = coat.put}) } // TODO: Ugly hack for uncached synchronous maps.\r\n\t\t\t\t\tev.to.next(at);\r\n\t\t\t\t\techo(cat, at, ev);\r\n\t\t\t\t\tobj_map(change, map, {at: at, cat: cat});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t/*if(rel = Gun.val.rel.is(change)){\r\n\t\t\t\t\tif(tmp = (gun.back(-1).get(rel)._).put){\r\n\t\t\t\t\t\tchange = tmp; // this will cause performance to turn to mush, maybe use `.now` check?\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//if(tmp.put){ change = tmp.put; }\r\n\t\t\t\t}\r\n\t\t\t\tif(!rel || tmp){*/\r\n\t\t\t\tif(!(rel = Gun.val.rel.is(change))){\r\n\t\t\t\t\tif(Gun.val.is(change)){\r\n\t\t\t\t\t\tif(cat.field || cat.soul){\r\n\t\t\t\t\t\t\tnot(cat, at);\r\n\t\t\t\t\t\t} else\r\n\t\t\t\t\t\tif(coat.field || coat.soul){\r\n\t\t\t\t\t\t\t(coat.echo || (coat.echo = {}))[cat.id] = cat;\r\n\t\t\t\t\t\t\t(cat.map || (cat.map = {}))[coat.id] = cat.map[coat.id] || {at: coat};\r\n\t\t\t\t\t\t\t//if(u === coat.put){ return } // Not necessary but improves performance. If we have it but coat does not, that means we got things out of order and coat will get it. Once coat gets it, it will tell us again.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tev.to.next(at);\r\n\t\t\t\t\t\techo(cat, at, ev);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(cat.field && coat !== cat && obj_has(coat, 'put')){\r\n\t\t\t\t\t\tcat.put = coat.put;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif((rel = Gun.node.soul(change)) && coat.field){\r\n\t\t\t\t\t\tcoat.put = (cat.root.get(rel)._).put;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tev.to.next(at);\r\n\t\t\t\t\techo(cat, at, ev);\r\n\t\t\t\t\trelate(cat, at, coat, rel);\r\n\t\t\t\t\tobj_map(change, map, {at: at, cat: cat});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\trelate(cat, at, coat, rel);\r\n\t\t\t\tev.to.next(at);\r\n\t\t\t\techo(cat, at, ev);\r\n\t\t\t}\r\n\t\t\tGun.chain.chain.input = input;\r\n\t\t\tfunction relate(at, msg, from, rel){\r\n\t\t\t\tif(!rel || node_ === at.get){ return }\r\n\t\t\t\tvar tmp = (at.root.get(rel)._);\r\n\t\t\t\tif(at.has){\r\n\t\t\t\t\tfrom = tmp;\r\n\t\t\t\t} else \r\n\t\t\t\tif(from.has){\r\n\t\t\t\t\trelate(from, msg, from, rel);\r\n\t\t\t\t}\r\n\t\t\t\tif(from === at){ return }\r\n\t\t\t\t(from.echo || (from.echo = {}))[at.id] = at;\r\n\t\t\t\tif(at.has && !(at.map||empty)[from.id]){ // if we haven't seen this before.\r\n\t\t\t\t\tnot(at, msg);\r\n\t\t\t\t}\r\n\t\t\t\ttmp = (at.map || (at.map = {}))[from.id] = at.map[from.id] || {at: from};\r\n\t\t\t\tvar now = at.root._.now;\r\n\t\t\t\tif(rel === tmp.rel){\r\n\t\t\t\t\tif(!now){ return }\r\n\t\t\t\t\tif(u === now[at.id]){ return }\r\n\t\t\t\t\tif((now._ || (now._ = {}))[at.id]){ return } now._[at.id] = true;\r\n\t\t\t\t}\r\n\t\t\t\task(at, tmp.rel = rel);\r\n\t\t\t}\r\n\t\t\tfunction echo(at, msg, ev){\r\n\t\t\t\tif(!at.echo){ return } // || node_ === at.get ?\r\n\t\t\t\tif(at.has || at.field){ msg = obj_to(msg, {event: ev}) }\r\n\t\t\t\tobj_map(at.echo, reverb, msg);\r\n\t\t\t}\r\n\t\t\tfunction reverb(to){\r\n\t\t\t\tto.on('in', this);\r\n\t\t\t}\r\n\t\t\tfunction map(data, key){ // Map over only the changes on every update.\r\n\t\t\t\tvar cat = this.cat, next = cat.next || empty, via = this.at, gun, chain, at, tmp;\r\n\t\t\t\tif(node_ === key && !next[key]){ return }\r\n\t\t\t\tif(!(gun = next[key])){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tat = (gun._);\r\n\t\t\t\t//if(data && data[_soul] && (tmp = Gun.val.rel.is(data)) && (tmp = (cat.root.get(tmp)._)) && obj_has(tmp, 'put')){\r\n\t\t\t\t//\tdata = tmp.put;\r\n\t\t\t\t//}\r\n\t\t\t\tif(at.field){\r\n\t\t\t\t\tif(!(data && data[_soul] && Gun.val.rel.is(data) === Gun.node.soul(at.put))){\r\n\t\t\t\t\t\tat.put = data;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchain = gun;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchain = via.gun.get(key);\r\n\t\t\t\t}\r\n\t\t\t\tat.on('in', {\r\n\t\t\t\t\tput: data,\r\n\t\t\t\t\tget: key,\r\n\t\t\t\t\tgun: chain,\r\n\t\t\t\t\tvia: via\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfunction not(at, msg){\r\n\t\t\t\tif(!(at.has || at.soul)){ return }\r\n\t\t\t\tvar tmp = at.map, root = at.root._;\r\n\t\t\t\tat.map = null;\r\n\t\t\t\tif(!root.now || !root.now[at.id]){\r\n\t\t\t\t\tif((u === msg.put && !msg['@']) && null === tmp){ return }\r\n\t\t\t\t}\r\n\t\t\t\tif(u === tmp && Gun.val.rel.is(at.put)){ return } // TODO: Bug? Threw second condition in for a particular test, not sure if a counter example is tested though.\r\n\t\t\t\tobj_map(tmp, function(proxy){\r\n\t\t\t\t\tif(!(proxy = proxy.at)){ return }\r\n\t\t\t\t\tobj_del(proxy.echo, at.id);\r\n\t\t\t\t});\r\n\t\t\t\tobj_map(at.next, function(gun, key){\r\n\t\t\t\t\tvar coat = (gun._);\r\n\t\t\t\t\tcoat.put = u;\r\n\t\t\t\t\tif(coat.ack){\r\n\t\t\t\t\t\tcoat.ack = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcoat.on('in', {\r\n\t\t\t\t\t\tget: key,\r\n\t\t\t\t\t\tgun: gun,\r\n\t\t\t\t\t\tput: u\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfunction ask(at, soul){\r\n\t\t\t\tvar tmp = (at.root.get(soul)._);\r\n\t\t\t\tif(at.ack){\r\n\t\t\t\t\t//tmp.ack = tmp.ack || -1;\r\n\t\t\t\t\ttmp.on('out', {get: {'#': soul}});\r\n\t\t\t\t\tif(!at.ask){ return } // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t\t}\r\n\t\t\t\tobj_map(at.ask || at.next, function(gun, key){\r\n\t\t\t\t\t//(tmp.gun.get(key)._).on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t\t//tmp.on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t\t(gun._).on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t\t//at.on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t});\r\n\t\t\t\tGun.obj.del(at, 'ask'); // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t}\r\n\t\t\tfunction ack(msg, ev){\r\n\t\t\t\tvar as = this.as, get = as.get || empty, at = as.gun._;\r\n\t\t\t\tif(at.ack){ at.ack = (at.ack + 1) || 1 }\r\n\t\t\t\tif(!msg.put || node_ == get['.'] || (get['.'] && !obj_has(msg.put[get['#']], at.get))){\r\n\t\t\t\t\tif(at.put !== u){ return }\r\n\t\t\t\t\t//at.ack = 0;\r\n\t\t\t\t\tat.on('in', {\r\n\t\t\t\t\t\tget: at.get,\r\n\t\t\t\t\t\tput: at.put = u,\r\n\t\t\t\t\t\tgun: at.gun,\r\n\t\t\t\t\t\t'@': msg['@']\r\n\t\t\t\t\t})\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t//if(/*!msg.gun &&*/ !get['.'] && get['#']){ at.ack = (at.ack + 1) || 1 }\r\n\t\t\t\t//msg = obj_to(msg);\r\n\t\t\t\tmsg.gun = at.root;\r\n\t\t\t\t//Gun.on('put', at);\r\n\t\t\t\tGun.on.put(msg, at.root);\r\n\t\t\t}\r\n\t\t\tvar empty = {}, u;\r\n\t\t\tvar obj = Gun.obj, obj_has = obj.has, obj_put = obj.put, obj_del = obj.del, obj_to = obj.to, obj_map = obj.map;\r\n\t\t\tvar _soul = Gun._.soul, _field = Gun._.field, node_ = Gun.node._;\r\n\t\t})(require, './chain');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./root');\r\n\t\t\tGun.chain.get = function(key, cb, as){\r\n\t\t\t\tif(typeof key === 'string'){\r\n\t\t\t\t\tvar gun, back = this, cat = back._;\r\n\t\t\t\t\tvar next = cat.next || empty, tmp;\r\n\t\t\t\t\tif(!(gun = next[key])){\r\n\t\t\t\t\t\tgun = cache(key, back);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\tif(key instanceof Function){\r\n\t\t\t\t\tvar gun = this, at = gun._, root = at.root._, tmp = root.now, ev;\r\n\t\t\t\t\tas = cb || {};\r\n\t\t\t\t\tas.use = key;\r\n\t\t\t\t\tas.out = as.out || {};\r\n\t\t\t\t\tas.out.get = as.out.get || {};\r\n\t\t\t\t\tev = at.on('in', use, as);\r\n\t\t\t\t\t(root.now = {$:1})[as.now = at.id] = ev;\r\n\t\t\t\t\tat.on('out', as.out);\r\n\t\t\t\t\troot.now = tmp;\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t} else\r\n\t\t\t\tif(num_is(key)){\r\n\t\t\t\t\treturn this.get(''+key, cb, as);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t(as = this.chain())._.err = {err: Gun.log('Invalid get request!', key)}; // CLEAN UP\r\n\t\t\t\t\tif(cb){ cb.call(as, as._.err) }\r\n\t\t\t\t\treturn as;\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = cat.stun){ // TODO: Refactor?\r\n\t\t\t\t\tgun._.stun = gun._.stun || tmp;\r\n\t\t\t\t}\r\n\t\t\t\tif(cb && cb instanceof Function){\r\n\t\t\t\t\tgun.get(cb, as);\r\n\t\t\t\t}\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tfunction cache(key, back){\r\n\t\t\t\tvar cat = back._, next = cat.next, gun = back.chain(), at = gun._;\r\n\t\t\t\tif(!next){ next = cat.next = {} }\r\n\t\t\t\tnext[at.get = key] = gun;\r\n\t\t\t\tif(cat.root === back){ \r\n\t\t\t\t\tat.soul = key;\r\n\t\t\t\t} else\r\n\t\t\t\tif(cat.soul || cat.field || cat.has){  // TODO: Convert field to has!\r\n\t\t\t\t\tat.field = at.has = key;\r\n\t\t\t\t\tif(obj_has(cat.put, key)){\r\n\t\t\t\t\t\t//at.put = cat.put[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tfunction use(msg){\r\n\t\t\t\tvar ev = this, as = ev.as, gun = msg.gun, at = gun._, root = at.root._, data = msg.put, tmp;\r\n\t\t\t\tif((tmp = root.now) && ev !== tmp[as.now]){\r\n\t\t\t\t\treturn ev.to.next(msg);\r\n\t\t\t\t}\r\n\t\t\t\tif(u === data){\r\n\t\t\t\t\tdata = at.put;\r\n\t\t\t\t}\r\n\t\t\t\tif((tmp = data) && tmp[rel._] && (tmp = rel.is(tmp))){\r\n\t\t\t\t\ttmp = (at.root.get(tmp)._);\r\n\t\t\t\t\tif(u !== tmp.put){\r\n\t\t\t\t\t\tmsg = obj_to(msg, {put: tmp.put});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tas.use(msg, msg.event || ev);\r\n\t\t\t\tev.to.next(msg);\r\n\t\t\t}\r\n\t\t\tvar obj = Gun.obj, obj_has = obj.has, obj_to = Gun.obj.to;\r\n\t\t\tvar num_is = Gun.num.is;\r\n\t\t\tvar rel = Gun.val.rel, node_ = Gun.node._;\r\n\t\t\tvar empty = {}, u;\r\n\t\t})(require, './get');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./root');\r\n\t\t\tGun.chain.put = function(data, cb, as){\r\n\t\t\t\t// #soul.field=value>state\r\n\t\t\t\t// ~who#where.where=what>when@was\r\n\t\t\t\t// TODO: BUG! Put probably cannot handle plural chains!\r\n\t\t\t\tvar gun = this, at = (gun._), root = at.root, tmp;\r\n\t\t\t\tas = as || {};\r\n\t\t\t\tas.data = data;\r\n\t\t\t\tas.gun = as.gun || gun;\r\n\t\t\t\tif(typeof cb === 'string'){\r\n\t\t\t\t\tas.soul = cb;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tas.ack = cb;\r\n\t\t\t\t}\r\n\t\t\t\tif(at.soul){\r\n\t\t\t\t\tas.soul = at.soul;\r\n\t\t\t\t}\r\n\t\t\t\tif(as.soul || root === gun){\r\n\t\t\t\t\tif(!obj_is(as.data)){\r\n\t\t\t\t\t\t(as.ack||noop).call(as, as.out = {err: Gun.log(\"Data saved to the root level of the graph must be a node (an object), not a\", (typeof as.data), 'of \"' + as.data + '\"!')});\r\n\t\t\t\t\t\tif(as.res){ as.res() }\r\n\t\t\t\t\t\treturn gun;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tas.gun = gun = root.get(as.soul = as.soul || (as.not = Gun.node.soul(as.data) || ((root._).opt.uuid || Gun.text.random)()));\r\n\t\t\t\t\tas.ref = as.gun;\r\n\t\t\t\t\tify(as);\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tif(Gun.is(data)){\r\n\t\t\t\t\tdata.get('_').get(function(at, ev, tmp){ ev.off();\r\n\t\t\t\t\t\tif(!(tmp = at.gun) || !(tmp = tmp._.back) || !tmp._.soul){\r\n\t\t\t\t\t\t\treturn Gun.log(\"The reference you are saving is a\", typeof at.put, '\"'+ as.put +'\", not a node (object)!');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tgun.put(Gun.val.rel.ify(tmp._.soul), cb, as);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tas.ref = as.ref || (root === (tmp = at.back))? gun : tmp;\r\n\t\t\t\tif(as.ref._.soul && Gun.val.is(as.data) && at.get){\r\n\t\t\t\t\tas.data = obj_put({}, at.get, as.data);\r\n\t\t\t\t\tas.ref.put(as.data, as.soul, as);\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tas.ref.get('_').get(any, {as: as});\r\n\t\t\t\tif(!as.out){\r\n\t\t\t\t\t// TODO: Perf idea! Make a global lock, that blocks everything while it is on, but if it is on the lock it does the expensive lookup to see if it is a dependent write or not and if not then it proceeds full speed. Meh? For write heavy async apps that would be terrible.\r\n\t\t\t\t\tas.res = as.res || stun; // Gun.on.stun(as.ref); // TODO: BUG! Deal with locking?\r\n\t\t\t\t\tas.gun._.stun = as.ref._.stun;\r\n\t\t\t\t}\r\n\t\t\t\treturn gun;\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction ify(as){\r\n\t\t\t\tas.batch = batch;\r\n\t\t\t\tvar opt = as.opt||{}, env = as.env = Gun.state.map(map, opt.state);\r\n\t\t\t\tenv.soul = as.soul;\r\n\t\t\t\tas.graph = Gun.graph.ify(as.data, env, as);\r\n\t\t\t\tif(env.err){\r\n\t\t\t\t\t(as.ack||noop).call(as, as.out = {err: Gun.log(env.err)});\r\n\t\t\t\t\tif(as.res){ as.res() }\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tas.batch();\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction stun(cb){\r\n\t\t\t\tif(cb){ cb() }\r\n\t\t\t\treturn;\r\n\t\t\t\tvar as = this;\r\n\t\t\t\tif(!as.ref){ return }\r\n\t\t\t\tif(cb){\r\n\t\t\t\t\tas.after = as.ref._.tag;\r\n\t\t\t\t\tas.now = as.ref._.tag = {};\r\n\t\t\t\t\tcb();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(as.after){\r\n\t\t\t\t\tas.ref._.tag = as.after;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction batch(){ var as = this;\r\n\t\t\t\tif(!as.graph || obj_map(as.stun, no)){ return }\r\n\t\t\t\tas.res = as.res || function(cb){ if(cb){ cb() } };\r\n\t\t\t\tas.res(function(){\r\n\t\t\t\t\tvar cat = (as.gun.back(-1)._), ask = cat.ask(function(ack){\r\n\t\t\t\t\t\tthis.off(); // One response is good enough for us currently. Later we may want to adjust this.\r\n\t\t\t\t\t\tif(!as.ack){ return }\r\n\t\t\t\t\t\tas.ack(ack, this);\r\n\t\t\t\t\t}, as.opt);\r\n\t\t\t\t\tvar tmp = cat.root._.now; obj.del(cat.root._, 'now');\r\n\t\t\t\t\t(as.ref._).now = true;\r\n\t\t\t\t\t(as.ref._).on('out', {\r\n\t\t\t\t\t\tgun: as.ref, put: as.out = as.env.graph, opt: as.opt, '#': ask\r\n\t\t\t\t\t});\r\n\t\t\t\t\tobj.del((as.ref._), 'now');\r\n\t\t\t\t\tcat.root._.now = tmp;\r\n\t\t\t\t}, as);\r\n\t\t\t\tif(as.res){ as.res() }\r\n\t\t\t} function no(v,f){ if(v){ return true } }\r\n\t\r\n\t\t\tfunction map(v,f,n, at){ var as = this;\r\n\t\t\t\tif(f || !at.path.length){ return }\r\n\t\t\t\t(as.res||iife)(function(){\r\n\t\t\t\t\tvar path = at.path, ref = as.ref, opt = as.opt;\r\n\t\t\t\t\tvar i = 0, l = path.length;\r\n\t\t\t\t\tfor(i; i < l; i++){\r\n\t\t\t\t\t\tref = ref.get(path[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(as.not || Gun.node.soul(at.obj)){\r\n\t\t\t\t\t\tvar id = Gun.node.soul(at.obj) || ((as.opt||{}).uuid || as.gun.back('opt.uuid') || Gun.text.random)();\r\n\t\t\t\t\t\tref.back(-1).get(id);\r\n\t\t\t\t\t\tat.soul(id);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t(as.stun = as.stun || {})[path] = true;\r\n\t\t\t\t\tref.get('_').get(soul, {as: {at: at, as: as}});\r\n\t\t\t\t}, {as: as, at: at});\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction soul(at, ev){ var as = this.as, cat = as.at; as = as.as;\r\n\t\t\t\t//ev.stun(); // TODO: BUG!?\r\n\t\t\t\tif(!at.gun || !at.gun._.back){ return } // TODO: Handle\r\n\t\t\t\tev.off();\r\n\t\t\t\tat = (at.gun._.back._);\r\n\t\t\t\tvar id = Gun.node.soul(cat.obj) || Gun.node.soul(at.put) || Gun.val.rel.is(at.put) || ((as.opt||{}).uuid || as.gun.back('opt.uuid') || Gun.text.random)(); // TODO: BUG!? Do we really want the soul of the object given to us? Could that be dangerous?\r\n\t\t\t\tat.gun.back(-1).get(id);\r\n\t\t\t\tcat.soul(id);\r\n\t\t\t\tas.stun[cat.path] = false;\r\n\t\t\t\tas.batch();\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction any(at, ev){\r\n\t\t\t\tvar as = this.as;\r\n\t\t\t\tif(!at.gun || !at.gun._){ return } // TODO: Handle\r\n\t\t\t\tif(at.err){ // TODO: Handle\r\n\t\t\t\t\tconsole.log(\"Please report this as an issue! Put.any.err\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar cat = (at.gun._.back._), data = cat.put, opt = as.opt||{}, root, tmp;\r\n\t\t\t\tif((tmp = as.ref) && tmp._.now){ return }\r\n\t\t\t\tev.off();\r\n\t\t\t\tif(as.ref !== as.gun){\r\n\t\t\t\t\ttmp = (as.gun._).get || cat.get;\r\n\t\t\t\t\tif(!tmp){ // TODO: Handle\r\n\t\t\t\t\t\tconsole.log(\"Please report this as an issue! Put.no.get\"); // TODO: BUG!??\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tas.data = obj_put({}, tmp, as.data);\r\n\t\t\t\t\ttmp = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(u === data){\r\n\t\t\t\t\tif(!cat.get){ return } // TODO: Handle\r\n\t\t\t\t\tif(!cat.soul){\r\n\t\t\t\t\t\ttmp = cat.gun.back(function(at){\r\n\t\t\t\t\t\t\tif(at.soul){ return at.soul }\r\n\t\t\t\t\t\t\tas.data = obj_put({}, at.get, as.data);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp = tmp || cat.get;\r\n\t\t\t\t\tcat = (cat.root.get(tmp)._);\r\n\t\t\t\t\tas.not = as.soul = tmp;\r\n\t\t\t\t\tdata = as.data;\r\n\t\t\t\t}\r\n\t\t\t\tif(!as.not && !(as.soul = Gun.node.soul(data))){\r\n\t\t\t\t\tif(as.path && obj_is(as.data)){ // Apparently necessary\r\n\t\t\t\t\t\tas.soul = (opt.uuid || cat.root._.opt.uuid || Gun.text.random)();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//as.data = obj_put({}, as.gun._.get, as.data);\r\n\t\t\t\t\t\tas.soul = at.soul || cat.soul || (opt.uuid || cat.root._.opt.uuid || Gun.text.random)();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tas.ref.put(as.data, as.soul, as);\r\n\t\t\t}\r\n\t\t\tvar obj = Gun.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;\r\n\t\t\tvar u, empty = {}, noop = function(){}, iife = function(fn,as){fn.call(as||empty)};\r\n\t\t})(require, './put');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./root');\r\n\t\t\trequire('./opt');\r\n\t\t\trequire('./chain');\r\n\t\t\trequire('./back');\r\n\t\t\trequire('./put');\r\n\t\t\trequire('./get');\r\n\t\t\tmodule.exports = Gun;\r\n\t\t})(require, './index');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./index');\r\n\t\t\tGun.chain.on = function(tag, arg, eas, as){\r\n\t\t\t\tvar gun = this, at = gun._, tmp, act, off;\r\n\t\t\t\tif(typeof tag === 'string'){\r\n\t\t\t\t\tif(!arg){ return at.on(tag) }\r\n\t\t\t\t\tact = at.on(tag, arg, eas || at, as);\r\n\t\t\t\t\tif(eas && eas.gun){\r\n\t\t\t\t\t\t(eas.subs || (eas.subs = [])).push(act);\r\n\t\t\t\t\t}\r\n\t\t\t\t\toff = function() {\r\n\t\t\t\t\t\tif (act && act.off) act.off();\r\n\t\t\t\t\t\toff.off();\r\n\t\t\t\t\t};\r\n\t\t\t\t\toff.off = gun.off.bind(gun) || noop;\r\n\t\t\t\t\tgun.off = off;\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tvar opt = arg;\r\n\t\t\t\topt = (true === opt)? {change: true} : opt || {};\r\n\t\t\t\topt.ok = tag;\r\n\t\t\t\topt.last = {};\r\n\t\t\t\tgun.get(ok, opt); // TODO: PERF! Event listener leak!!!?\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction ok(at, ev){ var opt = this;\r\n\t\t\t\tvar gun = at.gun, cat = gun._, data = cat.put || at.put, tmp = opt.last, id = cat.id+at.get, tmp;\r\n\t\t\t\tif(u === data){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(data && data[rel._] && (tmp = rel.is(data))){\r\n\t\t\t\t\ttmp = (cat.root.get(tmp)._);\r\n\t\t\t\t\tif(u === tmp.put){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata = tmp.put;\r\n\t\t\t\t}\r\n\t\t\t\tif(opt.change){ // TODO: BUG? Move above the undef checks?\r\n\t\t\t\t\tdata = at.put;\r\n\t\t\t\t}\r\n\t\t\t\t// DEDUPLICATE // TODO: NEEDS WORK! BAD PROTOTYPE\r\n\t\t\t\tif(tmp.put === data && tmp.get === id && !Gun.node.soul(data)){ return }\r\n\t\t\t\ttmp.put = data;\r\n\t\t\t\ttmp.get = id;\r\n\t\t\t\t// DEDUPLICATE // TODO: NEEDS WORK! BAD PROTOTYPE\r\n\t\t\t\tcat.last = data;\r\n\t\t\t\tif(opt.as){\r\n\t\t\t\t\topt.ok.call(opt.as, at, ev);\r\n\t\t\t\t} else {\r\n\t\t\t\t\topt.ok.call(gun, data, at.get, at, ev);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tGun.chain.val = function(cb, opt){\r\n\t\t\t\tvar gun = this, at = gun._, data = at.put;\r\n\t\t\t\tif(0 < at.ack && u !== data){\r\n\t\t\t\t\t(cb || noop).call(gun, data, at.get);\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tif(cb){\r\n\t\t\t\t\t(opt = opt || {}).ok = cb;\r\n\t\t\t\t\topt.cat = at;\r\n\t\t\t\t\topt.out = {'#': Gun.text.random(9)};\r\n\t\t\t\t\tgun.get(val, {as: opt});\r\n\t\t\t\t\topt.async = true; //opt.async = at.stun? 1 : true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tGun.log.once(\"valonce\", \"Chainable val is experimental, its behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.\");\r\n\t\t\t\t\tvar chain = gun.chain();\r\n\t\t\t\t\tchain._.val = gun.val(function(){\r\n\t\t\t\t\t\tchain._.on('in', gun._);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn chain;\r\n\t\t\t\t}\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction val(msg, ev, to){\r\n\t\t\t\tvar opt = this.as, cat = opt.cat, gun = msg.gun, coat = gun._, data = coat.put || msg.put, tmp;\r\n\t\t\t\tif(u === data){\r\n\t\t\t\t\t//return;\r\n\t\t\t\t}\r\n\t\t\t\t//if(coat.soul && !(0 < coat.ack)){ return }\r\n\t\t\t\tif(tmp = Gun.node.soul(data) || rel.is(data)){\r\n\t\t\t\t//if(data && data[rel._] && (tmp = rel.is(data))){\r\n\t\t\t\t\ttmp = (cat.root.get(tmp)._);\r\n\t\t\t\t\tif(u === tmp.put){//} || !(0 < tmp.ack)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata = tmp.put;\r\n\t\t\t\t}\r\n\t\t\t\tif(ev.wait){ clearTimeout(ev.wait) }\r\n\t\t\t\t//if(!to && (!(0 < coat.ack) || ((true === opt.async) && 0 !== opt.wait))){\r\n\t\t\t\tif(!to){\r\n\t\t\t\t\tev.wait = setTimeout(function(){\r\n\t\t\t\t\t\tval.call({as:opt}, msg, ev, ev.wait || 1);\r\n\t\t\t\t\t}, opt.wait || 99);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(cat.field || cat.soul){\r\n\t\t\t\t\tif(ev.off()){ return } // if it is already off, don't call again!\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif((opt.seen = opt.seen || {})[coat.id]){ return }\r\n\t\t\t\t\topt.seen[coat.id] = true;\r\n\t\t\t\t}\r\n\t\t\t\topt.ok.call(msg.gun || opt.gun, data, msg.get);\r\n\t\t\t}\r\n\t\r\n\t\t\tGun.chain.off = function(){\r\n\t\t\t\t// make off more aggressive. Warning, it might backfire!\r\n\t\t\t\tvar gun = this, at = gun._, tmp;\r\n\t\t\t\tvar back = at.back || {}, cat = back._;\r\n\t\t\t\tif(!cat){ return }\r\n\t\t\t\tif(tmp = cat.next){\r\n\t\t\t\t\tif(tmp[at.get]){\r\n\t\t\t\t\t\tobj_del(tmp, at.get);\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = cat.ask){\r\n\t\t\t\t\tobj_del(tmp, at.get);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = cat.put){\r\n\t\t\t\t\tobj_del(tmp, at.get);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = at.soul){\r\n\t\t\t\t\tobj_del(cat.root._.graph, tmp);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = at.map){\r\n\t\t\t\t\tobj_map(tmp, function(at){\r\n\t\t\t\t\t\tif(at.rel){\r\n\t\t\t\t\t\t\tcat.root.get(at.rel).off();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = at.next){\r\n\t\t\t\t\tobj_map(tmp, function(ref){\r\n\t\t\t\t\t\tref.off();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tat.on('off', {});\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tvar obj = Gun.obj, obj_map = obj.map, obj_has = obj.has, obj_del = obj.del, obj_to = obj.to;\r\n\t\t\tvar rel = Gun.val.rel;\r\n\t\t\tvar empty = {}, noop = function(){}, u;\r\n\t\t})(require, './on');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./index');\r\n\t\t\tGun.chain.map = function(cb, opt, t){\r\n\t\t\t\tvar gun = this, cat = gun._, chain;\r\n\t\t\t\tif(!cb){\r\n\t\t\t\t\tif(chain = cat.fields){ return chain }\r\n\t\t\t\t\tchain = cat.fields = gun.chain();\r\n\t\t\t\t\tchain._.val = gun.back('val');\r\n\t\t\t\t\tchain._.MAPOF = cat.soul;\r\n\t\t\t\t\tgun.on('in', map, chain._);\r\n\t\t\t\t\treturn chain;\r\n\t\t\t\t}\r\n\t\t\t\tGun.log.once(\"mapfn\", \"Map functions are experimental, their behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.\");\r\n\t\t\t\tchain = gun.chain();\r\n\t\t\t\tgun.map().on(function(data, key, at, ev){\r\n\t\t\t\t\tvar next = (cb||noop).call(this, data, key, at, ev);\r\n\t\t\t\t\tif(u === next){ return }\r\n\t\t\t\t\tif(Gun.is(next)){\r\n\t\t\t\t\t\tchain._.on('in', next._);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchain._.on('in', {get: key, put: next, gun: chain});\r\n\t\t\t\t});\r\n\t\t\t\treturn chain;\r\n\t\t\t}\r\n\t\t\tfunction map(msg){\r\n\t\t\t\tif(!msg.put || Gun.val.is(msg.put)){ return }\r\n\t\t\t\tif(this.as.val){ this.off() } // TODO: Ugly hack!\r\n\t\t\t\tobj_map(msg.put, each, {at: this.as, msg: msg});\r\n\t\t\t\tthis.to.next(msg);\r\n\t\t\t}\r\n\t\t\tfunction each(v,f){\r\n\t\t\t\tif(n_ === f){ return }\r\n\t\t\t\tvar msg = this.msg, gun = msg.gun, at = this.at, tmp = (gun.get(f)._);\r\n\t\t\t\t(tmp.echo || (tmp.echo = {}))[at.id] = at;\r\n\t\t\t}\r\n\t\t\tvar obj_map = Gun.obj.map, noop = function(){}, event = {stun: noop, off: noop}, n_ = Gun.node._, u;\r\n\t\t})(require, './map');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./index');\r\n\t\t\tGun.chain.set = function(item, cb, opt){\r\n\t\t\t\tvar gun = this, soul;\r\n\t\t\t\tcb = cb || function(){};\r\n\t\t\t\topt = opt || {}; opt.item = opt.item || item;\r\n\t\t\t\tif(soul = Gun.node.soul(item)){ return gun.set(gun.back(-1).get(soul), cb, opt) }\r\n\t\t\t\tif(!Gun.is(item)){\r\n\t\t\t\t\tif(Gun.obj.is(item)){ return gun.set(gun._.root.put(item), cb, opt) }\r\n\t\t\t\t\treturn gun.get(gun._.root._.opt.uuid()).put(item);\r\n\t\t\t\t}\r\n\t\t\t\titem.get('_').get(function(at, ev){\r\n\t\t\t\t\tif(!at.gun || !at.gun._.back){ return }\r\n\t\t\t\t\tev.off();\r\n\t\t\t\t\tat = (at.gun._.back._);\r\n\t\t\t\t\tvar put = {}, node = at.put, soul = Gun.node.soul(node);\r\n\t\t\t\t\tif(!soul){ return cb.call(gun, {err: Gun.log('Only a node can be linked! Not \"' + node + '\"!')}) }\r\n\t\t\t\t\tgun.put(Gun.obj.put(put, soul, Gun.val.rel.ify(soul)), cb, opt);\r\n\t\t\t\t},{wait:0});\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t})(require, './set');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tif(typeof Gun === 'undefined'){ return } // TODO: localStorage is Browser only. But it would be nice if it could somehow plugin into NodeJS compatible localStorage APIs?\r\n\t\r\n\t\t\tvar root, noop = function(){}, u;\r\n\t\t\tif(typeof window !== 'undefined'){ root = window }\r\n\t\t\tvar store = root.localStorage || {setItem: noop, removeItem: noop, getItem: noop};\r\n\t\r\n\t\t\t/*\r\n\t\t\t\tNOTE: Both `lib/file.js` and `lib/memdisk.js` are based on this design!\r\n\t\t\t\tIf you update anything here, consider updating the other adapters as well.\r\n\t\t\t*/\r\n\t\r\n\t\t\tGun.on('opt', function(root){\r\n\t\t\t\tthis.to.next(root);\r\n\t\t\t\tvar opt = root.opt;\r\n\t\t\t\tif(root.once){ return }\r\n\t\t\t\tif(false === opt.localStorage){ return }\r\n\t\t\t\topt.file = opt.file || opt.prefix || 'gun/'; // support old option name.\r\n\t\t\t\tvar graph = root.graph, acks = {}, count = 0, to;\r\n\t\t\t\tvar disk = Gun.obj.ify(store.getItem(opt.file)) || {};\r\n\t\t\t\t\r\n\t\t\t\troot.on('put', function(at){\r\n\t\t\t\t\tthis.to.next(at);\r\n\t\t\t\t\tGun.graph.is(at.put, null, map);\r\n\t\t\t\t\tif(!at['@']){ acks[at['#']] = true; } // only ack non-acks.\r\n\t\t\t\t\tcount += 1;\r\n\t\t\t\t\tif(count >= (opt.batch || 1000)){\r\n\t\t\t\t\t\treturn flush();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(to){ return }\r\n\t\t\t\t\tto = setTimeout(flush, opt.wait || 1);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\troot.on('get', function(at){\r\n\t\t\t\t\tthis.to.next(at);\r\n\t\t\t\t\tvar lex = at.get, soul, data, u;\r\n\t\t\t\t\t//setTimeout(function(){\r\n\t\t\t\t\tif(!lex || !(soul = lex[Gun._.soul])){ return }\r\n\t\t\t\t\t//if(0 >= at.cap){ return }\r\n\t\t\t\t\tvar field = lex['.'];\r\n\t\t\t\t\tdata = disk[soul] || u;\r\n\t\t\t\t\tif(data && field){\r\n\t\t\t\t\t\tdata = Gun.state.to(data, field);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!data && !Gun.obj.empty(opt.peers)){ // if data not found, don't ack if there are peers.\r\n\t\t\t\t\t\treturn; // Hmm, what if we have peers but we are disconnected?\r\n\t\t\t\t\t}\r\n\t\t\t\t\troot.on('in', {'@': at['#'], put: Gun.graph.node(data), how: 'lS'});\r\n\t\t\t\t\t//},1);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tvar map = function(val, key, node, soul){\r\n\t\t\t\t\tdisk[soul] = Gun.state.to(node, key, disk[soul]);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar flush = function(){\r\n\t\t\t\t\tvar err;\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t\tclearTimeout(to);\r\n\t\t\t\t\tto = false;\r\n\t\t\t\t\tvar ack = acks;\r\n\t\t\t\t\tacks = {};\r\n\t\t\t\t\ttry{store.setItem(opt.file, JSON.stringify(disk));\r\n\t\t\t\t\t}catch(e){ Gun.log(err = e || \"localStorage failure\") }\r\n\t\t\t\t\tif(!err && !Gun.obj.empty(opt.peers)){ return } // only ack if there are no peers.\r\n\t\t\t\t\tGun.obj.map(ack, function(yes, id){\r\n\t\t\t\t\t\troot.on('in', {\r\n\t\t\t\t\t\t\t'@': id,\r\n\t\t\t\t\t\t\terr: err,\r\n\t\t\t\t\t\t\tok: 0 // localStorage isn't reliable, so make its `ok` code be a low number.\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t})(require, './adapters/localStorage');\r\n\t\r\n\t\t;require(function(module){\r\n\t\t\tvar Gun = require('./index');\r\n\t\t\tvar websocket;\r\n\t\t\tif(typeof WebSocket !== 'undefined'){\r\n\t\t\t\twebsocket = WebSocket;\r\n\t\t\t} else {\r\n\t\t\t\tif(typeof webkitWebSocket !== 'undefined'){\r\n\t\t\t\t\twebsocket = webkitWebSocket;\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof mozWebSocket !== 'undefined'){\r\n\t\t\t\t\twebsocket = mozWebSocket;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tGun.on('opt', function(root){\r\n\t\t\t\tthis.to.next(root);\r\n\t\t\t\tvar opt = root.opt;\r\n\t\t\t\tif(root.once){ return }\r\n\t\t\t\tif(!websocket || false === opt.WebSocket){ return }\r\n\t\t\t\tvar ws = opt.ws || (opt.ws = {}); ws.who = 0;\r\n\t\t\t\tGun.obj.map(opt.peers, function(){ ++ws.who });\r\n\t\t\t\tif(root.once){ return }\r\n\t\t\t\tvar batch;\r\n\t\r\n\t\t\t\troot.on('out', function(at){\r\n\t\t\t\t\tthis.to.next(at);\r\n\t\t\t\t\tif(at.ws && 1 == ws.who){ return } // performance hack for reducing echoes.\r\n\t\t\t\t\tbatch = JSON.stringify(at);\r\n\t\t\t\t\tif(ws.drain){\r\n\t\t\t\t\t\tws.drain.push(batch);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tws.drain = [];\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\tif(!ws.drain){ return }\r\n\t\t\t\t\t\tvar tmp = ws.drain;\r\n\t\t\t\t\t\tws.drain = null;\r\n\t\t\t\t\t\tif(!tmp.length){ return }\r\n\t\t\t\t\t\tbatch = JSON.stringify(tmp);\r\n\t\t\t\t\t\tGun.obj.map(opt.peers, send, root);\r\n\t\t\t\t\t}, opt.wait || 1);\r\n\t\t\t\t\tGun.obj.map(opt.peers, send, root);\r\n\t\t\t\t});\r\n\t\t\t\tfunction send(peer){\r\n\t\t\t\t\tvar root = this, msg = batch;\r\n\t\t\t\t\tvar wire = peer.wire || open(peer, root);\r\n\t\t\t\t\tif(!wire){ return }\r\n\t\t\t\t\tif(wire.readyState === wire.OPEN){\r\n\t\t\t\t\t\twire.send(msg);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t(peer.queue = peer.queue || []).push(msg);\r\n\t\t\t\t}\r\n\t\t\t\tfunction receive(msg, peer, root){\r\n\t\t\t\t\tif(!root || !msg){ return }\r\n\t\t\t\t\ttry{msg = JSON.parse(msg.data || msg);\r\n\t\t\t\t\t}catch(e){}\r\n\t\t\t\t\tif(msg instanceof Array){\r\n\t\t\t\t\t\tvar i = 0, m;\r\n\t\t\t\t\t\twhile(m = msg[i++]){\r\n\t\t\t\t\t\t\treceive(m, peer, root);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(1 == ws.who){ msg.ws = noop } // If there is only 1 client, just use noop since it doesn't matter.\r\n\t\t\t\t\troot.on('in', msg);\r\n\t\t\t\t}\r\n\t\t\t\tfunction open(peer, as){\r\n\t\t\t\t\tif(!peer || !peer.url){ return }\r\n\t\t\t\t\tvar url = peer.url.replace('http', 'ws');\r\n\t\t\t\t\tvar wire = peer.wire = new websocket(url);\r\n\t\t\t\t\twire.onclose = function(){\r\n\t\t\t\t\t\troot.on('bye', peer);\r\n\t\t\t\t\t\treconnect(peer, as);\r\n\t\t\t\t\t};\r\n\t\t\t\t\twire.onerror = function(error){\r\n\t\t\t\t\t\treconnect(peer, as); // placement?\r\n\t\t\t\t\t\tif(!error){ return }\r\n\t\t\t\t\t\tif(error.code === 'ECONNREFUSED'){\r\n\t\t\t\t\t\t\t//reconnect(peer, as);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\twire.onopen = function(){\r\n\t\t\t\t\t\troot.on('hi', peer);\r\n\t\t\t\t\t\tvar queue = peer.queue;\r\n\t\t\t\t\t\tpeer.queue = [];\r\n\t\t\t\t\t\tGun.obj.map(queue, function(msg){\r\n\t\t\t\t\t\t\tbatch = msg;\r\n\t\t\t\t\t\t\tsend.call(as, peer);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\twire.onmessage = function(msg){\r\n\t\t\t\t\t\treceive(msg, peer, as); // diff: peer not wire!\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn wire;\r\n\t\t\t\t}\r\n\t\t\t\tfunction reconnect(peer, as){\r\n\t\t\t\t\tclearTimeout(peer.defer);\r\n\t\t\t\t\tpeer.defer = setTimeout(function(){\r\n\t\t\t\t\t\topen(peer, as);\r\n\t\t\t\t\t}, 2 * 1000);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar noop = function(){};\r\n\t\t})(require, './adapters/websocket');\r\n\t\r\n\t}());\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(69)(module)))\n\n/***/ }),\n\n/***/ 970:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  (global.Immutable = factory());\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step !== 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n\t      return emptyMap().withMutations(function(map ) {\n\t        for (var i = 0; i < keyValues.length; i += 2) {\n\t          if (i + 1 >= keyValues.length) {\n\t            throw new Error('Missing value for key: ' + keyValues[i]);\n\t          }\n\t          map.set(keyValues[i], keyValues[i + 1]);\n\t        }\n\t      });\n\t    };\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      if (this._map && !this._map.has(k)) {\n\t        var defaultVal = this._defaultValues[k];\n\t        if (v === defaultVal) {\n\t          return this;\n\t        }\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ }),\n\n/***/ 613:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\t__webpack_require__(1205);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Clap = function Clap(_ref) {\n\t  var title = _ref.title,\n\t      countTotal = _ref.countTotal;\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'clap-analytics row' },\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'col-10' },\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        title\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'col' },\n\t      _react2.default.createElement(\n\t        'p',\n\t        null,\n\t        countTotal\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\texports.default = Clap;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1205:\n/***/ (function(module, exports) {\n\n\t// empty (null-loader)\n\n/***/ }),\n\n/***/ 614:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Clap = __webpack_require__(613);\n\t\n\tvar _Clap2 = _interopRequireDefault(_Clap);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Analytics = function Analytics(_ref) {\n\t  var data = _ref.data;\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'container' },\n\t    data.map(function (clap) {\n\t      return _react2.default.createElement(_Clap2.default, {\n\t        title: clap.title,\n\t        countTotal: clap.countTotal,\n\t        key: clap.title\n\t      });\n\t    })\n\t  );\n\t};\n\t\n\texports.default = Analytics;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 624:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _classCallCheck2 = __webpack_require__(13);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(16);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(15);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar NameForm = function (_Component) {\n\t  (0, _inherits3.default)(NameForm, _Component);\n\t\n\t  function NameForm(props) {\n\t    (0, _classCallCheck3.default)(this, NameForm);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\t\n\t    _this.state = { name: '' };\n\t    _this.gun = _this.props.gun;\n\t    return _this;\n\t  }\n\t\n\t  NameForm.prototype.handleChange = function handleChange(event) {\n\t    this.setState({ name: event.target.value });\n\t  };\n\t\n\t  NameForm.prototype.handleSubmit = function handleSubmit(event) {\n\t    event.preventDefault();\n\t    this.gun.get('username').put({\n\t      name: this.state.name\n\t    }, function (ack) {\n\t      if (ack.err) {\n\t        console.error(ack.err);\n\t      }\n\t    });\n\t  };\n\t\n\t  NameForm.prototype.render = function render() {\n\t    var _this2 = this;\n\t\n\t    return _react2.default.createElement(\n\t      'form',\n\t      { onSubmit: function onSubmit(e) {\n\t          return _this2.handleSubmit(e);\n\t        } },\n\t      _react2.default.createElement(\n\t        'label',\n\t        null,\n\t        'Name:',\n\t        _react2.default.createElement('input', {\n\t          type: 'text',\n\t          value: this.state.value,\n\t          onChange: function onChange(e) {\n\t            return _this2.handleChange(e);\n\t          }\n\t        })\n\t      ),\n\t      _react2.default.createElement('input', { type: 'submit', value: 'Submit' })\n\t    );\n\t  };\n\t\n\t  return NameForm;\n\t}(_react.Component);\n\t\n\texports.default = NameForm;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 640:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends2 = __webpack_require__(48);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _classCallCheck2 = __webpack_require__(13);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(16);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(15);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _immutable = __webpack_require__(970);\n\t\n\tvar _api = __webpack_require__(43);\n\t\n\tvar _Analytics = __webpack_require__(614);\n\t\n\tvar _Analytics2 = _interopRequireDefault(_Analytics);\n\t\n\tvar _NameForm = __webpack_require__(624);\n\t\n\tvar _NameForm2 = _interopRequireDefault(_NameForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Gun = (0, _api.isBrowser)() ? __webpack_require__(960) : function () {\n\t  return 0;\n\t};\n\t\n\tvar getData = function getData(map) {\n\t  return map.valueSeq().filter(function (x) {\n\t    return x.title && x.countTotal;\n\t  });\n\t};\n\t\n\tvar GunPage = function (_Component) {\n\t  (0, _inherits3.default)(GunPage, _Component);\n\t\n\t  function GunPage(props) {\n\t    (0, _classCallCheck3.default)(this, GunPage);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\t\n\t    _this.gun = Gun('https://gun-ndbtgvyfxy.now.sh/gun');\n\t    _this.state = {\n\t      name: '',\n\t      map: (0, _immutable.Map)()\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  GunPage.prototype.componentDidMount = function componentDidMount() {\n\t    this.update();\n\t  };\n\t\n\t  GunPage.prototype.update = function update() {\n\t    var _this2 = this;\n\t\n\t    this.gun.get('username').on(function (data) {\n\t      _this2.setState({ name: data.name });\n\t    });\n\t\n\t    // Get the value of each post\n\t    this.gun.get('posts').map().on(function (post, id) {\n\t      _this2.setState(function (prevState) {\n\t        return (0, _extends3.default)({}, prevState, {\n\t          map: prevState.map.set(id, post)\n\t        });\n\t      });\n\t    });\n\t  };\n\t\n\t  GunPage.prototype.render = function render() {\n\t    var _state = this.state,\n\t        name = _state.name,\n\t        map = _state.map;\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      { className: 'container' },\n\t      _react2.default.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        _react2.default.createElement(\n\t          'div',\n\t          { className: 'col' },\n\t          _react2.default.createElement(\n\t            'h2',\n\t            null,\n\t            'Gun Demo Page'\n\t          ),\n\t          _react2.default.createElement(_NameForm2.default, { gun: this.gun, name: this.name }),\n\t          _react2.default.createElement(\n\t            'div',\n\t            null,\n\t            'Your name: ',\n\t            name\n\t          )\n\t        )\n\t      ),\n\t      _react2.default.createElement(\n\t        'h3',\n\t        null,\n\t        'Posts'\n\t      ),\n\t      _react2.default.createElement(_Analytics2.default, { data: getData(map) })\n\t    );\n\t  };\n\t\n\t  return GunPage;\n\t}(_react.Component);\n\t\n\texports.default = GunPage;\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-demo-gun-index-js-309a5a443cb98e13f7d8.js",";(function(){\r\n\r\n\t/* UNBUILD */\r\n\tvar root;\r\n\tif(typeof window !== \"undefined\"){ root = window }\r\n\tif(typeof global !== \"undefined\"){ root = global }\r\n\troot = root || {};\r\n\tvar console = root.console || {log: function(){}};\r\n\tfunction require(arg){\r\n\t\treturn arg.slice? require[resolve(arg)] : function(mod, path){\r\n\t\t\targ(mod = {exports: {}});\r\n\t\t\trequire[resolve(path)] = mod.exports;\r\n\t\t}\r\n\t\tfunction resolve(path){\r\n\t\t\treturn path.split('/').slice(-1).toString().replace('.js','');\r\n\t\t}\r\n\t}\r\n\tif(typeof module !== \"undefined\"){ var common = module }\r\n\t/* UNBUILD */\r\n\r\n\t;require(function(module){\r\n\t\t// Generic javascript utilities.\r\n\t\tvar Type = {};\r\n\t\t//Type.fns = Type.fn = {is: function(fn){ return (!!fn && fn instanceof Function) }}\r\n\t\tType.fns = Type.fn = {is: function(fn){ return (!!fn && 'function' == typeof fn) }}\r\n\t\tType.bi = {is: function(b){ return (b instanceof Boolean || typeof b == 'boolean') }}\r\n\t\tType.num = {is: function(n){ return !list_is(n) && ((n - parseFloat(n) + 1) >= 0 || Infinity === n || -Infinity === n) }}\r\n\t\tType.text = {is: function(t){ return (typeof t == 'string') }}\r\n\t\tType.text.ify = function(t){\r\n\t\t\tif(Type.text.is(t)){ return t }\r\n\t\t\tif(typeof JSON !== \"undefined\"){ return JSON.stringify(t) }\r\n\t\t\treturn (t && t.toString)? t.toString() : t;\r\n\t\t}\r\n\t\tType.text.random = function(l, c){\r\n\t\t\tvar s = '';\r\n\t\t\tl = l || 24; // you are not going to make a 0 length random number, so no need to check type\r\n\t\t\tc = c || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXZabcdefghijklmnopqrstuvwxyz';\r\n\t\t\twhile(l > 0){ s += c.charAt(Math.floor(Math.random() * c.length)); l-- }\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\tType.text.match = function(t, o){ var r = false;\r\n\t\t\tt = t || '';\r\n\t\t\to = Type.text.is(o)? {'=': o} : o || {}; // {'~', '=', '*', '<', '>', '+', '-', '?', '!'} // ignore case, exactly equal, anything after, lexically larger, lexically lesser, added in, subtacted from, questionable fuzzy match, and ends with.\r\n\t\t\tif(Type.obj.has(o,'~')){ t = t.toLowerCase(); o['='] = (o['='] || o['~']).toLowerCase() }\r\n\t\t\tif(Type.obj.has(o,'=')){ return t === o['='] }\r\n\t\t\tif(Type.obj.has(o,'*')){ if(t.slice(0, o['*'].length) === o['*']){ r = true; t = t.slice(o['*'].length) } else { return false }}\r\n\t\t\tif(Type.obj.has(o,'!')){ if(t.slice(-o['!'].length) === o['!']){ r = true } else { return false }}\r\n\t\t\tif(Type.obj.has(o,'+')){\r\n\t\t\t\tif(Type.list.map(Type.list.is(o['+'])? o['+'] : [o['+']], function(m){\r\n\t\t\t\t\tif(t.indexOf(m) >= 0){ r = true } else { return true }\r\n\t\t\t\t})){ return false }\r\n\t\t\t}\r\n\t\t\tif(Type.obj.has(o,'-')){\r\n\t\t\t\tif(Type.list.map(Type.list.is(o['-'])? o['-'] : [o['-']], function(m){\r\n\t\t\t\t\tif(t.indexOf(m) < 0){ r = true } else { return true }\r\n\t\t\t\t})){ return false }\r\n\t\t\t}\r\n\t\t\tif(Type.obj.has(o,'>')){ if(t > o['>']){ r = true } else { return false }}\r\n\t\t\tif(Type.obj.has(o,'<')){ if(t < o['<']){ r = true } else { return false }}\r\n\t\t\tfunction fuzzy(t,f){ var n = -1, i = 0, c; for(;c = f[i++];){ if(!~(n = t.indexOf(c, n+1))){ return false }} return true } // via http://stackoverflow.com/questions/9206013/javascript-fuzzy-search\r\n\t\t\tif(Type.obj.has(o,'?')){ if(fuzzy(t, o['?'])){ r = true } else { return false }} // change name!\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tType.list = {is: function(l){ return (l instanceof Array) }}\r\n\t\tType.list.slit = Array.prototype.slice;\r\n\t\tType.list.sort = function(k){ // creates a new sort function based off some field\r\n\t\t\treturn function(A,B){\r\n\t\t\t\tif(!A || !B){ return 0 } A = A[k]; B = B[k];\r\n\t\t\t\tif(A < B){ return -1 }else if(A > B){ return 1 }\r\n\t\t\t\telse { return 0 }\r\n\t\t\t}\r\n\t\t}\r\n\t\tType.list.map = function(l, c, _){ return obj_map(l, c, _) }\r\n\t\tType.list.index = 1; // change this to 0 if you want non-logical, non-mathematical, non-matrix, non-convenient array notation\r\n\t\tType.obj = {is: function(o){ return o? (o instanceof Object && o.constructor === Object) || Object.prototype.toString.call(o).match(/^\\[object (\\w+)\\]$/)[1] === 'Object' : false }}\r\n\t\tType.obj.put = function(o, f, v){ return (o||{})[f] = v, o }\r\n\t\tType.obj.has = function(o, f){ return o && Object.prototype.hasOwnProperty.call(o, f) }\r\n\t\tType.obj.del = function(o, k){\r\n\t\t\tif(!o){ return }\r\n\t\t\to[k] = null;\r\n\t\t\tdelete o[k];\r\n\t\t\treturn o;\r\n\t\t}\r\n\t\tType.obj.as = function(o, f, v, u){ return o[f] = o[f] || (u === v? {} : v) }\r\n\t\tType.obj.ify = function(o){\r\n\t\t\tif(obj_is(o)){ return o }\r\n\t\t\ttry{o = JSON.parse(o);\r\n\t\t\t}catch(e){o={}};\r\n\t\t\treturn o;\r\n\t\t}\r\n\t\t;(function(){ var u;\r\n\t\t\tfunction map(v,f){\r\n\t\t\t\tif(obj_has(this,f) && u !== this[f]){ return }\r\n\t\t\t\tthis[f] = v;\r\n\t\t\t}\r\n\t\t\tType.obj.to = function(from, to){\r\n\t\t\t\tto = to || {};\r\n\t\t\t\tobj_map(from, map, to);\r\n\t\t\t\treturn to;\r\n\t\t\t}\r\n\t\t}());\r\n\t\tType.obj.copy = function(o){ // because http://web.archive.org/web/20140328224025/http://jsperf.com/cloning-an-object/2\r\n\t\t\treturn !o? o : JSON.parse(JSON.stringify(o)); // is shockingly faster than anything else, and our data has to be a subset of JSON anyways!\r\n\t\t}\r\n\t\t;(function(){\r\n\t\t\tfunction empty(v,i){ var n = this.n;\r\n\t\t\t\tif(n && (i === n || (obj_is(n) && obj_has(n, i)))){ return }\r\n\t\t\t\tif(i){ return true }\r\n\t\t\t}\r\n\t\t\tType.obj.empty = function(o, n){\r\n\t\t\t\tif(!o){ return true }\r\n\t\t\t\treturn obj_map(o,empty,{n:n})? false : true;\r\n\t\t\t}\r\n\t\t}());\r\n\t\t;(function(){\r\n\t\t\tfunction t(k,v){\r\n\t\t\t\tif(2 === arguments.length){\r\n\t\t\t\t\tt.r = t.r || {};\r\n\t\t\t\t\tt.r[k] = v;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} t.r = t.r || [];\r\n\t\t\t\tt.r.push(k);\r\n\t\t\t};\r\n\t\t\tvar keys = Object.keys;\r\n\t\t\tType.obj.map = function(l, c, _){\r\n\t\t\t\tvar u, i = 0, x, r, ll, lle, f = fn_is(c);\r\n\t\t\t\tt.r = null;\r\n\t\t\t\tif(keys && obj_is(l)){\r\n\t\t\t\t\tll = keys(l); lle = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(list_is(l) || ll){\r\n\t\t\t\t\tx = (ll || l).length;\r\n\t\t\t\t\tfor(;i < x; i++){\r\n\t\t\t\t\t\tvar ii = (i + Type.list.index);\r\n\t\t\t\t\t\tif(f){\r\n\t\t\t\t\t\t\tr = lle? c.call(_ || this, l[ll[i]], ll[i], t) : c.call(_ || this, l[i], ii, t);\r\n\t\t\t\t\t\t\tif(r !== u){ return r }\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//if(Type.test.is(c,l[i])){ return ii } // should implement deep equality testing!\r\n\t\t\t\t\t\t\tif(c === l[lle? ll[i] : i]){ return ll? ll[i] : ii } // use this for now\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor(i in l){\r\n\t\t\t\t\t\tif(f){\r\n\t\t\t\t\t\t\tif(obj_has(l,i)){\r\n\t\t\t\t\t\t\t\tr = _? c.call(_, l[i], i, t) : c(l[i], i, t);\r\n\t\t\t\t\t\t\t\tif(r !== u){ return r }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//if(a.test.is(c,l[i])){ return i } // should implement deep equality testing!\r\n\t\t\t\t\t\t\tif(c === l[i]){ return i } // use this for now\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn f? t.r : Type.list.index? 0 : -1;\r\n\t\t\t}\r\n\t\t}());\r\n\t\tType.time = {};\r\n\t\tType.time.is = function(t){ return t? t instanceof Date : (+new Date().getTime()) }\r\n\r\n\t\tvar fn_is = Type.fn.is;\r\n\t\tvar list_is = Type.list.is;\r\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_has = obj.has, obj_map = obj.map;\r\n\t\tmodule.exports = Type;\r\n\t})(require, './type');\r\n\r\n\t;require(function(module){\r\n\t\t// On event emitter generic javascript utility.\r\n\t\tmodule.exports = function onto(tag, arg, as){\r\n\t\t\tif(!tag){ return {to: onto} }\r\n\t\t\tvar tag = (this.tag || (this.tag = {}))[tag] ||\r\n\t\t\t(this.tag[tag] = {tag: tag, to: onto._ = {\r\n\t\t\t\tnext: function(){}\r\n\t\t\t}});\r\n\t\t\tif(arg instanceof Function){\r\n\t\t\t\tvar be = {\r\n\t\t\t\t\toff: onto.off || \r\n\t\t\t\t\t(onto.off = function(){\r\n\t\t\t\t\t\tif(this.next === onto._.next){ return !0 }\r\n\t\t\t\t\t\tif(this === this.the.last){\r\n\t\t\t\t\t\t\tthis.the.last = this.back;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.to.back = this.back;\r\n\t\t\t\t\t\tthis.next = onto._.next;\r\n\t\t\t\t\t\tthis.back.to = this.to;\r\n\t\t\t\t\t\tif(this.the.last === this.the){\r\n\t\t\t\t\t\t\tdelete this.on.tag[this.the.tag];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tto: onto._,\r\n\t\t\t\t\tnext: arg,\r\n\t\t\t\t\tthe: tag,\r\n\t\t\t\t\ton: this,\r\n\t\t\t\t\tas: as,\r\n\t\t\t\t};\r\n\t\t\t\t(be.back = tag.last || tag).to = be;\r\n\t\t\t\treturn tag.last = be;\r\n\t\t\t}\r\n\t\t\t(tag = tag.to).next(arg);\r\n\t\t\treturn tag;\r\n\t\t};\r\n\t})(require, './onto');\r\n\r\n\t;require(function(module){\r\n\t\t/* Based on the Hypothetical Amnesia Machine thought experiment */\r\n\t\tfunction HAM(machineState, incomingState, currentState, incomingValue, currentValue){\r\n\t\t\tif(machineState < incomingState){\r\n\t\t\t\treturn {defer: true}; // the incoming value is outside the boundary of the machine's state, it must be reprocessed in another state.\r\n\t\t\t}\r\n\t\t\tif(incomingState < currentState){\r\n\t\t\t\treturn {historical: true}; // the incoming value is within the boundary of the machine's state, but not within the range.\r\n\r\n\t\t\t}\r\n\t\t\tif(currentState < incomingState){\r\n\t\t\t\treturn {converge: true, incoming: true}; // the incoming value is within both the boundary and the range of the machine's state.\r\n\r\n\t\t\t}\r\n\t\t\tif(incomingState === currentState){\r\n\t\t\t\tincomingValue = Lexical(incomingValue) || \"\";\r\n\t\t\t\tcurrentValue = Lexical(currentValue) || \"\";\r\n\t\t\t\tif(incomingValue === currentValue){ // Note: while these are practically the same, the deltas could be technically different\r\n\t\t\t\t\treturn {state: true};\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t\tThe following is a naive implementation, but will always work.\r\n\t\t\t\t\tNever change it unless you have specific needs that absolutely require it.\r\n\t\t\t\t\tIf changed, your data will diverge unless you guarantee every peer's algorithm has also been changed to be the same.\r\n\t\t\t\t\tAs a result, it is highly discouraged to modify despite the fact that it is naive,\r\n\t\t\t\t\tbecause convergence (data integrity) is generally more important.\r\n\t\t\t\t\tAny difference in this algorithm must be given a new and different name.\r\n\t\t\t\t*/\r\n\t\t\t\tif(incomingValue < currentValue){ // Lexical only works on simple value types!\r\n\t\t\t\t\treturn {converge: true, current: true};\r\n\t\t\t\t}\r\n\t\t\t\tif(currentValue < incomingValue){ // Lexical only works on simple value types!\r\n\t\t\t\t\treturn {converge: true, incoming: true};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {err: \"Invalid CRDT Data: \"+ incomingValue +\" to \"+ currentValue +\" at \"+ incomingState +\" to \"+ currentState +\"!\"};\r\n\t\t}\r\n\t\tif(typeof JSON === 'undefined'){\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'JSON is not included in this browser. Please load it first: ' +\r\n\t\t\t\t'ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js'\r\n\t\t\t);\r\n\t\t}\r\n\t\tvar Lexical = JSON.stringify, undefined;\r\n\t\tmodule.exports = HAM;\r\n\t})(require, './HAM');\r\n\r\n\t;require(function(module){\r\n\t\tvar Type = require('./type');\r\n\t\tvar Val = {};\r\n\t\tVal.is = function(v){ // Valid values are a subset of JSON: null, binary, number (!Infinity), text, or a soul relation. Arrays need special algorithms to handle concurrency, so they are not supported directly. Use an extension that supports them if needed but research their problems first.\r\n\t\t\tif(v === u){ return false }\r\n\t\t\tif(v === null){ return true } // \"deletes\", nulling out fields.\r\n\t\t\tif(v === Infinity){ return false } // we want this to be, but JSON does not support it, sad face.\r\n\t\t\tif(text_is(v) // by \"text\" we mean strings.\r\n\t\t\t|| bi_is(v) // by \"binary\" we mean boolean.\r\n\t\t\t|| num_is(v)){ // by \"number\" we mean integers or decimals. \r\n\t\t\t\treturn true; // simple values are valid.\r\n\t\t\t}\r\n\t\t\treturn Val.rel.is(v) || false; // is the value a soul relation? Then it is valid and return it. If not, everything else remaining is an invalid data type. Custom extensions can be built on top of these primitives to support other types.\r\n\t\t}\r\n\t\tVal.rel = {_: '#'};\r\n\t\t;(function(){\r\n\t\t\tVal.rel.is = function(v){ // this defines whether an object is a soul relation or not, they look like this: {'#': 'UUID'}\r\n\t\t\t\tif(v && v[rel_] && !v._ && obj_is(v)){ // must be an object.\r\n\t\t\t\t\tvar o = {};\r\n\t\t\t\t\tobj_map(v, map, o);\r\n\t\t\t\t\tif(o.id){ // a valid id was found.\r\n\t\t\t\t\t\treturn o.id; // yay! Return it.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false; // the value was not a valid soul relation.\r\n\t\t\t}\r\n\t\t\tfunction map(s, f){ var o = this; // map over the object...\r\n\t\t\t\tif(o.id){ return o.id = false } // if ID is already defined AND we're still looping through the object, it is considered invalid.\r\n\t\t\t\tif(f == rel_ && text_is(s)){ // the field should be '#' and have a text value.\r\n\t\t\t\t\to.id = s; // we found the soul!\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn o.id = false; // if there exists anything else on the object that isn't the soul, then it is considered invalid.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}());\r\n\t\tVal.rel.ify = function(t){ return obj_put({}, rel_, t) } // convert a soul into a relation and return it.\r\n\t\tvar rel_ = Val.rel._, u;\r\n\t\tvar bi_is = Type.bi.is;\r\n\t\tvar num_is = Type.num.is;\r\n\t\tvar text_is = Type.text.is;\r\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;\r\n\t\tmodule.exports = Val;\r\n\t})(require, './val');\r\n\r\n\t;require(function(module){\r\n\t\tvar Type = require('./type');\r\n\t\tvar Val = require('./val');\r\n\t\tvar Node = {_: '_'};\r\n\t\tNode.soul = function(n, o){ return (n && n._ && n._[o || soul_]) } // convenience function to check to see if there is a soul on a node and return it.\r\n\t\tNode.soul.ify = function(n, o){ // put a soul on an object.\r\n\t\t\to = (typeof o === 'string')? {soul: o} : o || {};\r\n\t\t\tn = n || {}; // make sure it exists.\r\n\t\t\tn._ = n._ || {}; // make sure meta exists.\r\n\t\t\tn._[soul_] = o.soul || n._[soul_] || text_random(); // put the soul on it.\r\n\t\t\treturn n;\r\n\t\t}\r\n\t\tNode.soul._ = Val.rel._;\r\n\t\t;(function(){\r\n\t\t\tNode.is = function(n, cb, as){ var s; // checks to see if an object is a valid node.\r\n\t\t\t\tif(!obj_is(n)){ return false } // must be an object.\r\n\t\t\t\tif(s = Node.soul(n)){ // must have a soul on it.\r\n\t\t\t\t\treturn !obj_map(n, map, {as:as,cb:cb,s:s,n:n});\r\n\t\t\t\t}\r\n\t\t\t\treturn false; // nope! This was not a valid node.\r\n\t\t\t}\r\n\t\t\tfunction map(v, f){ // we invert this because the way we check for this is via a negation.\r\n\t\t\t\tif(f === Node._){ return } // skip over the metadata.\r\n\t\t\t\tif(!Val.is(v)){ return true } // it is true that this is an invalid node.\r\n\t\t\t\tif(this.cb){ this.cb.call(this.as, v, f, this.n, this.s) } // optionally callback each field/value.\r\n\t\t\t}\r\n\t\t}());\r\n\t\t;(function(){\r\n\t\t\tNode.ify = function(obj, o, as){ // returns a node from a shallow object.\r\n\t\t\t\tif(!o){ o = {} }\r\n\t\t\t\telse if(typeof o === 'string'){ o = {soul: o} }\r\n\t\t\t\telse if(o instanceof Function){ o = {map: o} }\r\n\t\t\t\tif(o.map){ o.node = o.map.call(as, obj, u, o.node || {}) }\r\n\t\t\t\tif(o.node = Node.soul.ify(o.node || {}, o)){\r\n\t\t\t\t\tobj_map(obj, map, {o:o,as:as});\r\n\t\t\t\t}\r\n\t\t\t\treturn o.node; // This will only be a valid node if the object wasn't already deep!\r\n\t\t\t}\r\n\t\t\tfunction map(v, f){ var o = this.o, tmp, u; // iterate over each field/value.\r\n\t\t\t\tif(o.map){\r\n\t\t\t\t\ttmp = o.map.call(this.as, v, ''+f, o.node);\r\n\t\t\t\t\tif(u === tmp){\r\n\t\t\t\t\t\tobj_del(o.node, f);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\tif(o.node){ o.node[f] = tmp }\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(Val.is(v)){\r\n\t\t\t\t\to.node[f] = v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}());\r\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_map = obj.map;\r\n\t\tvar text = Type.text, text_random = text.random;\r\n\t\tvar soul_ = Node.soul._;\r\n\t\tvar u;\r\n\t\tmodule.exports = Node;\r\n\t})(require, './node');\r\n\r\n\t;require(function(module){\r\n\t\tvar Type = require('./type');\r\n\t\tvar Node = require('./node');\r\n\t\tfunction State(){\r\n\t\t\tvar t;\r\n\t\t\tif(perf){\r\n\t\t\t\tt = start + perf.now();\r\n\t\t\t} else {\r\n\t\t\t\tt = time();\r\n\t\t\t}\r\n\t\t\tif(last < t){\r\n\t\t\t\treturn N = 0, last = t + State.drift;\r\n\t\t\t}\r\n\t\t\treturn last = t + ((N += 1) / D) + State.drift;\r\n\t\t}\r\n\t\tvar time = Type.time.is, last = -Infinity, N = 0, D = 1000; // WARNING! In the future, on machines that are D times faster than 2016AD machines, you will want to increase D by another several orders of magnitude so the processing speed never out paces the decimal resolution (increasing an integer effects the state accuracy).\r\n\t\tvar perf = (typeof performance !== 'undefined')? (performance.timing && performance) : false, start = (perf && perf.timing && perf.timing.navigationStart) || (perf = false);\r\n\t\tState._ = '>';\r\n\t\tState.drift = 0;\r\n\t\tState.is = function(n, f, o){ // convenience function to get the state on a field on a node and return it.\r\n\t\t\tvar tmp = (f && n && n[N_] && n[N_][State._]) || o;\r\n\t\t\tif(!tmp){ return }\r\n\t\t\treturn num_is(tmp = tmp[f])? tmp : -Infinity;\r\n\t\t}\r\n\t\tState.ify = function(n, f, s, v, soul){ // put a field's state on a node.\r\n\t\t\tif(!n || !n[N_]){ // reject if it is not node-like.\r\n\t\t\t\tif(!soul){ // unless they passed a soul\r\n\t\t\t\t\treturn; \r\n\t\t\t\t}\r\n\t\t\t\tn = Node.soul.ify(n, soul); // then make it so!\r\n\t\t\t} \r\n\t\t\tvar tmp = obj_as(n[N_], State._); // grab the states data.\r\n\t\t\tif(u !== f && f !== N_){\r\n\t\t\t\tif(num_is(s)){\r\n\t\t\t\t\ttmp[f] = s; // add the valid state.\r\n\t\t\t\t}\r\n\t\t\t\tif(u !== v){ // Note: Not its job to check for valid values!\r\n\t\t\t\t\tn[f] = v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n;\r\n\t\t}\r\n\t\tState.to = function(from, f, to){\r\n\t\t\tvar val = from[f];\r\n\t\t\tif(obj_is(val)){\r\n\t\t\t\tval = obj_copy(val);\r\n\t\t\t}\r\n\t\t\treturn State.ify(to, f, State.is(from, f), val, Node.soul(from));\r\n\t\t}\r\n\t\t;(function(){\r\n\t\t\tState.map = function(cb, s, as){ var u; // for use with Node.ify\r\n\t\t\t\tvar o = obj_is(o = cb || s)? o : null;\r\n\t\t\t\tcb = fn_is(cb = cb || s)? cb : null;\r\n\t\t\t\tif(o && !cb){\r\n\t\t\t\t\ts = num_is(s)? s : State();\r\n\t\t\t\t\to[N_] = o[N_] || {};\r\n\t\t\t\t\tobj_map(o, map, {o:o,s:s});\r\n\t\t\t\t\treturn o;\r\n\t\t\t\t}\r\n\t\t\t\tas = as || obj_is(s)? s : u;\r\n\t\t\t\ts = num_is(s)? s : State();\r\n\t\t\t\treturn function(v, f, o, opt){\r\n\t\t\t\t\tif(!cb){\r\n\t\t\t\t\t\tmap.call({o: o, s: s}, v,f);\r\n\t\t\t\t\t\treturn v;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcb.call(as || this || {}, v, f, o, opt);\r\n\t\t\t\t\tif(obj_has(o,f) && u === o[f]){ return }\r\n\t\t\t\t\tmap.call({o: o, s: s}, v,f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfunction map(v,f){\r\n\t\t\t\tif(N_ === f){ return }\r\n\t\t\t\tState.ify(this.o, f, this.s) ;\r\n\t\t\t}\r\n\t\t}());\r\n\t\tvar obj = Type.obj, obj_as = obj.as, obj_has = obj.has, obj_is = obj.is, obj_map = obj.map, obj_copy = obj.copy;\r\n\t\tvar num = Type.num, num_is = num.is;\r\n\t\tvar fn = Type.fn, fn_is = fn.is;\r\n\t\tvar N_ = Node._, u;\r\n\t\tmodule.exports = State;\r\n\t})(require, './state');\r\n\r\n\t;require(function(module){\r\n\t\tvar Type = require('./type');\r\n\t\tvar Val = require('./val');\r\n\t\tvar Node = require('./node');\r\n\t\tvar Graph = {};\r\n\t\t;(function(){\r\n\t\t\tGraph.is = function(g, cb, fn, as){ // checks to see if an object is a valid graph.\r\n\t\t\t\tif(!g || !obj_is(g) || obj_empty(g)){ return false } // must be an object.\r\n\t\t\t\treturn !obj_map(g, map, {cb:cb,fn:fn,as:as}); // makes sure it wasn't an empty object.\r\n\t\t\t}\r\n\t\t\tfunction map(n, s){ // we invert this because the way'? we check for this is via a negation.\r\n\t\t\t\tif(!n || s !== Node.soul(n) || !Node.is(n, this.fn, this.as)){ return true } // it is true that this is an invalid graph.\r\n\t\t\t\tif(!this.cb){ return }\r\n\t\t\t\tnf.n = n; nf.as = this.as; // sequential race conditions aren't races.\r\n\t\t\t\tthis.cb.call(nf.as, n, s, nf);\r\n\t\t\t}\r\n\t\t\tfunction nf(fn){ // optional callback for each node.\r\n\t\t\t\tif(fn){ Node.is(nf.n, fn, nf.as) } // where we then have an optional callback for each field/value.\r\n\t\t\t}\r\n\t\t}());\r\n\t\t;(function(){\r\n\t\t\tGraph.ify = function(obj, env, as){\r\n\t\t\t\tvar at = {path: [], obj: obj};\r\n\t\t\t\tif(!env){\r\n\t\t\t\t\tenv = {};\r\n\t\t\t\t} else\r\n\t\t\t\tif(typeof env === 'string'){\r\n\t\t\t\t\tenv = {soul: env};\r\n\t\t\t\t} else\r\n\t\t\t\tif(env instanceof Function){\r\n\t\t\t\t\tenv.map = env;\r\n\t\t\t\t}\r\n\t\t\t\tif(env.soul){\r\n\t\t\t\t\tat.rel = Val.rel.ify(env.soul);\r\n\t\t\t\t}\r\n\t\t\t\tenv.graph = env.graph || {};\r\n\t\t\t\tenv.seen = env.seen || [];\r\n\t\t\t\tenv.as = env.as || as;\r\n\t\t\t\tnode(env, at);\r\n\t\t\t\tenv.root = at.node;\r\n\t\t\t\treturn env.graph;\r\n\t\t\t}\r\n\t\t\tfunction node(env, at){ var tmp;\r\n\t\t\t\tif(tmp = seen(env, at)){ return tmp }\r\n\t\t\t\tat.env = env;\r\n\t\t\t\tat.soul = soul;\r\n\t\t\t\tif(Node.ify(at.obj, map, at)){\r\n\t\t\t\t\t//at.rel = at.rel || Val.rel.ify(Node.soul(at.node));\r\n\t\t\t\t\tenv.graph[Val.rel.is(at.rel)] = at.node;\r\n\t\t\t\t}\r\n\t\t\t\treturn at;\r\n\t\t\t}\r\n\t\t\tfunction map(v,f,n){\r\n\t\t\t\tvar at = this, env = at.env, is, tmp;\r\n\t\t\t\tif(Node._ === f && obj_has(v,Val.rel._)){\r\n\t\t\t\t\treturn n._; // TODO: Bug?\r\n\t\t\t\t}\r\n\t\t\t\tif(!(is = valid(v,f,n, at,env))){ return }\r\n\t\t\t\tif(!f){\r\n\t\t\t\t\tat.node = at.node || n || {};\r\n\t\t\t\t\tif(obj_has(v, Node._)){\r\n\t\t\t\t\t\tat.node._ = obj_copy(v._);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat.node = Node.soul.ify(at.node, Val.rel.is(at.rel));\r\n\t\t\t\t\tat.rel = at.rel || Val.rel.ify(Node.soul(at.node));\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp = env.map){\r\n\t\t\t\t\ttmp.call(env.as || {}, v,f,n, at);\r\n\t\t\t\t\tif(obj_has(n,f)){\r\n\t\t\t\t\t\tv = n[f];\r\n\t\t\t\t\t\tif(u === v){\r\n\t\t\t\t\t\t\tobj_del(n, f);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!(is = valid(v,f,n, at,env))){ return }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!f){ return at.node }\r\n\t\t\t\tif(true === is){\r\n\t\t\t\t\treturn v;\r\n\t\t\t\t}\r\n\t\t\t\ttmp = node(env, {obj: v, path: at.path.concat(f)});\r\n\t\t\t\tif(!tmp.node){ return }\r\n\t\t\t\treturn tmp.rel; //{'#': Node.soul(tmp.node)};\r\n\t\t\t}\r\n\t\t\tfunction soul(id){ var at = this;\r\n\t\t\t\tvar prev = Val.rel.is(at.rel), graph = at.env.graph;\r\n\t\t\t\tat.rel = at.rel || Val.rel.ify(id);\r\n\t\t\t\tat.rel[Val.rel._] = id;\r\n\t\t\t\tif(at.node && at.node[Node._]){\r\n\t\t\t\t\tat.node[Node._][Val.rel._] = id;\r\n\t\t\t\t}\r\n\t\t\t\tif(obj_has(graph, prev)){\r\n\t\t\t\t\tgraph[id] = graph[prev];\r\n\t\t\t\t\tobj_del(graph, prev);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfunction valid(v,f,n, at,env){ var tmp;\r\n\t\t\t\tif(Val.is(v)){ return true }\r\n\t\t\t\tif(obj_is(v)){ return 1 }\r\n\t\t\t\tif(tmp = env.invalid){\r\n\t\t\t\t\tv = tmp.call(env.as || {}, v,f,n);\r\n\t\t\t\t\treturn valid(v,f,n, at,env);\r\n\t\t\t\t}\r\n\t\t\t\tenv.err = \"Invalid value at '\" + at.path.concat(f).join('.') + \"'!\";\r\n\t\t\t}\r\n\t\t\tfunction seen(env, at){\r\n\t\t\t\tvar arr = env.seen, i = arr.length, has;\r\n\t\t\t\twhile(i--){ has = arr[i];\r\n\t\t\t\t\tif(at.obj === has.obj){ return has }\r\n\t\t\t\t}\r\n\t\t\t\tarr.push(at);\r\n\t\t\t}\r\n\t\t}());\r\n\t\tGraph.node = function(node){\r\n\t\t\tvar soul = Node.soul(node);\r\n\t\t\tif(!soul){ return }\r\n\t\t\treturn obj_put({}, soul, node);\r\n\t\t}\r\n\t\t;(function(){\r\n\t\t\tGraph.to = function(graph, root, opt){\r\n\t\t\t\tif(!graph){ return }\r\n\t\t\t\tvar obj = {};\r\n\t\t\t\topt = opt || {seen: {}};\r\n\t\t\t\tobj_map(graph[root], map, {obj:obj, graph: graph, opt: opt});\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\tfunction map(v,f){ var tmp, obj;\r\n\t\t\t\tif(Node._ === f){\r\n\t\t\t\t\tif(obj_empty(v, Val.rel._)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.obj[f] = obj_copy(v);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(!(tmp = Val.rel.is(v))){\r\n\t\t\t\t\tthis.obj[f] = v;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(obj = this.opt.seen[tmp]){\r\n\t\t\t\t\tthis.obj[f] = obj;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.obj[f] = this.opt.seen[tmp] = Graph.to(this.graph, tmp, this.opt);\r\n\t\t\t}\r\n\t\t}());\r\n\t\tvar fn_is = Type.fn.is;\r\n\t\tvar obj = Type.obj, obj_is = obj.is, obj_del = obj.del, obj_has = obj.has, obj_empty = obj.empty, obj_put = obj.put, obj_map = obj.map, obj_copy = obj.copy;\r\n\t\tvar u;\r\n\t\tmodule.exports = Graph;\r\n\t})(require, './graph');\r\n\r\n\t;require(function(module){\r\n\t\t// request / response module, for asking and acking messages.\r\n\t\trequire('./onto'); // depends upon onto!\r\n\t\tmodule.exports = function ask(cb, as){\r\n\t\t\tif(!this.on){ return }\r\n\t\t\tif(!(cb instanceof Function)){\r\n\t\t\t\tif(!cb || !as){ return }\r\n\t\t\t\tvar id = cb['#'] || cb, tmp = (this.tag||empty)[id];\r\n\t\t\t\tif(!tmp){ return }\r\n\t\t\t\ttmp = this.on(id, as);\r\n\t\t\t\tclearTimeout(tmp.err);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tvar id = (as && as['#']) || Math.random().toString(36).slice(2);\r\n\t\t\tif(!cb){ return id }\r\n\t\t\tvar to = this.on(id, cb, as);\r\n\t\t\tto.err = to.err || setTimeout(function(){\r\n\t\t\t\tto.next({err: \"Error: No ACK received yet.\"});\r\n\t\t\t\tto.off();\r\n\t\t\t}, (this.opt||{}).lack || 9000);\r\n\t\t\treturn id;\r\n\t\t}\r\n\t})(require, './ask');\r\n\r\n\t;require(function(module){\r\n\t\tvar Type = require('./type');\r\n\t\tfunction Dup(opt){\r\n\t\t\tvar dup = {s:{}};\r\n\t\t\topt = opt || {max: 1000, age: 1000 * 9};//1000 * 60 * 2};\r\n\t\t\tdup.check = function(id){\r\n\t\t\t\treturn dup.s[id]? dup.track(id) : false;\r\n\t\t\t}\r\n\t\t\tdup.track = function(id){\r\n\t\t\t\tdup.s[id] = time_is();\r\n\t\t\t\tif(!dup.to){\r\n\t\t\t\t\tdup.to = setTimeout(function(){\r\n\t\t\t\t\t\tType.obj.map(dup.s, function(time, id){\r\n\t\t\t\t\t\t\tif(opt.age > (time_is() - time)){ return }\r\n\t\t\t\t\t\t\tType.obj.del(dup.s, id);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdup.to = null;\r\n\t\t\t\t\t}, opt.age);\r\n\t\t\t\t}\r\n\t\t\t\treturn id;\r\n\t\t\t}\r\n\t\t\treturn dup;\r\n\t\t}\r\n\t\tvar time_is = Type.time.is;\r\n\t\tmodule.exports = Dup;\r\n\t})(require, './dup');\r\n\r\n\t;require(function(module){\r\n\r\n\t\tfunction Gun(o){\r\n\t\t\tif(o instanceof Gun){ return (this._ = {gun: this}).gun }\r\n\t\t\tif(!(this instanceof Gun)){ return new Gun(o) }\r\n\t\t\treturn Gun.create(this._ = {gun: this, opt: o});\r\n\t\t}\r\n\r\n\t\tGun.is = function(gun){ return (gun instanceof Gun) }\r\n\r\n\t\tGun.version = 0.9;\r\n\r\n\t\tGun.chain = Gun.prototype;\r\n\t\tGun.chain.toJSON = function(){};\r\n\r\n\t\tvar Type = require('./type');\r\n\t\tType.obj.to(Type, Gun);\r\n\t\tGun.HAM = require('./HAM');\r\n\t\tGun.val = require('./val');\r\n\t\tGun.node = require('./node');\r\n\t\tGun.state = require('./state');\r\n\t\tGun.graph = require('./graph');\r\n\t\tGun.on = require('./onto');\r\n\t\tGun.ask = require('./ask');\r\n\t\tGun.dup = require('./dup');\r\n\r\n\t\tGun._ = { // some reserved key words, these are not the only ones.\r\n\t\t\tnode: Gun.node._ // all metadata of a node is stored in the meta property on the node.\r\n\t\t\t,soul: Gun.val.rel._ // a soul is a UUID of a node but it always points to the \"latest\" data known.\r\n\t\t\t,state: Gun.state._ // other than the soul, we store HAM metadata.\r\n\t\t\t,field: '.' // a field is a property on a node which points to a value.\r\n\t\t\t,value: '=' // the primitive value.\r\n\t\t}\r\n\r\n\t\t;(function(){\r\n\t\t\tGun.create = function(at){\r\n\t\t\t\tat.root = at.root || at.gun;\r\n\t\t\t\tat.graph = at.graph || {};\r\n\t\t\t\tat.on = at.on || Gun.on;\r\n\t\t\t\tat.ask = at.ask || Gun.ask;\r\n\t\t\t\tat.dup = at.dup || Gun.dup();\r\n\t\t\t\tvar gun = at.gun.opt(at.opt);\r\n\t\t\t\tif(!at.once){\r\n\t\t\t\t\tat.on('in', root, at);\r\n\t\t\t\t\tat.on('out', root, at);\r\n\t\t\t\t}\r\n\t\t\t\tat.once = 1;\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tfunction root(msg){\r\n\t\t\t\t//console.log(\"add to.next(at)\"); // TODO: BUG!!!\r\n\t\t\t\tvar ev = this, at = ev.as, gun = at.gun, tmp;\r\n\t\t\t\t//if(!msg.gun){ msg.gun = at.gun }\r\n\t\t\t\tif(!(tmp = msg['#'])){ tmp = msg['#'] = text_rand(9) }\r\n\t\t\t\tif(at.dup.check(tmp)){ return }\r\n\t\t\t\tat.dup.track(tmp);\r\n\t\t\t\tmsg = obj_to(msg);//, {gun: at.gun});\r\n\t\t\t\tif(!at.ask(msg['@'], msg)){\r\n\t\t\t\t\tif(msg.get){\r\n\t\t\t\t\t\tGun.on.get(msg, gun);\r\n\t\t\t\t\t\t//at.on('get', get(msg));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(msg.put){\r\n\t\t\t\t\t\tGun.on.put(msg, gun);\r\n\t\t\t\t\t\t//at.on('put', put(msg));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tat.on('out', msg);\r\n\t\t\t}\r\n\t\t}());\r\n\r\n\t\t;(function(){\r\n\t\t\tGun.on.put = function(msg, gun){\r\n\t\t\t\tvar at = gun._, ctx = {gun: gun, graph: at.graph, put: {}, map: {}, machine: Gun.state(), ack: msg['@']};\r\n\t\t\t\tif(!Gun.graph.is(msg.put, null, verify, ctx)){ ctx.err = \"Error: Invalid graph!\" }\r\n\t\t\t\tif(ctx.err){ return at.on('in', {'@': msg['#'], err: Gun.log(ctx.err) }) }\r\n\t\t\t\tobj_map(ctx.put, merge, ctx);\r\n\t\t\t\tobj_map(ctx.map, map, ctx);\r\n\t\t\t\tif(u !== ctx.defer){\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\tGun.on.put(msg, gun);\r\n\t\t\t\t\t}, ctx.defer - at.machine);\r\n\t\t\t\t}\r\n\t\t\t\tif(!ctx.diff){ return }\r\n\t\t\t\tat.on('put', obj_to(msg, {put: ctx.diff}));\r\n\t\t\t};\r\n\t\t\tfunction verify(val, key, node, soul){ var ctx = this;\r\n\t\t\t\tvar state = Gun.state.is(node, key), tmp;\r\n\t\t\t\tif(!state){ return ctx.err = \"Error: No state on '\"+key+\"' in node '\"+soul+\"'!\" }\r\n\t\t\t\tvar vertex = ctx.graph[soul] || empty, was = Gun.state.is(vertex, key, true), known = vertex[key];\r\n\t\t\t\tvar HAM = Gun.HAM(ctx.machine, state, was, val, known);\r\n\t\t\t\tif(!HAM.incoming){\r\n\t\t\t\t\tif(HAM.defer){ // pick the lowest\r\n\t\t\t\t\t\tctx.defer = (state < (ctx.defer || Infinity))? state : ctx.defer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tctx.put[soul] = Gun.state.to(node, key, ctx.put[soul]);\r\n\t\t\t\t(ctx.diff || (ctx.diff = {}))[soul] = Gun.state.to(node, key, ctx.diff[soul]);\r\n\t\t\t}\r\n\t\t\tfunction merge(node, soul){\r\n\t\t\t\tvar cat = this.gun._, at = (cat.next || empty)[soul];\r\n\t\t\t\tif(!at){ return }\r\n\t\t\t\tvar msg = this.map[soul] = {\r\n\t\t\t\t\tput: this.node = node,\r\n\t\t\t\t\tget: this.soul = soul,\r\n\t\t\t\t\tgun: this.at = at\r\n\t\t\t\t};\r\n\t\t\t\tif(this.ack){ msg['@'] = this.ack }\r\n\t\t\t\tobj_map(node, each, this);\r\n\t\t\t}\r\n\t\t\tfunction each(val, key){\r\n\t\t\t\tvar graph = this.graph, soul = this.soul, at = (this.at._), tmp;\r\n\t\t\t\tgraph[soul] = Gun.state.to(this.node, key, graph[soul]);\r\n\t\t\t\tat.put = Gun.state.to(this.node, key, at.put);\r\n\t\t\t}\r\n\t\t\tfunction map(msg, soul){ var tmp;\r\n\t\t\t\tif(!msg.gun){ return }\r\n\t\t\t\tif((tmp = this.gun._).tag.node){\r\n\t\t\t\t\treturn tmp.on('node', function(msg){ this.off();\r\n\t\t\t\t\t\t(msg.gun._).on('in', msg);\r\n\t\t\t\t\t}).on.on('node', msg);\r\n\t\t\t\t}\r\n\t\t\t\t(msg.gun._).on('in', msg);\r\n\t\t\t}\r\n\r\n\t\t\tGun.on.get = function(msg, gun){\r\n\t\t\t\tvar root = gun._, soul = msg.get[_soul], node = root.graph[soul], field = msg.get[_field], tmp;\r\n\t\t\t\tvar next = root.next || (root.next = {}), at = ((next[soul] || empty)._);\r\n\t\t\t\tif(!node || !at){ return root.on('get', msg) }\r\n\t\t\t\tif(field){\r\n\t\t\t\t\tif(!obj_has(node, field)){ return root.on('get', msg) }\r\n\t\t\t\t\tnode = Gun.state.to(node, field);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode = Gun.obj.copy(node);\r\n\t\t\t\t}\r\n\t\t\t\tnode = Gun.graph.node(node);\r\n\t\t\t\t//tmp = at.ack;\r\n\t\t\t\troot.on('in', {\r\n\t\t\t\t\t'@': msg['#'],\r\n\t\t\t\t\t//how: 'mem',\r\n\t\t\t\t\tput: node,\r\n\t\t\t\t\tgun: gun\r\n\t\t\t\t});\r\n\t\t\t\t//if(0 < tmp){\r\n\t\t\t\t//\treturn;\r\n\t\t\t\t//}\r\n\t\t\t\troot.on('get', msg);\r\n\t\t\t}\r\n\t\t}());\r\n\r\n\t\t;(function(){\r\n\t\t\tGun.chain.opt = function(opt){\r\n\t\t\t\topt = opt || {};\r\n\t\t\t\tvar gun = this, at = gun._, tmp = opt.peers || opt;\r\n\t\t\t\tif(!obj_is(opt)){ opt = {} }\r\n\t\t\t\tif(!obj_is(at.opt)){ at.opt = opt }\r\n\t\t\t\tif(text_is(tmp)){ tmp = [tmp] }\r\n\t\t\t\tif(list_is(tmp)){\r\n\t\t\t\t\ttmp = obj_map(tmp, function(url, i, map){\r\n\t\t\t\t\t\tmap(url, {url: url});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(!obj_is(at.opt.peers)){ at.opt.peers = {}}\r\n\t\t\t\t\tat.opt.peers = obj_to(tmp, at.opt.peers);\r\n\t\t\t\t}\r\n\t\t\t\tat.opt.uuid = at.opt.uuid || function(){ \r\n\t\t\t\t\treturn state().toString(36).replace('.','') + text_rand(12);\r\n\t\t\t\t}\r\n\t\t\t\tat.opt.peers = at.opt.peers || {};\r\n\t\t\t\tobj_to(opt, at.opt); // copies options on to `at.opt` only if not already taken.\r\n\t\t\t\tGun.on('opt', at);\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t}());\r\n\r\n\t\tvar list_is = Gun.list.is;\r\n\t\tvar text = Gun.text, text_is = text.is, text_rand = text.random;\r\n\t\tvar obj = Gun.obj, obj_is = obj.is, obj_has = obj.has, obj_to = obj.to, obj_map = obj.map, obj_copy = obj.copy;\r\n\t\tvar state = Gun.state, _soul = Gun._.soul, _field = Gun._.field, node_ = Gun._.node, rel_is = Gun.val.rel.is;\r\n\t\tvar empty = {}, u;\r\n\r\n\t\tconsole.debug = function(i, s){ return (console.debug.i && i === console.debug.i && console.debug.i++) && (console.log.apply(console, arguments) || s) };\r\n\r\n\t\tGun.log = function(){ return (!Gun.log.off && console.log.apply(console, arguments)), [].slice.call(arguments).join(' ') }\r\n\t\tGun.log.once = function(w,s,o){ return (o = Gun.log.once)[w] = o[w] || 0, o[w]++ || Gun.log(s) }\r\n\r\n\t\t;\"Please do not remove these messages unless you are paying for a monthly sponsorship, thanks!\";\r\n\t\tGun.log.once(\"welcome\", \"Hello wonderful person! :) Thanks for using GUN, feel free to ask for help on https://gitter.im/amark/gun and ask StackOverflow questions tagged with 'gun'!\");\r\n\t\t;\"Please do not remove these messages unless you are paying for a monthly sponsorship, thanks!\";\r\n\t\t\r\n\t\tif(typeof window !== \"undefined\"){ window.Gun = Gun }\r\n\t\tif(typeof common !== \"undefined\"){ common.exports = Gun }\r\n\t\tmodule.exports = Gun;\r\n\t})(require, './root');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./root');\r\n\t\tGun.chain.back = function(n, opt){ var tmp;\r\n\t\t\tn = n || 1;\r\n\t\t\tif(-1 === n || Infinity === n){\r\n\t\t\t\treturn this._.root;\r\n\t\t\t} else\r\n\t\t\tif(1 === n){\r\n\t\t\t\treturn this._.back || this;\r\n\t\t\t}\r\n\t\t\tvar gun = this, at = gun._;\r\n\t\t\tif(typeof n === 'string'){\r\n\t\t\t\tn = n.split('.');\r\n\t\t\t}\r\n\t\t\tif(n instanceof Array){\r\n\t\t\t\tvar i = 0, l = n.length, tmp = at;\r\n\t\t\t\tfor(i; i < l; i++){\r\n\t\t\t\t\ttmp = (tmp||empty)[n[i]];\r\n\t\t\t\t}\r\n\t\t\t\tif(u !== tmp){\r\n\t\t\t\t\treturn opt? gun : tmp;\r\n\t\t\t\t} else\r\n\t\t\t\tif((tmp = at.back)){\r\n\t\t\t\t\treturn tmp.back(n, opt);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(n instanceof Function){\r\n\t\t\t\tvar yes, tmp = {back: gun};\r\n\t\t\t\twhile((tmp = tmp.back)\r\n\t\t\t\t&& (tmp = tmp._)\r\n\t\t\t\t&& !(yes = n(tmp, opt))){}\r\n\t\t\t\treturn yes;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tvar empty = {}, u;\r\n\t})(require, './back');\r\n\r\n\t;require(function(module){\r\n\t\t// WARNING: GUN is very simple, but the JavaScript chaining API around GUN\r\n\t\t// is complicated and was extremely hard to build. If you port GUN to another\r\n\t\t// language, consider implementing an easier API to build.\r\n\t\tvar Gun = require('./root');\r\n\t\tGun.chain.chain = function(){\r\n\t\t\tvar at = this._, chain = new this.constructor(this), cat = chain._, root;\r\n\t\t\tcat.root = root = at.root;\r\n\t\t\tcat.id = ++root._.once;\r\n\t\t\tcat.back = this;\r\n\t\t\tcat.on = Gun.on;\r\n\t\t\tcat.on('in', input, cat); // For 'in' if I add my own listeners to each then I MUST do it before in gets called. If I listen globally for all incoming data instead though, regardless of individual listeners, I can transform the data there and then as well.\r\n\t\t\tcat.on('out', output, cat); // However for output, there isn't really the global option. I must listen by adding my own listener individually BEFORE this one is ever called.\r\n\t\t\treturn chain;\r\n\t\t}\r\n\r\n\t\tfunction output(msg){\r\n\t\t\tvar put, get, at = this.as, back = at.back._, root = at.root._;\r\n\t\t\tif(!msg.gun){ msg.gun = at.gun }\r\n\t\t\tthis.to.next(msg);\r\n\t\t\tif(get = msg.get){\r\n\t\t\t\t/*if(u !== at.put){\r\n\t\t\t\t\tat.on('in', at);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}*/\r\n\t\t\t\tif(get['#'] || at.soul){\r\n\t\t\t\t\tget['#'] = get['#'] || at.soul;\r\n\t\t\t\t\tmsg['#'] || (msg['#'] = root.opt.uuid());\r\n\t\t\t\t\tback = (root.gun.get(get['#'])._);\r\n\t\t\t\t\tif(!(get = get['.'])){\r\n\t\t\t\t\t\tif(obj_has(back, 'put')){\r\n\t\t\t\t\t\t//if(u !== back.put){\r\n\t\t\t\t\t\t\tback.on('in', back);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(back.ack){\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmsg.gun = back.gun;\r\n\t\t\t\t\t\tback.ack = -1;\r\n\t\t\t\t\t} else\r\n\t\t\t\t\tif(obj_has(back.put, get)){\r\n\t\t\t\t\t\tback.on('in', {\r\n\t\t\t\t\t\t\tgun: back.gun,\r\n\t\t\t\t\t\t\tput: Gun.state.to(back.put, get),\r\n\t\t\t\t\t\t\tget: back.get\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\troot.ask(ack, msg);\r\n\t\t\t\t\treturn root.on('in', msg);\r\n\t\t\t\t}\r\n\t\t\t\tif(root.now){\r\n\t\t\t\t\troot.now[at.id] = root.now[at.id] || true;\r\n\t\t\t\t}\r\n\t\t\t\tif(get['.']){\r\n\t\t\t\t\tif(at.get){\r\n\t\t\t\t\t\tmsg = {get: {'.': at.get}, gun: at.gun};\r\n\t\t\t\t\t\t(back.ask || (back.ask = {}))[at.get] = msg.gun; // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t\t\t\treturn back.on('out', msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmsg = {get: {}, gun: at.gun};\r\n\t\t\t\t\treturn back.on('out', msg);\r\n\t\t\t\t}\r\n\t\t\t\tat.ack = at.ack || -1;\r\n\t\t\t\tif(at.get){\r\n\t\t\t\t\tmsg.gun = at.gun;\r\n\t\t\t\t\tget['.'] = at.get;\r\n\t\t\t\t\t(back.ask || (back.ask = {}))[at.get] = msg.gun; // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t\t\treturn back.on('out', msg);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn back.on('out', msg);\r\n\t\t}\r\n\r\n\t\tfunction input(at){\r\n\t\t\tat = at._ || at;\r\n\t\t\tvar ev = this, cat = this.as, gun = at.gun, coat = gun._, change = at.put, back = cat.back._ || empty, rel, tmp;\r\n\t\t\tif(cat.get && at.get !== cat.get){\r\n\t\t\t\tat = obj_to(at, {get: cat.get});\r\n\t\t\t}\r\n\t\t\tif(cat.field && coat !== cat){\r\n\t\t\t\tat = obj_to(at, {gun: cat.gun});\r\n\t\t\t\tif(coat.ack){\r\n\t\t\t\t\tcat.ack = coat.ack;\r\n\t\t\t\t\t//cat.ack = cat.ack || coat.ack;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(u === change){\r\n\t\t\t\tev.to.next(at);\r\n\t\t\t\tif(cat.soul){ return }\r\n\t\t\t\techo(cat, at, ev);\r\n\t\t\t\tif(cat.field){\r\n\t\t\t\t\tnot(cat, at);\r\n\t\t\t\t}\r\n\t\t\t\tobj_del(coat.echo, cat.id);\r\n\t\t\t\tobj_del(cat.map, coat.id);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(cat.soul){\r\n\t\t\t\t//if(cat.root._.now){ at = obj_to(at, {put: change = coat.put}) } // TODO: Ugly hack for uncached synchronous maps.\r\n\t\t\t\tev.to.next(at);\r\n\t\t\t\techo(cat, at, ev);\r\n\t\t\t\tobj_map(change, map, {at: at, cat: cat});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/*if(rel = Gun.val.rel.is(change)){\r\n\t\t\t\tif(tmp = (gun.back(-1).get(rel)._).put){\r\n\t\t\t\t\tchange = tmp; // this will cause performance to turn to mush, maybe use `.now` check?\r\n\t\t\t\t}\r\n\t\t\t\t//if(tmp.put){ change = tmp.put; }\r\n\t\t\t}\r\n\t\t\tif(!rel || tmp){*/\r\n\t\t\tif(!(rel = Gun.val.rel.is(change))){\r\n\t\t\t\tif(Gun.val.is(change)){\r\n\t\t\t\t\tif(cat.field || cat.soul){\r\n\t\t\t\t\t\tnot(cat, at);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\tif(coat.field || coat.soul){\r\n\t\t\t\t\t\t(coat.echo || (coat.echo = {}))[cat.id] = cat;\r\n\t\t\t\t\t\t(cat.map || (cat.map = {}))[coat.id] = cat.map[coat.id] || {at: coat};\r\n\t\t\t\t\t\t//if(u === coat.put){ return } // Not necessary but improves performance. If we have it but coat does not, that means we got things out of order and coat will get it. Once coat gets it, it will tell us again.\r\n\t\t\t\t\t}\r\n\t\t\t\t\tev.to.next(at);\r\n\t\t\t\t\techo(cat, at, ev);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(cat.field && coat !== cat && obj_has(coat, 'put')){\r\n\t\t\t\t\tcat.put = coat.put;\r\n\t\t\t\t};\r\n\t\t\t\tif((rel = Gun.node.soul(change)) && coat.field){\r\n\t\t\t\t\tcoat.put = (cat.root.get(rel)._).put;\r\n\t\t\t\t}\r\n\t\t\t\tev.to.next(at);\r\n\t\t\t\techo(cat, at, ev);\r\n\t\t\t\trelate(cat, at, coat, rel);\r\n\t\t\t\tobj_map(change, map, {at: at, cat: cat});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\trelate(cat, at, coat, rel);\r\n\t\t\tev.to.next(at);\r\n\t\t\techo(cat, at, ev);\r\n\t\t}\r\n\t\tGun.chain.chain.input = input;\r\n\t\tfunction relate(at, msg, from, rel){\r\n\t\t\tif(!rel || node_ === at.get){ return }\r\n\t\t\tvar tmp = (at.root.get(rel)._);\r\n\t\t\tif(at.has){\r\n\t\t\t\tfrom = tmp;\r\n\t\t\t} else \r\n\t\t\tif(from.has){\r\n\t\t\t\trelate(from, msg, from, rel);\r\n\t\t\t}\r\n\t\t\tif(from === at){ return }\r\n\t\t\t(from.echo || (from.echo = {}))[at.id] = at;\r\n\t\t\tif(at.has && !(at.map||empty)[from.id]){ // if we haven't seen this before.\r\n\t\t\t\tnot(at, msg);\r\n\t\t\t}\r\n\t\t\ttmp = (at.map || (at.map = {}))[from.id] = at.map[from.id] || {at: from};\r\n\t\t\tvar now = at.root._.now;\r\n\t\t\tif(rel === tmp.rel){\r\n\t\t\t\tif(!now){ return }\r\n\t\t\t\tif(u === now[at.id]){ return }\r\n\t\t\t\tif((now._ || (now._ = {}))[at.id]){ return } now._[at.id] = true;\r\n\t\t\t}\r\n\t\t\task(at, tmp.rel = rel);\r\n\t\t}\r\n\t\tfunction echo(at, msg, ev){\r\n\t\t\tif(!at.echo){ return } // || node_ === at.get ?\r\n\t\t\tif(at.has || at.field){ msg = obj_to(msg, {event: ev}) }\r\n\t\t\tobj_map(at.echo, reverb, msg);\r\n\t\t}\r\n\t\tfunction reverb(to){\r\n\t\t\tto.on('in', this);\r\n\t\t}\r\n\t\tfunction map(data, key){ // Map over only the changes on every update.\r\n\t\t\tvar cat = this.cat, next = cat.next || empty, via = this.at, gun, chain, at, tmp;\r\n\t\t\tif(node_ === key && !next[key]){ return }\r\n\t\t\tif(!(gun = next[key])){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tat = (gun._);\r\n\t\t\t//if(data && data[_soul] && (tmp = Gun.val.rel.is(data)) && (tmp = (cat.root.get(tmp)._)) && obj_has(tmp, 'put')){\r\n\t\t\t//\tdata = tmp.put;\r\n\t\t\t//}\r\n\t\t\tif(at.field){\r\n\t\t\t\tif(!(data && data[_soul] && Gun.val.rel.is(data) === Gun.node.soul(at.put))){\r\n\t\t\t\t\tat.put = data;\r\n\t\t\t\t}\r\n\t\t\t\tchain = gun;\r\n\t\t\t} else {\r\n\t\t\t\tchain = via.gun.get(key);\r\n\t\t\t}\r\n\t\t\tat.on('in', {\r\n\t\t\t\tput: data,\r\n\t\t\t\tget: key,\r\n\t\t\t\tgun: chain,\r\n\t\t\t\tvia: via\r\n\t\t\t});\r\n\t\t}\r\n\t\tfunction not(at, msg){\r\n\t\t\tif(!(at.has || at.soul)){ return }\r\n\t\t\tvar tmp = at.map, root = at.root._;\r\n\t\t\tat.map = null;\r\n\t\t\tif(!root.now || !root.now[at.id]){\r\n\t\t\t\tif((u === msg.put && !msg['@']) && null === tmp){ return }\r\n\t\t\t}\r\n\t\t\tif(u === tmp && Gun.val.rel.is(at.put)){ return } // TODO: Bug? Threw second condition in for a particular test, not sure if a counter example is tested though.\r\n\t\t\tobj_map(tmp, function(proxy){\r\n\t\t\t\tif(!(proxy = proxy.at)){ return }\r\n\t\t\t\tobj_del(proxy.echo, at.id);\r\n\t\t\t});\r\n\t\t\tobj_map(at.next, function(gun, key){\r\n\t\t\t\tvar coat = (gun._);\r\n\t\t\t\tcoat.put = u;\r\n\t\t\t\tif(coat.ack){\r\n\t\t\t\t\tcoat.ack = -1;\r\n\t\t\t\t}\r\n\t\t\t\tcoat.on('in', {\r\n\t\t\t\t\tget: key,\r\n\t\t\t\t\tgun: gun,\r\n\t\t\t\t\tput: u\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\tfunction ask(at, soul){\r\n\t\t\tvar tmp = (at.root.get(soul)._);\r\n\t\t\tif(at.ack){\r\n\t\t\t\t//tmp.ack = tmp.ack || -1;\r\n\t\t\t\ttmp.on('out', {get: {'#': soul}});\r\n\t\t\t\tif(!at.ask){ return } // TODO: PERFORMANCE? More elegant way?\r\n\t\t\t}\r\n\t\t\tobj_map(at.ask || at.next, function(gun, key){\r\n\t\t\t\t//(tmp.gun.get(key)._).on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t//tmp.on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t(gun._).on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t\t//at.on('out', {get: {'#': soul, '.': key}});\r\n\t\t\t});\r\n\t\t\tGun.obj.del(at, 'ask'); // TODO: PERFORMANCE? More elegant way?\r\n\t\t}\r\n\t\tfunction ack(msg, ev){\r\n\t\t\tvar as = this.as, get = as.get || empty, at = as.gun._;\r\n\t\t\tif(at.ack){ at.ack = (at.ack + 1) || 1 }\r\n\t\t\tif(!msg.put || node_ == get['.'] || (get['.'] && !obj_has(msg.put[get['#']], at.get))){\r\n\t\t\t\tif(at.put !== u){ return }\r\n\t\t\t\t//at.ack = 0;\r\n\t\t\t\tat.on('in', {\r\n\t\t\t\t\tget: at.get,\r\n\t\t\t\t\tput: at.put = u,\r\n\t\t\t\t\tgun: at.gun,\r\n\t\t\t\t\t'@': msg['@']\r\n\t\t\t\t})\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t//if(/*!msg.gun &&*/ !get['.'] && get['#']){ at.ack = (at.ack + 1) || 1 }\r\n\t\t\t//msg = obj_to(msg);\r\n\t\t\tmsg.gun = at.root;\r\n\t\t\t//Gun.on('put', at);\r\n\t\t\tGun.on.put(msg, at.root);\r\n\t\t}\r\n\t\tvar empty = {}, u;\r\n\t\tvar obj = Gun.obj, obj_has = obj.has, obj_put = obj.put, obj_del = obj.del, obj_to = obj.to, obj_map = obj.map;\r\n\t\tvar _soul = Gun._.soul, _field = Gun._.field, node_ = Gun.node._;\r\n\t})(require, './chain');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./root');\r\n\t\tGun.chain.get = function(key, cb, as){\r\n\t\t\tif(typeof key === 'string'){\r\n\t\t\t\tvar gun, back = this, cat = back._;\r\n\t\t\t\tvar next = cat.next || empty, tmp;\r\n\t\t\t\tif(!(gun = next[key])){\r\n\t\t\t\t\tgun = cache(key, back);\r\n\t\t\t\t}\r\n\t\t\t} else\r\n\t\t\tif(key instanceof Function){\r\n\t\t\t\tvar gun = this, at = gun._, root = at.root._, tmp = root.now, ev;\r\n\t\t\t\tas = cb || {};\r\n\t\t\t\tas.use = key;\r\n\t\t\t\tas.out = as.out || {};\r\n\t\t\t\tas.out.get = as.out.get || {};\r\n\t\t\t\tev = at.on('in', use, as);\r\n\t\t\t\t(root.now = {$:1})[as.now = at.id] = ev;\r\n\t\t\t\tat.on('out', as.out);\r\n\t\t\t\troot.now = tmp;\r\n\t\t\t\treturn gun;\r\n\t\t\t} else\r\n\t\t\tif(num_is(key)){\r\n\t\t\t\treturn this.get(''+key, cb, as);\r\n\t\t\t} else {\r\n\t\t\t\t(as = this.chain())._.err = {err: Gun.log('Invalid get request!', key)}; // CLEAN UP\r\n\t\t\t\tif(cb){ cb.call(as, as._.err) }\r\n\t\t\t\treturn as;\r\n\t\t\t}\r\n\t\t\tif(tmp = cat.stun){ // TODO: Refactor?\r\n\t\t\t\tgun._.stun = gun._.stun || tmp;\r\n\t\t\t}\r\n\t\t\tif(cb && cb instanceof Function){\r\n\t\t\t\tgun.get(cb, as);\r\n\t\t\t}\r\n\t\t\treturn gun;\r\n\t\t}\r\n\t\tfunction cache(key, back){\r\n\t\t\tvar cat = back._, next = cat.next, gun = back.chain(), at = gun._;\r\n\t\t\tif(!next){ next = cat.next = {} }\r\n\t\t\tnext[at.get = key] = gun;\r\n\t\t\tif(cat.root === back){ \r\n\t\t\t\tat.soul = key;\r\n\t\t\t} else\r\n\t\t\tif(cat.soul || cat.field || cat.has){  // TODO: Convert field to has!\r\n\t\t\t\tat.field = at.has = key;\r\n\t\t\t\tif(obj_has(cat.put, key)){\r\n\t\t\t\t\t//at.put = cat.put[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn gun;\r\n\t\t}\r\n\t\tfunction use(msg){\r\n\t\t\tvar ev = this, as = ev.as, gun = msg.gun, at = gun._, root = at.root._, data = msg.put, tmp;\r\n\t\t\tif((tmp = root.now) && ev !== tmp[as.now]){\r\n\t\t\t\treturn ev.to.next(msg);\r\n\t\t\t}\r\n\t\t\tif(u === data){\r\n\t\t\t\tdata = at.put;\r\n\t\t\t}\r\n\t\t\tif((tmp = data) && tmp[rel._] && (tmp = rel.is(tmp))){\r\n\t\t\t\ttmp = (at.root.get(tmp)._);\r\n\t\t\t\tif(u !== tmp.put){\r\n\t\t\t\t\tmsg = obj_to(msg, {put: tmp.put});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tas.use(msg, msg.event || ev);\r\n\t\t\tev.to.next(msg);\r\n\t\t}\r\n\t\tvar obj = Gun.obj, obj_has = obj.has, obj_to = Gun.obj.to;\r\n\t\tvar num_is = Gun.num.is;\r\n\t\tvar rel = Gun.val.rel, node_ = Gun.node._;\r\n\t\tvar empty = {}, u;\r\n\t})(require, './get');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./root');\r\n\t\tGun.chain.put = function(data, cb, as){\r\n\t\t\t// #soul.field=value>state\r\n\t\t\t// ~who#where.where=what>when@was\r\n\t\t\t// TODO: BUG! Put probably cannot handle plural chains!\r\n\t\t\tvar gun = this, at = (gun._), root = at.root, tmp;\r\n\t\t\tas = as || {};\r\n\t\t\tas.data = data;\r\n\t\t\tas.gun = as.gun || gun;\r\n\t\t\tif(typeof cb === 'string'){\r\n\t\t\t\tas.soul = cb;\r\n\t\t\t} else {\r\n\t\t\t\tas.ack = cb;\r\n\t\t\t}\r\n\t\t\tif(at.soul){\r\n\t\t\t\tas.soul = at.soul;\r\n\t\t\t}\r\n\t\t\tif(as.soul || root === gun){\r\n\t\t\t\tif(!obj_is(as.data)){\r\n\t\t\t\t\t(as.ack||noop).call(as, as.out = {err: Gun.log(\"Data saved to the root level of the graph must be a node (an object), not a\", (typeof as.data), 'of \"' + as.data + '\"!')});\r\n\t\t\t\t\tif(as.res){ as.res() }\r\n\t\t\t\t\treturn gun;\r\n\t\t\t\t}\r\n\t\t\t\tas.gun = gun = root.get(as.soul = as.soul || (as.not = Gun.node.soul(as.data) || ((root._).opt.uuid || Gun.text.random)()));\r\n\t\t\t\tas.ref = as.gun;\r\n\t\t\t\tify(as);\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tif(Gun.is(data)){\r\n\t\t\t\tdata.get('_').get(function(at, ev, tmp){ ev.off();\r\n\t\t\t\t\tif(!(tmp = at.gun) || !(tmp = tmp._.back) || !tmp._.soul){\r\n\t\t\t\t\t\treturn Gun.log(\"The reference you are saving is a\", typeof at.put, '\"'+ as.put +'\", not a node (object)!');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgun.put(Gun.val.rel.ify(tmp._.soul), cb, as);\r\n\t\t\t\t});\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tas.ref = as.ref || (root === (tmp = at.back))? gun : tmp;\r\n\t\t\tif(as.ref._.soul && Gun.val.is(as.data) && at.get){\r\n\t\t\t\tas.data = obj_put({}, at.get, as.data);\r\n\t\t\t\tas.ref.put(as.data, as.soul, as);\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tas.ref.get('_').get(any, {as: as});\r\n\t\t\tif(!as.out){\r\n\t\t\t\t// TODO: Perf idea! Make a global lock, that blocks everything while it is on, but if it is on the lock it does the expensive lookup to see if it is a dependent write or not and if not then it proceeds full speed. Meh? For write heavy async apps that would be terrible.\r\n\t\t\t\tas.res = as.res || stun; // Gun.on.stun(as.ref); // TODO: BUG! Deal with locking?\r\n\t\t\t\tas.gun._.stun = as.ref._.stun;\r\n\t\t\t}\r\n\t\t\treturn gun;\r\n\t\t};\r\n\r\n\t\tfunction ify(as){\r\n\t\t\tas.batch = batch;\r\n\t\t\tvar opt = as.opt||{}, env = as.env = Gun.state.map(map, opt.state);\r\n\t\t\tenv.soul = as.soul;\r\n\t\t\tas.graph = Gun.graph.ify(as.data, env, as);\r\n\t\t\tif(env.err){\r\n\t\t\t\t(as.ack||noop).call(as, as.out = {err: Gun.log(env.err)});\r\n\t\t\t\tif(as.res){ as.res() }\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tas.batch();\r\n\t\t}\r\n\r\n\t\tfunction stun(cb){\r\n\t\t\tif(cb){ cb() }\r\n\t\t\treturn;\r\n\t\t\tvar as = this;\r\n\t\t\tif(!as.ref){ return }\r\n\t\t\tif(cb){\r\n\t\t\t\tas.after = as.ref._.tag;\r\n\t\t\t\tas.now = as.ref._.tag = {};\r\n\t\t\t\tcb();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(as.after){\r\n\t\t\t\tas.ref._.tag = as.after;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction batch(){ var as = this;\r\n\t\t\tif(!as.graph || obj_map(as.stun, no)){ return }\r\n\t\t\tas.res = as.res || function(cb){ if(cb){ cb() } };\r\n\t\t\tas.res(function(){\r\n\t\t\t\tvar cat = (as.gun.back(-1)._), ask = cat.ask(function(ack){\r\n\t\t\t\t\tthis.off(); // One response is good enough for us currently. Later we may want to adjust this.\r\n\t\t\t\t\tif(!as.ack){ return }\r\n\t\t\t\t\tas.ack(ack, this);\r\n\t\t\t\t}, as.opt);\r\n\t\t\t\tvar tmp = cat.root._.now; obj.del(cat.root._, 'now');\r\n\t\t\t\t(as.ref._).now = true;\r\n\t\t\t\t(as.ref._).on('out', {\r\n\t\t\t\t\tgun: as.ref, put: as.out = as.env.graph, opt: as.opt, '#': ask\r\n\t\t\t\t});\r\n\t\t\t\tobj.del((as.ref._), 'now');\r\n\t\t\t\tcat.root._.now = tmp;\r\n\t\t\t}, as);\r\n\t\t\tif(as.res){ as.res() }\r\n\t\t} function no(v,f){ if(v){ return true } }\r\n\r\n\t\tfunction map(v,f,n, at){ var as = this;\r\n\t\t\tif(f || !at.path.length){ return }\r\n\t\t\t(as.res||iife)(function(){\r\n\t\t\t\tvar path = at.path, ref = as.ref, opt = as.opt;\r\n\t\t\t\tvar i = 0, l = path.length;\r\n\t\t\t\tfor(i; i < l; i++){\r\n\t\t\t\t\tref = ref.get(path[i]);\r\n\t\t\t\t}\r\n\t\t\t\tif(as.not || Gun.node.soul(at.obj)){\r\n\t\t\t\t\tvar id = Gun.node.soul(at.obj) || ((as.opt||{}).uuid || as.gun.back('opt.uuid') || Gun.text.random)();\r\n\t\t\t\t\tref.back(-1).get(id);\r\n\t\t\t\t\tat.soul(id);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t(as.stun = as.stun || {})[path] = true;\r\n\t\t\t\tref.get('_').get(soul, {as: {at: at, as: as}});\r\n\t\t\t}, {as: as, at: at});\r\n\t\t}\r\n\r\n\t\tfunction soul(at, ev){ var as = this.as, cat = as.at; as = as.as;\r\n\t\t\t//ev.stun(); // TODO: BUG!?\r\n\t\t\tif(!at.gun || !at.gun._.back){ return } // TODO: Handle\r\n\t\t\tev.off();\r\n\t\t\tat = (at.gun._.back._);\r\n\t\t\tvar id = Gun.node.soul(cat.obj) || Gun.node.soul(at.put) || Gun.val.rel.is(at.put) || ((as.opt||{}).uuid || as.gun.back('opt.uuid') || Gun.text.random)(); // TODO: BUG!? Do we really want the soul of the object given to us? Could that be dangerous?\r\n\t\t\tat.gun.back(-1).get(id);\r\n\t\t\tcat.soul(id);\r\n\t\t\tas.stun[cat.path] = false;\r\n\t\t\tas.batch();\r\n\t\t}\r\n\r\n\t\tfunction any(at, ev){\r\n\t\t\tvar as = this.as;\r\n\t\t\tif(!at.gun || !at.gun._){ return } // TODO: Handle\r\n\t\t\tif(at.err){ // TODO: Handle\r\n\t\t\t\tconsole.log(\"Please report this as an issue! Put.any.err\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cat = (at.gun._.back._), data = cat.put, opt = as.opt||{}, root, tmp;\r\n\t\t\tif((tmp = as.ref) && tmp._.now){ return }\r\n\t\t\tev.off();\r\n\t\t\tif(as.ref !== as.gun){\r\n\t\t\t\ttmp = (as.gun._).get || cat.get;\r\n\t\t\t\tif(!tmp){ // TODO: Handle\r\n\t\t\t\t\tconsole.log(\"Please report this as an issue! Put.no.get\"); // TODO: BUG!??\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tas.data = obj_put({}, tmp, as.data);\r\n\t\t\t\ttmp = null;\r\n\t\t\t}\r\n\t\t\tif(u === data){\r\n\t\t\t\tif(!cat.get){ return } // TODO: Handle\r\n\t\t\t\tif(!cat.soul){\r\n\t\t\t\t\ttmp = cat.gun.back(function(at){\r\n\t\t\t\t\t\tif(at.soul){ return at.soul }\r\n\t\t\t\t\t\tas.data = obj_put({}, at.get, as.data);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\ttmp = tmp || cat.get;\r\n\t\t\t\tcat = (cat.root.get(tmp)._);\r\n\t\t\t\tas.not = as.soul = tmp;\r\n\t\t\t\tdata = as.data;\r\n\t\t\t}\r\n\t\t\tif(!as.not && !(as.soul = Gun.node.soul(data))){\r\n\t\t\t\tif(as.path && obj_is(as.data)){ // Apparently necessary\r\n\t\t\t\t\tas.soul = (opt.uuid || cat.root._.opt.uuid || Gun.text.random)();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//as.data = obj_put({}, as.gun._.get, as.data);\r\n\t\t\t\t\tas.soul = at.soul || cat.soul || (opt.uuid || cat.root._.opt.uuid || Gun.text.random)();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tas.ref.put(as.data, as.soul, as);\r\n\t\t}\r\n\t\tvar obj = Gun.obj, obj_is = obj.is, obj_put = obj.put, obj_map = obj.map;\r\n\t\tvar u, empty = {}, noop = function(){}, iife = function(fn,as){fn.call(as||empty)};\r\n\t})(require, './put');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./root');\r\n\t\trequire('./opt');\r\n\t\trequire('./chain');\r\n\t\trequire('./back');\r\n\t\trequire('./put');\r\n\t\trequire('./get');\r\n\t\tmodule.exports = Gun;\r\n\t})(require, './index');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./index');\r\n\t\tGun.chain.on = function(tag, arg, eas, as){\r\n\t\t\tvar gun = this, at = gun._, tmp, act, off;\r\n\t\t\tif(typeof tag === 'string'){\r\n\t\t\t\tif(!arg){ return at.on(tag) }\r\n\t\t\t\tact = at.on(tag, arg, eas || at, as);\r\n\t\t\t\tif(eas && eas.gun){\r\n\t\t\t\t\t(eas.subs || (eas.subs = [])).push(act);\r\n\t\t\t\t}\r\n\t\t\t\toff = function() {\r\n\t\t\t\t\tif (act && act.off) act.off();\r\n\t\t\t\t\toff.off();\r\n\t\t\t\t};\r\n\t\t\t\toff.off = gun.off.bind(gun) || noop;\r\n\t\t\t\tgun.off = off;\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tvar opt = arg;\r\n\t\t\topt = (true === opt)? {change: true} : opt || {};\r\n\t\t\topt.ok = tag;\r\n\t\t\topt.last = {};\r\n\t\t\tgun.get(ok, opt); // TODO: PERF! Event listener leak!!!?\r\n\t\t\treturn gun;\r\n\t\t}\r\n\r\n\t\tfunction ok(at, ev){ var opt = this;\r\n\t\t\tvar gun = at.gun, cat = gun._, data = cat.put || at.put, tmp = opt.last, id = cat.id+at.get, tmp;\r\n\t\t\tif(u === data){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(data && data[rel._] && (tmp = rel.is(data))){\r\n\t\t\t\ttmp = (cat.root.get(tmp)._);\r\n\t\t\t\tif(u === tmp.put){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tdata = tmp.put;\r\n\t\t\t}\r\n\t\t\tif(opt.change){ // TODO: BUG? Move above the undef checks?\r\n\t\t\t\tdata = at.put;\r\n\t\t\t}\r\n\t\t\t// DEDUPLICATE // TODO: NEEDS WORK! BAD PROTOTYPE\r\n\t\t\tif(tmp.put === data && tmp.get === id && !Gun.node.soul(data)){ return }\r\n\t\t\ttmp.put = data;\r\n\t\t\ttmp.get = id;\r\n\t\t\t// DEDUPLICATE // TODO: NEEDS WORK! BAD PROTOTYPE\r\n\t\t\tcat.last = data;\r\n\t\t\tif(opt.as){\r\n\t\t\t\topt.ok.call(opt.as, at, ev);\r\n\t\t\t} else {\r\n\t\t\t\topt.ok.call(gun, data, at.get, at, ev);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGun.chain.val = function(cb, opt){\r\n\t\t\tvar gun = this, at = gun._, data = at.put;\r\n\t\t\tif(0 < at.ack && u !== data){\r\n\t\t\t\t(cb || noop).call(gun, data, at.get);\r\n\t\t\t\treturn gun;\r\n\t\t\t}\r\n\t\t\tif(cb){\r\n\t\t\t\t(opt = opt || {}).ok = cb;\r\n\t\t\t\topt.cat = at;\r\n\t\t\t\topt.out = {'#': Gun.text.random(9)};\r\n\t\t\t\tgun.get(val, {as: opt});\r\n\t\t\t\topt.async = true; //opt.async = at.stun? 1 : true;\r\n\t\t\t} else {\r\n\t\t\t\tGun.log.once(\"valonce\", \"Chainable val is experimental, its behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.\");\r\n\t\t\t\tvar chain = gun.chain();\r\n\t\t\t\tchain._.val = gun.val(function(){\r\n\t\t\t\t\tchain._.on('in', gun._);\r\n\t\t\t\t});\r\n\t\t\t\treturn chain;\r\n\t\t\t}\r\n\t\t\treturn gun;\r\n\t\t}\r\n\r\n\t\tfunction val(msg, ev, to){\r\n\t\t\tvar opt = this.as, cat = opt.cat, gun = msg.gun, coat = gun._, data = coat.put || msg.put, tmp;\r\n\t\t\tif(u === data){\r\n\t\t\t\t//return;\r\n\t\t\t}\r\n\t\t\t//if(coat.soul && !(0 < coat.ack)){ return }\r\n\t\t\tif(tmp = Gun.node.soul(data) || rel.is(data)){\r\n\t\t\t//if(data && data[rel._] && (tmp = rel.is(data))){\r\n\t\t\t\ttmp = (cat.root.get(tmp)._);\r\n\t\t\t\tif(u === tmp.put){//} || !(0 < tmp.ack)){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tdata = tmp.put;\r\n\t\t\t}\r\n\t\t\tif(ev.wait){ clearTimeout(ev.wait) }\r\n\t\t\t//if(!to && (!(0 < coat.ack) || ((true === opt.async) && 0 !== opt.wait))){\r\n\t\t\tif(!to){\r\n\t\t\t\tev.wait = setTimeout(function(){\r\n\t\t\t\t\tval.call({as:opt}, msg, ev, ev.wait || 1);\r\n\t\t\t\t}, opt.wait || 99);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(cat.field || cat.soul){\r\n\t\t\t\tif(ev.off()){ return } // if it is already off, don't call again!\r\n\t\t\t} else {\r\n\t\t\t\tif((opt.seen = opt.seen || {})[coat.id]){ return }\r\n\t\t\t\topt.seen[coat.id] = true;\r\n\t\t\t}\r\n\t\t\topt.ok.call(msg.gun || opt.gun, data, msg.get);\r\n\t\t}\r\n\r\n\t\tGun.chain.off = function(){\r\n\t\t\t// make off more aggressive. Warning, it might backfire!\r\n\t\t\tvar gun = this, at = gun._, tmp;\r\n\t\t\tvar back = at.back || {}, cat = back._;\r\n\t\t\tif(!cat){ return }\r\n\t\t\tif(tmp = cat.next){\r\n\t\t\t\tif(tmp[at.get]){\r\n\t\t\t\t\tobj_del(tmp, at.get);\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp = cat.ask){\r\n\t\t\t\tobj_del(tmp, at.get);\r\n\t\t\t}\r\n\t\t\tif(tmp = cat.put){\r\n\t\t\t\tobj_del(tmp, at.get);\r\n\t\t\t}\r\n\t\t\tif(tmp = at.soul){\r\n\t\t\t\tobj_del(cat.root._.graph, tmp);\r\n\t\t\t}\r\n\t\t\tif(tmp = at.map){\r\n\t\t\t\tobj_map(tmp, function(at){\r\n\t\t\t\t\tif(at.rel){\r\n\t\t\t\t\t\tcat.root.get(at.rel).off();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif(tmp = at.next){\r\n\t\t\t\tobj_map(tmp, function(ref){\r\n\t\t\t\t\tref.off();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tat.on('off', {});\r\n\t\t\treturn gun;\r\n\t\t}\r\n\t\tvar obj = Gun.obj, obj_map = obj.map, obj_has = obj.has, obj_del = obj.del, obj_to = obj.to;\r\n\t\tvar rel = Gun.val.rel;\r\n\t\tvar empty = {}, noop = function(){}, u;\r\n\t})(require, './on');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./index');\r\n\t\tGun.chain.map = function(cb, opt, t){\r\n\t\t\tvar gun = this, cat = gun._, chain;\r\n\t\t\tif(!cb){\r\n\t\t\t\tif(chain = cat.fields){ return chain }\r\n\t\t\t\tchain = cat.fields = gun.chain();\r\n\t\t\t\tchain._.val = gun.back('val');\r\n\t\t\t\tchain._.MAPOF = cat.soul;\r\n\t\t\t\tgun.on('in', map, chain._);\r\n\t\t\t\treturn chain;\r\n\t\t\t}\r\n\t\t\tGun.log.once(\"mapfn\", \"Map functions are experimental, their behavior and API may change moving forward. Please play with it and report bugs and ideas on how to improve it.\");\r\n\t\t\tchain = gun.chain();\r\n\t\t\tgun.map().on(function(data, key, at, ev){\r\n\t\t\t\tvar next = (cb||noop).call(this, data, key, at, ev);\r\n\t\t\t\tif(u === next){ return }\r\n\t\t\t\tif(Gun.is(next)){\r\n\t\t\t\t\tchain._.on('in', next._);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tchain._.on('in', {get: key, put: next, gun: chain});\r\n\t\t\t});\r\n\t\t\treturn chain;\r\n\t\t}\r\n\t\tfunction map(msg){\r\n\t\t\tif(!msg.put || Gun.val.is(msg.put)){ return }\r\n\t\t\tif(this.as.val){ this.off() } // TODO: Ugly hack!\r\n\t\t\tobj_map(msg.put, each, {at: this.as, msg: msg});\r\n\t\t\tthis.to.next(msg);\r\n\t\t}\r\n\t\tfunction each(v,f){\r\n\t\t\tif(n_ === f){ return }\r\n\t\t\tvar msg = this.msg, gun = msg.gun, at = this.at, tmp = (gun.get(f)._);\r\n\t\t\t(tmp.echo || (tmp.echo = {}))[at.id] = at;\r\n\t\t}\r\n\t\tvar obj_map = Gun.obj.map, noop = function(){}, event = {stun: noop, off: noop}, n_ = Gun.node._, u;\r\n\t})(require, './map');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./index');\r\n\t\tGun.chain.set = function(item, cb, opt){\r\n\t\t\tvar gun = this, soul;\r\n\t\t\tcb = cb || function(){};\r\n\t\t\topt = opt || {}; opt.item = opt.item || item;\r\n\t\t\tif(soul = Gun.node.soul(item)){ return gun.set(gun.back(-1).get(soul), cb, opt) }\r\n\t\t\tif(!Gun.is(item)){\r\n\t\t\t\tif(Gun.obj.is(item)){ return gun.set(gun._.root.put(item), cb, opt) }\r\n\t\t\t\treturn gun.get(gun._.root._.opt.uuid()).put(item);\r\n\t\t\t}\r\n\t\t\titem.get('_').get(function(at, ev){\r\n\t\t\t\tif(!at.gun || !at.gun._.back){ return }\r\n\t\t\t\tev.off();\r\n\t\t\t\tat = (at.gun._.back._);\r\n\t\t\t\tvar put = {}, node = at.put, soul = Gun.node.soul(node);\r\n\t\t\t\tif(!soul){ return cb.call(gun, {err: Gun.log('Only a node can be linked! Not \"' + node + '\"!')}) }\r\n\t\t\t\tgun.put(Gun.obj.put(put, soul, Gun.val.rel.ify(soul)), cb, opt);\r\n\t\t\t},{wait:0});\r\n\t\t\treturn item;\r\n\t\t}\r\n\t})(require, './set');\r\n\r\n\t;require(function(module){\r\n\t\tif(typeof Gun === 'undefined'){ return } // TODO: localStorage is Browser only. But it would be nice if it could somehow plugin into NodeJS compatible localStorage APIs?\r\n\r\n\t\tvar root, noop = function(){}, u;\r\n\t\tif(typeof window !== 'undefined'){ root = window }\r\n\t\tvar store = root.localStorage || {setItem: noop, removeItem: noop, getItem: noop};\r\n\r\n\t\t/*\r\n\t\t\tNOTE: Both `lib/file.js` and `lib/memdisk.js` are based on this design!\r\n\t\t\tIf you update anything here, consider updating the other adapters as well.\r\n\t\t*/\r\n\r\n\t\tGun.on('opt', function(root){\r\n\t\t\tthis.to.next(root);\r\n\t\t\tvar opt = root.opt;\r\n\t\t\tif(root.once){ return }\r\n\t\t\tif(false === opt.localStorage){ return }\r\n\t\t\topt.file = opt.file || opt.prefix || 'gun/'; // support old option name.\r\n\t\t\tvar graph = root.graph, acks = {}, count = 0, to;\r\n\t\t\tvar disk = Gun.obj.ify(store.getItem(opt.file)) || {};\r\n\t\t\t\r\n\t\t\troot.on('put', function(at){\r\n\t\t\t\tthis.to.next(at);\r\n\t\t\t\tGun.graph.is(at.put, null, map);\r\n\t\t\t\tif(!at['@']){ acks[at['#']] = true; } // only ack non-acks.\r\n\t\t\t\tcount += 1;\r\n\t\t\t\tif(count >= (opt.batch || 1000)){\r\n\t\t\t\t\treturn flush();\r\n\t\t\t\t}\r\n\t\t\t\tif(to){ return }\r\n\t\t\t\tto = setTimeout(flush, opt.wait || 1);\r\n\t\t\t});\r\n\r\n\t\t\troot.on('get', function(at){\r\n\t\t\t\tthis.to.next(at);\r\n\t\t\t\tvar lex = at.get, soul, data, u;\r\n\t\t\t\t//setTimeout(function(){\r\n\t\t\t\tif(!lex || !(soul = lex[Gun._.soul])){ return }\r\n\t\t\t\t//if(0 >= at.cap){ return }\r\n\t\t\t\tvar field = lex['.'];\r\n\t\t\t\tdata = disk[soul] || u;\r\n\t\t\t\tif(data && field){\r\n\t\t\t\t\tdata = Gun.state.to(data, field);\r\n\t\t\t\t}\r\n\t\t\t\tif(!data && !Gun.obj.empty(opt.peers)){ // if data not found, don't ack if there are peers.\r\n\t\t\t\t\treturn; // Hmm, what if we have peers but we are disconnected?\r\n\t\t\t\t}\r\n\t\t\t\troot.on('in', {'@': at['#'], put: Gun.graph.node(data), how: 'lS'});\r\n\t\t\t\t//},1);\r\n\t\t\t});\r\n\r\n\t\t\tvar map = function(val, key, node, soul){\r\n\t\t\t\tdisk[soul] = Gun.state.to(node, key, disk[soul]);\r\n\t\t\t}\r\n\r\n\t\t\tvar flush = function(){\r\n\t\t\t\tvar err;\r\n\t\t\t\tcount = 0;\r\n\t\t\t\tclearTimeout(to);\r\n\t\t\t\tto = false;\r\n\t\t\t\tvar ack = acks;\r\n\t\t\t\tacks = {};\r\n\t\t\t\ttry{store.setItem(opt.file, JSON.stringify(disk));\r\n\t\t\t\t}catch(e){ Gun.log(err = e || \"localStorage failure\") }\r\n\t\t\t\tif(!err && !Gun.obj.empty(opt.peers)){ return } // only ack if there are no peers.\r\n\t\t\t\tGun.obj.map(ack, function(yes, id){\r\n\t\t\t\t\troot.on('in', {\r\n\t\t\t\t\t\t'@': id,\r\n\t\t\t\t\t\terr: err,\r\n\t\t\t\t\t\tok: 0 // localStorage isn't reliable, so make its `ok` code be a low number.\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t})(require, './adapters/localStorage');\r\n\r\n\t;require(function(module){\r\n\t\tvar Gun = require('./index');\r\n\t\tvar websocket;\r\n\t\tif(typeof WebSocket !== 'undefined'){\r\n\t\t\twebsocket = WebSocket;\r\n\t\t} else {\r\n\t\t\tif(typeof webkitWebSocket !== 'undefined'){\r\n\t\t\t\twebsocket = webkitWebSocket;\r\n\t\t\t}\r\n\t\t\tif(typeof mozWebSocket !== 'undefined'){\r\n\t\t\t\twebsocket = mozWebSocket;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGun.on('opt', function(root){\r\n\t\t\tthis.to.next(root);\r\n\t\t\tvar opt = root.opt;\r\n\t\t\tif(root.once){ return }\r\n\t\t\tif(!websocket || false === opt.WebSocket){ return }\r\n\t\t\tvar ws = opt.ws || (opt.ws = {}); ws.who = 0;\r\n\t\t\tGun.obj.map(opt.peers, function(){ ++ws.who });\r\n\t\t\tif(root.once){ return }\r\n\t\t\tvar batch;\r\n\r\n\t\t\troot.on('out', function(at){\r\n\t\t\t\tthis.to.next(at);\r\n\t\t\t\tif(at.ws && 1 == ws.who){ return } // performance hack for reducing echoes.\r\n\t\t\t\tbatch = JSON.stringify(at);\r\n\t\t\t\tif(ws.drain){\r\n\t\t\t\t\tws.drain.push(batch);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tws.drain = [];\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\tif(!ws.drain){ return }\r\n\t\t\t\t\tvar tmp = ws.drain;\r\n\t\t\t\t\tws.drain = null;\r\n\t\t\t\t\tif(!tmp.length){ return }\r\n\t\t\t\t\tbatch = JSON.stringify(tmp);\r\n\t\t\t\t\tGun.obj.map(opt.peers, send, root);\r\n\t\t\t\t}, opt.wait || 1);\r\n\t\t\t\tGun.obj.map(opt.peers, send, root);\r\n\t\t\t});\r\n\t\t\tfunction send(peer){\r\n\t\t\t\tvar root = this, msg = batch;\r\n\t\t\t\tvar wire = peer.wire || open(peer, root);\r\n\t\t\t\tif(!wire){ return }\r\n\t\t\t\tif(wire.readyState === wire.OPEN){\r\n\t\t\t\t\twire.send(msg);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t(peer.queue = peer.queue || []).push(msg);\r\n\t\t\t}\r\n\t\t\tfunction receive(msg, peer, root){\r\n\t\t\t\tif(!root || !msg){ return }\r\n\t\t\t\ttry{msg = JSON.parse(msg.data || msg);\r\n\t\t\t\t}catch(e){}\r\n\t\t\t\tif(msg instanceof Array){\r\n\t\t\t\t\tvar i = 0, m;\r\n\t\t\t\t\twhile(m = msg[i++]){\r\n\t\t\t\t\t\treceive(m, peer, root);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(1 == ws.who){ msg.ws = noop } // If there is only 1 client, just use noop since it doesn't matter.\r\n\t\t\t\troot.on('in', msg);\r\n\t\t\t}\r\n\t\t\tfunction open(peer, as){\r\n\t\t\t\tif(!peer || !peer.url){ return }\r\n\t\t\t\tvar url = peer.url.replace('http', 'ws');\r\n\t\t\t\tvar wire = peer.wire = new websocket(url);\r\n\t\t\t\twire.onclose = function(){\r\n\t\t\t\t\troot.on('bye', peer);\r\n\t\t\t\t\treconnect(peer, as);\r\n\t\t\t\t};\r\n\t\t\t\twire.onerror = function(error){\r\n\t\t\t\t\treconnect(peer, as); // placement?\r\n\t\t\t\t\tif(!error){ return }\r\n\t\t\t\t\tif(error.code === 'ECONNREFUSED'){\r\n\t\t\t\t\t\t//reconnect(peer, as);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\twire.onopen = function(){\r\n\t\t\t\t\troot.on('hi', peer);\r\n\t\t\t\t\tvar queue = peer.queue;\r\n\t\t\t\t\tpeer.queue = [];\r\n\t\t\t\t\tGun.obj.map(queue, function(msg){\r\n\t\t\t\t\t\tbatch = msg;\r\n\t\t\t\t\t\tsend.call(as, peer);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\twire.onmessage = function(msg){\r\n\t\t\t\t\treceive(msg, peer, as); // diff: peer not wire!\r\n\t\t\t\t};\r\n\t\t\t\treturn wire;\r\n\t\t\t}\r\n\t\t\tfunction reconnect(peer, as){\r\n\t\t\t\tclearTimeout(peer.defer);\r\n\t\t\t\tpeer.defer = setTimeout(function(){\r\n\t\t\t\t\topen(peer, as);\r\n\t\t\t\t}, 2 * 1000);\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar noop = function(){};\r\n\t})(require, './adapters/websocket');\r\n\r\n}());\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/gun/gun.js\n// module id = 960\n// module chunks = 77883786134883","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/immutable/dist/immutable.js\n// module id = 970\n// module chunks = 77883786134883","import React from 'react';\nimport './index.scss';\n\nconst Clap = ({ title, countTotal }) => (\n  <div className=\"clap-analytics row\">\n    <div className=\"col-10\">\n      <p>{title}</p>\n    </div>\n    <div className=\"col\">\n      <p>{countTotal}</p>\n    </div>\n  </div>\n);\n\nexport default Clap;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Analytics/Clap/index.js","import React from 'react';\n\nimport Clap from './Clap';\n\nconst Analytics = ({ data }) => (\n  <div className=\"container\">\n    {data.map(clap =>\n      (<Clap\n        title={clap.title}\n        countTotal={clap.countTotal}\n        key={clap.title}\n      />))}\n  </div>\n);\n\nexport default Analytics;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Analytics/index.js","import React, { Component } from 'react';\n\nclass NameForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: '' };\n    this.gun = this.props.gun;\n  }\n\n  handleChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.gun.get('username').put({\n      name: this.state.name,\n    }, (ack) => {\n      if (ack.err) {\n        console.error(ack.err);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={e => this.handleSubmit(e)}>\n        <label>\n          Name:\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={e => this.handleChange(e)}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default NameForm;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/NameForm/index.js","import React, { Component } from 'react';\nimport { Map } from 'immutable';\nimport { isBrowser } from '../../../api';\nimport Analytics from '../../../components/Analytics';\nimport NameForm from '../../../components/NameForm';\n\nconst Gun = isBrowser() ? require('gun/gun') : () => 0;\n\nconst getData = map =>\n  map.valueSeq().filter(x => (x.title && x.countTotal));\n\nclass GunPage extends Component {\n  constructor(props) {\n    super(props);\n    this.gun = Gun('https://gun-ndbtgvyfxy.now.sh/gun');\n    this.state = {\n      name: '',\n      map: Map(),\n    };\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  update() {\n    this.gun.get('username').on((data) => {\n      this.setState({ name: data.name });\n    });\n\n    // Get the value of each post\n    this.gun.get('posts').map().on((post, id) => {\n      this.setState(prevState => ({\n        ...prevState,\n        map: prevState.map.set(id, post),\n      }));\n    });\n  }\n\n  render() {\n    const { name, map } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h2>Gun Demo Page</h2>\n            <NameForm gun={this.gun} name={this.name} />\n            <div>\n              Your name: {name}\n            </div>\n          </div>\n        </div>\n\n        <h3>Posts</h3>\n        <Analytics data={getData(map)} />\n      </div>\n    );\n  }\n}\n\nexport default GunPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/demo/gun/index.js"],"sourceRoot":""}